<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第30周分享</title>
    <url>/weekly/weekly30.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>


<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-Linux-Performance-Tools"><a href="#1-Linux-Performance-Tools" class="headerlink" title="1. Linux Performance Tools"></a>1. <a href="http://www.brendangregg.com/linuxperf.html" target="_blank" rel="noopener">Linux Performance Tools</a></h2><p>性能优化大师 Brendan Gregg 出品的 Linux Perfomance Tools ，工具涵盖非常全面。</p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-Linux-load-averages"><a href="#1-Linux-load-averages" class="headerlink" title="1. Linux load averages"></a>1. <a href="http://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html" target="_blank" rel="noopener">Linux load averages</a></h2><p>性能优化大师 Brendan Gregg 对 Linux 里面的平均负载的详细解读。非常值得一看，平均负载是一个用过 Linux 的人都觉得自己懂了的东西，但其实可能并不真的懂。而且网络上的很多讲解和说法可能大都是错误的。</p>
<h2 id="2-Google-Engineering-Practices-Documentation"><a href="#2-Google-Engineering-Practices-Documentation" class="headerlink" title="2. Google Engineering Practices Documentation"></a>2. <a href="https://google.github.io/eng-practices/" target="_blank" rel="noopener">Google Engineering Practices Documentation</a></h2><p>Google 出品的 工程师实践文档，谷歌的生产环境中基本涵盖所有语言，在这些项目的通用工程实践过程中积累了大量的经验。这些文档代表了谷歌长期以来开发的各种最佳实践的集体经验，开源项目或其他组织以及个人都可能会从这些知识中受益，因此谷歌公开了这些知识。</p>
<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><p>前段时间事情太多，导致 weekly 断更了一段时间，最近事情快忙完了，会逐渐的恢复。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.10.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-10-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.10.0" target="_blank" rel="noopener">2.10.0</a> 现在(2019.05.25)已经发布，在上个月的 <a href="http://erdong.site/Prometheus/New-Features/New-Features-in-Prometheus-2-9-0.html">2.9.0</a> 之后又进行了一些修正和改进。</p>
<a id="more"></a>

<p>TSDB 的数据记录又一次得到了改进，这意味着对许多系列的查询速度更快。还添加了一个新的特殊度量 <code>scrape_series_add</code> ，这将有助于找到引起混乱的目标。</p>
<p>在 Azure 上添加公共 IP 可以使 Kubernetes 的服务发现 endpoint 节点和主机名。用于警报的 UI 也得到了改进，模板添加了新的变量。</p>
<p>对于使用 Alerts API的人来说有一个小的中断更改，该值现在是一个字符串，而不是一个浮点数(正如我们在查询 API 上所做的那样)，以正确地支持 non-real values。</p>
<p>还有许多改进、bug修复和其他更改，可以查看 <a href="https://github.com/prometheus/prometheus/releases/tag/v2.10.0" target="_blank" rel="noopener">release notes</a> 来获取更多的信息。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-10-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-10-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.11.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-11-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.11.0" target="_blank" rel="noopener">2.11.0</a> 现在(2019.07.9)已经发布，在5月的 <a href="http://erdong.site/Prometheus/New-Features/New-Features-in-Prometheus-2-10-0.html">2.10.0</a> 之后又进行了一些修正和改进。</p>
<a id="more"></a>

<p>从TSDB开始，记录逻辑有了更多的性能改进。特别需要注意的是，如果您有一个像 <code>a|b</code> 这样的正则表达式(例如 Grafana 为选择多个变量的表达式)，那么它现在被评估为查找而不是正则表达式扫描，因此 <code>x=~&quot;a&quot;</code> 现在和 <code>x=&quot;a&quot;</code>一样高效。</p>
<p>对于 WAL 的 “unknown series references” 现在已经完全修复。每次头部压缩时都会启动一个新的段，这对于在低容量实例上减少磁盘空间很有用，对于现在应该完全修复的WAL“未知系列引用”，在每次头部压缩时都会启动一个新的段，这对于在低卷实例上减少磁盘空间很有用，并且还有 还有一个选择进入 <code>--storage.tsdb.wal-compression</code>的标志来压缩 WAL 。</p>
<p>在 Prometheus 中，PromQL和远程写都有性能改进。现在可以像在 <code>prometheus.yml</code> 中一样，将 globs 用于单元测试的规则文件。还有一个配置选项可以通过 Alertmanager 的 v2 API 接口来获取。</p>
<p>还有许多改进、bug修复和其他更改，可以查看 <a href="https://github.com/prometheus/prometheus/releases/tag/v2.11.0" target="_blank" rel="noopener">release notes</a> 来获取更多的信息。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-11-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-11-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.12.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-12-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.12.0" target="_blank" rel="noopener">2.12.0</a> 现在(2019.08.17)已经发布，在上个月的 <a href="http://erdong.site/Prometheus/New-Features/New-Features-in-Prometheus-2-11-0.html">2.11.0</a> 之后又进行了一些修正和改进。</p>
<a id="more"></a>
<p>在当前的 6 周发布周期中，每一个 Prometheus 版本都有比较少的特性，但是发布的更有规律。在这个版本中最引人注目的特性是，如果 Prometheus 在下一次启动时崩溃，它将打印正在运行的 PromQL ，这有助于查找开销过大的查询。</p>
<p>在内存方面 TSDB 有很多的性能改进，还添加了一个 <code>prometheus_tsdb_retention_limit_bytes</code> 的指标。虽然与用户无关，但 TSDB 存储库已经合并到 GitHub 上的  Prometheus 主存储库中。这将使我们作为开发人员的生活更加轻松。</p>
<p>还有许多改进、bug修复和其他更改，可以查看 <a href="https://github.com/prometheus/prometheus/releases/tag/v2.12.0" target="_blank" rel="noopener">release notes</a> 来获取更多的信息。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-12-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-12-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>公告-20190809</title>
    <url>/notice/notice-20190809.html</url>
    <content><![CDATA[<p> 最近有一些事情和大家说一下，大概也就是 2 点吧。</p>
<p>1、请假：最近事情有点多，weekly 的每周分享停更几周。目前最新的更新是 第 29 周分享，我请假到第 35 周吧，第 36 周开始正常更新。</p>
<p>2、关于评论：我之前写文章聊过微信公众号的留言评论功能，最近我在业余时间翻看了我之前的文章，发现有读者给我在我的文章下留言了，但是我使用的留言系统没有给我任何提示，错过了和大家交流的机会。我仔细思考了这个流程发现，当前使用的评论系统可能是存在一些问题，所以我决定先关闭评论功能，等以后找到合适的工具了再开启。这段时间大家有问题可以给我发邮件或者在 GitHub 上留言，感谢大家的支持。</p>
<h2 id="致歉"><a href="#致歉" class="headerlink" title="致歉"></a>致歉</h2><p>向所有在我的博客下留言的读者致歉，我没有及时回复您的留言。如果您还有问题您可以发邮件给我，我们一起讨论交流。</p>
<a id="more"></a>







<p>======================<br>由于无法及时收到评论内容，所以关闭评论功能。<br>大家有问题欢迎发邮件到 <a href="mailto:erdong@mail.erdong.site" target="_blank" rel="noopener">erdong@mail.erdong.site</a> ，或者 <a href="https://github.com/erdong/erdong.github.io/issues" target="_blank" rel="noopener">https://github.com/erdong/erdong.github.io/issues</a> 提 Issue ，我会及时回复。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>notice</category>
      </categories>
      <tags>
        <tag>notice</tag>
      </tags>
  </entry>
  <entry>
    <title>第29周分享</title>
    <url>/weekly/weekly29.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>



<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-DownGit"><a href="#1-DownGit" class="headerlink" title="1. DownGit"></a>1. <a href="https://minhaskamal.github.io/DownGit/#/home" target="_blank" rel="noopener">DownGit</a></h2><p>一个小工具用来在 GitHub 上下载某个文件夹或者文件，还可以创建下载链接给其他人。</p>
<p>Github中并不提供单个文件夹下载, 每当下载仓库中某个文件夹时,只能克隆整个仓库, 浪费硬盘空间不说,浪费时间不说,每次克隆仓库时候,看到这下下载速度简直不能忍受，使用这个工具就好了。 </p>
<h2 id="2-阮一峰的免费招聘服务"><a href="#2-阮一峰的免费招聘服务" class="headerlink" title="2. 阮一峰的免费招聘服务"></a>2. <a href="https://github.com/ruanyf/weekly/issues/692" target="_blank" rel="noopener">阮一峰的免费招聘服务</a></h2><p>官方介绍：<br>这个帖子是周刊的免费招聘服务。如果你们公司正在招人，欢迎把招聘信息发在这个帖子里面。请简要描述，岗位名称、工作地点、岗位要求、公司简介、联系方式等等。</p>
<p>如果希望把信息发到正式的周刊上面，推送到所有读者，请与我联系（Email: <a href="mailto:yifeng.ruan@gmail.com" target="_blank" rel="noopener">yifeng.ruan@gmail.com</a>），价格是人民币 250元/条。</p>
<p>读者可以咨询，但请不要发布与招聘无关的内容，禁止对公司或岗位进行评论或抱怨。如果有意应聘，请直接与发贴人联系。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊微信公众号留言</title>
    <url>/article/wechat-message-board.html</url>
    <content><![CDATA[<p>在写了半年多微信公众号好以后，上周突然发现，我的微信公众号没有留言功能。起初没什么感觉是读者比较少，想着也没什么人给我留言，后来说自己给自己留个言，看看后台是怎么个操作过程，结果才发现没有这个功能。</p>
<a id="more"></a>
<p>刚发现的时候，很是迷惑，也不知道为什么。</p>
<p>去网上搜了各种资料，也去官网找了帮助文档。</p>
<p>最终的结论是这样：</p>
<p>微信公众号在早期是只能发文章，坚持发表原创文章会被官方邀请开通原创管理和留言管理两个功能。后来微信公众号官方把这两个功能开放给了所有作者，在 2018 年 3 月的时候，微信公众号发布通知，关闭了新申请公众号的留言功能。至此之后所有新申请的公众号都没有了留言功能，而之前有留言功能的公众号也就成了稀缺资源。</p>
<p>微信公众号官方的帮助文档对这个的解释是这样的。</p>
<p>微信公众号留言功能最初上线之时，官方称是“为了提升微信订阅号的互动性”，而留言功能的确也“不辱使命”成为创作者和读者之间最重要的沟通工具之一。自从去年微信平台调整留言规则后，大家都切身感受到了运营新号的阻碍，没有留言互动，缺少读者反馈，粉丝积极性也很难调动。</p>
<p>为了解决留言功能的问题，网络上也是八仙过海各显神通，总结一下，主要就是以下几种方式。</p>
<h2 id="迁移留言功能"><a href="#迁移留言功能" class="headerlink" title="迁移留言功能"></a>迁移留言功能</h2><p>上边说到了在 2018 年 3 月之后所有新申请的公众号都没有了留言功能，而之前有留言功能的公众号也就成了稀缺资源。迁移留言功能就是把一个公众号的留言功能迁移到另一个公众号上，大概的做法如下：</p>
<p>准备材料：<br>A 账号：作者的公众号，无留言功能，不能是个人公众号，需要是企业或者其他组织认证。<br>B 账号：有留言功能的账号，最好是无历史文章的干净账号。</p>
<p>然后申请账号迁移，把 B 账号的留言功能迁移到 A 账号上，中间需要经历一些公证的过程，时间大概要一两个月吧，再花费一些必要的费用，就迁移成功了。微信官方有一套完整的公众号迁移规则，规定了账号迁移目前仅对粉丝、文章素材（可选）、微信号（可选）、违规记录和已开通的原创保护功能、留言管理功能进行迁移。具体的细节，请大家参考微信公众号官网。<br><a href="http://kf.qq.com/product/weixinmp.html#hid=2488" target="_blank" rel="noopener">http://kf.qq.com/product/weixinmp.html#hid=2488</a></p>
<h2 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h2><p>除了上述的迁移以外，有很多的开发者嗅到了这个商机，开发了很多的第三方插件，可以插入在文章的底部，插入一个小程序或者网页链接，读者留言的时候就需要一次跳转，跳转到这个第三方的平台上进行留言。</p>
<p>每个小程序对账户入驻和关联的审核标准不同，生成的留言链接样式也各不一样。既有完全复刻微信留言界面的，也有新增留言可被其他读者回复功能的，公众号作者可以根据自己的需求喜好选择合适的小程序。</p>
<p>留言小程序虽然好上手，也有不可避免的不便之处。比如，无法将留言与文章显示在同一页面，降低了留言活跃性；另外，小程序无法在PC端查看和操作，也会一定程度上限制留言的互动性。</p>
<p>也有开发者是在底部的“阅读全文”按钮上做的第三方跳转。不过这种方法对大部分个人号来说还是门槛略高。读者对“阅读原文”留言板的热情仍然比不上微信自带的留言功能。</p>
<h2 id="其他渠道"><a href="#其他渠道" class="headerlink" title="其他渠道"></a>其他渠道</h2><p>当公众号作者还在纠结怎样找到留言功能的代替方式时，一部分内容服务机构已经在尝试更进一步的粉丝互动方案了。无论你的账号是否有留言功能，都可以通过这些平台来开展与粉丝之间的深度交流。</p>
<p>毕竟，留言的本质也是为了互动。</p>
<p>比如 知识星球，知识星球原名小密圈，是一个知识社群的 APP 平台，是内容创作者连接铁杆粉丝，做出品质社群，实现知识变现的工具。其功能之一就是内容创作者的粉丝管理工具。</p>
<p>以上就是当前在微信公众号没有留言功能的情况下，各位微信公众号作者替代留言的功能的几种方案。</p>
<p>其实除了文章留言，公众号账号留言也是一种直接的互动方式，是值得公众号作者好好维护的互动渠道。比如在菜单栏单独开辟留言指引，亦或文章推送后鼓励读者在聊天页面留言。不同于文章评论互动，账号后台留言互动实际上更有私下交流的氛围，在拉近与读者的距离方面具备优势。</p>
<p>需要注意的是回复读者的信息是有时间限制的， “粉丝发送给公众帐号消息的48小时内未回复粉丝的消息，48小时后则无法再主动发送消息给该粉丝，但如果下次该粉丝主动发送消息给您，您则可以进行回复。”</p>
<p>对于我来说，迁移账号我没有带留言功能的账号，有不想使用三方插件。至于其他的渠道，现在读者比较少，等多一些了再考虑。目前来看使用公众号的账号留言也是不错的选择。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>article</category>
      </categories>
      <tags>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>第28周分享</title>
    <url>/weekly/weekly28.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>



<h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><h2 id="1-GitHub官方中文文档"><a href="#1-GitHub官方中文文档" class="headerlink" title="1. GitHub官方中文文档"></a>1. <a href="https://help.github.com/cn" target="_blank" rel="noopener">GitHub官方中文文档</a></h2><p>GitHub 正式推出帮助文档中文版，很多不擅长英语的开发者以后可以直接看中文了，省去了网上很多人的二次转发。这也是 GitHub 继英文和日文后支持的第三种语言。 </p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-cortex"><a href="#1-cortex" class="headerlink" title="1. cortex"></a>1. <a href="https://github.com/cortexproject/cortex" target="_blank" rel="noopener">cortex</a></h2><p>A multitenant, horizontally scalable Prometheus as a Service <a href="https://github.com/cortexproject/cortex" target="_blank" rel="noopener">https://github.com/cortexproject/cortex</a></p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-如何超过大多数人"><a href="#1-如何超过大多数人" class="headerlink" title="1. 如何超过大多数人"></a>1. <a href="https://coolshell.cn/articles/19464.html" target="_blank" rel="noopener">如何超过大多数人</a></h2><p>左耳朵耗子 陈皓 最近写的一篇文章，很值得阅读，而且值得多次阅读。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第27周分享</title>
    <url>/weekly/weekly27.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>



<h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><h2 id="1-阿里云天池发布“最聪明榜单”"><a href="#1-阿里云天池发布“最聪明榜单”" class="headerlink" title="1. 阿里云天池发布“最聪明榜单”"></a>1. <a href="https://yq.aliyun.com/articles/707388" target="_blank" rel="noopener">阿里云天池发布“最聪明榜单”</a></h2><p>7月4日，阿里云天池大赛发布“最聪明榜单”，对历史参赛高校进行排名。数据显示，国内高校中浙大参赛热情最高，新加坡国立大学则荣登海外榜首。</p>
<p>作为和Kaggle齐名的全球最知名的数据竞赛平台，阿里云天池大赛已经成功举办100场以上高规格数据类竞赛，全球开发者可通过数据和AI算法解决真实的社会问题与挑战。目前已吸引全球30万开发者，其中60%来自高校。</p>
<p>参加天池大赛已成为全球计算机科学100强高校学霸的共同爱好，如南洋理工大学、卡耐基梅隆大学等高校学生都曾参赛。</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-PyRoyale"><a href="#1-PyRoyale" class="headerlink" title="1. PyRoyale"></a>1. <a href="https://github.com/Igoorx/PyRoyale" target="_blank" rel="noopener">PyRoyale</a></h2><p>这是一个开源的马里奥游戏模拟器，支持多人同时在线，可以说是吃鸡版的马里奥。</p>
<p>他们提供了一个页面来进行体验，地址如下：</p>
<p><a href="http://77.68.80.27/royale/index.html#" target="_blank" rel="noopener">http://77.68.80.27/royale/index.html#</a></p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-高性能计算-HPC-技术、方案和行业全面解析"><a href="#1-高性能计算-HPC-技术、方案和行业全面解析" class="headerlink" title="1. 高性能计算(HPC)技术、方案和行业全面解析"></a>1. <a href="http://weidian.com/s/343499232?wfr=c" target="_blank" rel="noopener">高性能计算(HPC)技术、方案和行业全面解析</a></h2><p>“架构师技术联盟”微信公众号整理了 HPC 行业的一些基础架构以及存储的内容，很适合出入 HPC 的人员学习了解 HPC 。该文档需要付费才能获取。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第26周分享</title>
    <url>/weekly/weekly26.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>



<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="1-二维码的生成细节和原理"><a href="#1-二维码的生成细节和原理" class="headerlink" title="1. 二维码的生成细节和原理"></a>1. <a href="https://coolshell.cn/articles/10590.html#jtss-tsina" target="_blank" rel="noopener">二维码的生成细节和原理</a></h2><p>2013 年的时候陈皓写的二维码的生成细节和原理，把二维码的生成过程讲的很好。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>QDS05 Prometheus</title>
    <url>/QDS/qds05.html</url>
    <content><![CDATA[<p>QDS （Quick Deployment Series）快速的部署一个软件。这次我们来部署 Prometheus 。</p>
<p>Prometheus 有两个意思，一个是时序数据库，另一个是基于时序数据库的监控解决方案。</p>
<p>我们本次安装特指安装 Prometheus 时序数据库。</p>
<a id="more"></a>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>Prometheus 可以从两个地方找到下载链接，一个是官网下载页面，一个是 Github 的官方仓库。</p>
<p>官方下载页面链接，</p>
<p><a href="https://prometheus.io/download/" target="_blank" rel="noopener">https://prometheus.io/download/</a></p>
<p>Github 官方仓库</p>
<p><a href="https://github.com/prometheus/prometheus/releases" target="_blank" rel="noopener">https://github.com/prometheus/prometheus/releases</a></p>
<p>这两个地方最终的下载源都是一样的。使用下载工具将构建好的压缩包下载到要安装的机器上即可。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>当前（2019 年 6 月）最新的版本是 2.10，下载好的安装包名称是 prometheus-2.10.0.linux-amd64.tar.gz</p>
<p>首先在要安装的目录解压该软件包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxf prometheus-2.10.0.linux-amd64.tar.gz -C /opt/prometheus</span><br></pre></td></tr></table></figure>

<p>解压好的目录里有如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console_libraries  consoles  LICENSE  NOTICE  prometheus  prometheus.yml  promtool</span><br></pre></td></tr></table></figure>

<p>其中 prometheus 是程序的可执行二进制文件， prometheus.yml 是数据库的默认配置。</p>
<h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><p>Prometheus 启动非常简单，不需要 root 权限，直接执行二进制文件 prometheus 即可启动。</p>
<p>为了方便管理，我们创建数据存储目录和日志目录以及 pid 目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /opt/prometheus</span><br><span class="line">mkdir data logs run</span><br></pre></td></tr></table></figure>

<p>我们提供两种方式来启动 prometheus 。</p>
<h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><p>在 CentOS 7 里，可以将启动 Prometheus 的脚本让系统去维护，还可以设置成开机自启动。 </p>
<p>创建系统启动文件 prometheus.service </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch /usr/lib/systemd/system/prometheus.service</span><br></pre></td></tr></table></figure>

<p>编辑该文件，写入如下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Description=Prometheus Database</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/opt/prometheus/prometheus --config.file=/opt/prometheus/prometheus.yml --web.listen-address=:9090 --storage.tsdb.path=/opt/prometheus/data/</span><br><span class="line">User=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>这种情况下，日志会写入系统日志。</p>
<p>启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start prometheus</span><br></pre></td></tr></table></figure>

<p>设置开机自起</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable prometheus</span><br></pre></td></tr></table></figure>

<h2 id="普通用户脚本启动"><a href="#普通用户脚本启动" class="headerlink" title="普通用户脚本启动"></a>普通用户脚本启动</h2><p>创建一个 启动脚本 run.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch run.sh</span><br></pre></td></tr></table></figure>

<p>编辑 run.sh , 写入如下内容，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">nohup /opt/prometheus/prometheus --config.file=/opt/prometheus/prometheus.yml --web.listen-address=:9090 --storage.tsdb.path=/opt/prometheus/data/ &gt;&gt; /opt/prometheus/logs/prometheus.log  2&gt;&amp;1 &amp; echo $! &gt; $BASEPATH/run/prometheus.pid</span><br></pre></td></tr></table></figure>

<p>启动服务 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh run.sh</span><br></pre></td></tr></table></figure>

<h1 id="简单验证"><a href="#简单验证" class="headerlink" title="简单验证"></a>简单验证</h1><p>执行 如下命令有时序数据输出即为正常。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl 127.0.0.1:9090/metrics</span><br></pre></td></tr></table></figure>

<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>QDS</category>
      </categories>
      <tags>
        <tag>prometheus</tag>
        <tag>QDS</tag>
      </tags>
  </entry>
  <entry>
    <title>第25周分享</title>
    <url>/weekly/weekly25.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>



<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="1-Go-语言最佳实践"><a href="#1-Go-语言最佳实践" class="headerlink" title="1. Go 语言最佳实践"></a>1. <a href="https://github.com/llitfkitfk/go-best-practice" target="_blank" rel="noopener">Go 语言最佳实践</a></h2><p>作者的目标是向大家提供有关编写 Go 代码最佳实践的建议。</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-xsec-traffic"><a href="#1-xsec-traffic" class="headerlink" title="1. xsec-traffic"></a>1. <a href="https://github.com/netxfly/xsec-traffic" target="_blank" rel="noopener">xsec-traffic</a></h2><p>xsec-traffic为一款轻量级的恶意流量分析程序，包括传感器sensor和服务端server 2个组件。sensor负责采集流量，然后发到server端，由server来检测是否为恶意流量。server端的功能为接收各sensor采集到的流程并判断是否为恶意流量。</p>
<h2 id="2-多吉搜索"><a href="#2-多吉搜索" class="headerlink" title="2. 多吉搜索"></a>2. <a href="https://dogedoge.com" target="_blank" rel="noopener">多吉搜索</a></h2><p>一个新的国产搜索引擎，搜索结果比较清爽。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第24周分享</title>
    <url>/weekly/weekly24.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>



<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="1-illustrations"><a href="#1-illustrations" class="headerlink" title="1. illustrations"></a>1. <a href="https://undraw.co/illustrations" target="_blank" rel="noopener">illustrations</a></h2><p>一个插画网站，可以方便的下载该风格的插画，可以自定义颜色，网站会定期更新，用来做 PPT 或者文章插图和合适。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第23周分享</title>
    <url>/weekly/weekly23.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>



<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-MongoDB-教程"><a href="#1-MongoDB-教程" class="headerlink" title="1. MongoDB 教程"></a>1. <a href="https://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">MongoDB 教程</a></h2><p>初次使用 MongoDB 可以使用该教程快速查询了解。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第22周分享</title>
    <url>/weekly/weekly22.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>



<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="1-TCP-Traeroute"><a href="#1-TCP-Traeroute" class="headerlink" title="1. TCP Traeroute"></a>1. <a href="https://support.opendns.com/hc/en-us/articles/227989007-How-to-Running-a-TCP-Traceroute" target="_blank" rel="noopener">TCP Traeroute</a></h2><p>该文章介绍了如何在 linux 、MacOS 、window 下如何追踪 TCP 过程。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第21周分享</title>
    <url>/weekly/weekly21.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>



<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-docker-slim"><a href="#1-docker-slim" class="headerlink" title="1. docker-slim"></a>1. <a href="https://github.com/docker-slim/docker-slim" target="_blank" rel="noopener">docker-slim</a></h2><p>docker-slim 是一个可以自动缩减 docker 镜像体积的工具，方便分发。使用简单，直接执行二进制文件即可，使用命令 <code>docker-slim build --http-probe your-name/your-app</code> 即可。</p>
<h2 id="2-终端录屏工具"><a href="#2-终端录屏工具" class="headerlink" title="2. 终端录屏工具"></a>2. <a href>终端录屏工具</a></h2><p>经常有将终端录屏生成视频或者 GIF 的需求，推荐如下三个工具。</p>
<ul>
<li><a href="https://asciinema.org" target="_blank" rel="noopener">asciinema</a></li>
<li><a href="https://terminalizer.com" target="_blank" rel="noopener">Terminalizer</a></li>
<li><a href="http://0xcc.net/ttyrec/" target="_blank" rel="noopener">ttyrec</a></li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第20周分享</title>
    <url>/weekly/weekly20.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-miniNodes"><a href="#1-miniNodes" class="headerlink" title="1. miniNodes"></a>1. <a href="https://www.mininodes.com/product/5-node-raspberry-pi-3-com-carrier-board/" target="_blank" rel="noopener">miniNodes</a></h2><p>这公司是做 mini arm 服务器托管的，一块板子上面可以插 5 个树莓派的计算模块。一块板子一个小集群。母版上内建交换机，5台机器插一根网线就行了。</p>
<ol start="2">
<li><p><a href="https://github.com/htcat/htcat" target="_blank" rel="noopener">htcat</a></p>
<p>一个并发 http 请求且顺序写入的 go 工具/库</p>
</li>
<li><p><a href="https://mdnice.github.io" target="_blank" rel="noopener">Markdown Nice</a></p>
</li>
</ol>
<p>一个将 Markdown 语法转换成微信公众号的工具。 </p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-kindle电子书分享网"><a href="#1-kindle电子书分享网" class="headerlink" title="1. kindle电子书分享网"></a>1. <a href="https://kindle.51nazhun.pub" target="_blank" rel="noopener">kindle电子书分享网</a></h2><p>一个小网站，以解决找电子书的烦恼，后端基于rails，</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus 简介</title>
    <url>/Prometheus/notes/prometheus-introduction.html</url>
    <content><![CDATA[<p>Prometheus 是一个开源的系统监控和警报工具，最初是在 SoundCloud 上构建的。自2012年启动以来，许多公司和组织都采用了 Prometheus，该项目拥有非常活跃的开发人员和用户社区。它现在是一个独立的开源项目，独立于任何公司进行维护。为了强调这一点，并阐明该项目的治理结构，Prometheus 于2016年加入 CNCF （云原生计算基金会），成为继 Kubernetes 之后的第二个托管项目。2018 年 8 月 9 日，CNCF 宣布开放源代码监控工具 Prometheus 已从孵化状态进入毕业状态。</p>
<a id="more"></a>
<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>Prometheus 的主要特性有：</p>
<ul>
<li>一个多维数据模型，包含由 metric 和 key/value 标识的时间序列数据</li>
<li>PromQL是一种灵活的查询语言</li>
<li>不依赖分布式存储，单个服务器节点是自治的</li>
<li>基于 HTTP 协议通过 pull 形式进行收集时间序列数据</li>
<li>push 形式的时间序列数据是通过一个中间网关来支持的</li>
<li>targets 可以通过服务发现或静态配置发现的</li>
<li>多种模式的图形和仪表盘支持</li>
</ul>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>Prometheus 生态系统由多个组件组成，其中许多是可选的:</p>
<p>Prometheus Server：主要的 Prometheus 服务器，它抓取和存储时间序列数据<br>Client Libraries：用于检测应用程序代码的库，主要用于客户端。<br>Push Gateway：支持短期生命周期的 Jobs<br>Exporter：为 HAProxy、StatsD、Graphite 等服务提供数据。<br>Alert Manager：一个告警处理工具<br>各种支持工具</p>
<p>大多数的 Prometheus 组件是用 Go 语言来编写的，这使得他们可以很容易的构建并且使用静态的二进制文件来部署。</p>
<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>这张图展示了 Prometheus 的架构及其生态系统的一些组成部分:</p>
<p><img src="https://prometheus.io/assets/architecture.png" alt="prometheus architrcture"><br>【图片来自官方网站】</p>
<p>Prometheus 从各种采集端的 Job 中获取 Metric，要么直接获取，要么通过 Push Gateway 获取短生命周期 Job 。它在本地存储所有抓取的数据，并对这些数据处理聚合和记录以生成新的时间序列，或者生成警报消息。Grafana 或其他 API 使用者可以使用 PromQL 语法来查询使用数据。</p>
<h1 id="Prometheus-适合做什么"><a href="#Prometheus-适合做什么" class="headerlink" title="Prometheus 适合做什么"></a>Prometheus 适合做什么</h1><p>Prometheus 可以很好地记录任何纯数字的时间序列。它既适合以机器为中心的监视，也适合高度动态的面向服务的体系结构的监视。在微服务的世界中，它对多维数据收集和查询的支持是一个特别的优势。</p>
<p>Prometheus 是为可靠性而设计的，它是您在停机期间使用的系统，允许您快速诊断问题。每台Prometheus 服务器都是独立的，不依赖于网络存储或其他远程服务。当您的基础设施的其他部分被破坏时，您可以依赖它，并且您不需要设置广泛的基础设施来使用它。</p>
<h1 id="Prometheus-不适合做什么"><a href="#Prometheus-不适合做什么" class="headerlink" title="Prometheus 不适合做什么"></a>Prometheus 不适合做什么</h1><p>Prometheus 的值是很可靠的。您总是可以查看有关系统的统计信息，即使在出现故障的情况下也是如此。如果您需要100%的准确性，例如按请求计费，Prometheus不是一个好的选择，因为收集的数据可能不够详细和完整。在这种情况下，最好使用其他系统来收集和分析用于计费的数据，并使用 Prometheus 来完成剩下的监视工作。</p>
<p>并且 Prometheus 并不适合监控字符串类的监控指标。</p>
<p>关于日志类的监控，请使用其他日志系统，比如 Grafana 的 Loki ，可以在 Grafana 中进行展示。Loki 目前还在测试阶段，可以进行尝试，请在稳定后再用于生产系统。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>notes</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus 安装</title>
    <url>/Prometheus/notes/prometheus-install.html</url>
    <content><![CDATA[<p>Prometheus是一个监控平台，它通过抓取这些目标主机上采集器暴露的指标来展示监控数据。本文介绍如何安装、配置和监控 Prometheus。你需要下载安装 Prometheus 并且安装 Exporter，这些工具采集了主机和对应服务的时间序列数据。我们的第一个 Exporter 是 Prometheus 本身，它提供了关于内存使用、垃圾收集等各种各样的主机级指标。</p>
<a id="more"></a>
<h1 id="下载-Prometheus"><a href="#下载-Prometheus" class="headerlink" title="下载 Prometheus"></a>下载 Prometheus</h1><p>首先下载最新版本的 Prometheus 然后解压，下载地址如下：</p>
<p><a href="https://prometheus.io/download" target="_blank" rel="noopener">https://prometheus.io/download</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar xvfz prometheus-*.tar.gz</span><br><span class="line">cd prometheus-*</span><br></pre></td></tr></table></figure>

<p>Prometheus 服务是一个名为 Prometheus( 或Windows系统上的 prometheus.exe)的二进制文件。我们可以运行二进制文件，并通过<code>--help</code> 参数选项来查看帮助，如下所示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./prometheus --help</span><br><span class="line">usage: prometheus [&lt;flags&gt;]</span><br><span class="line"></span><br><span class="line">The Prometheus monitoring server</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help                     Show context-sensitive help (also try --help-long and --help-man).</span><br><span class="line">      --version                  Show application version.</span><br><span class="line">      --config.file=&quot;prometheus.yml&quot;</span><br><span class="line">                                 Prometheus configuration file path.</span><br><span class="line">      --web.listen-address=&quot;0.0.0.0:9090&quot;</span><br><span class="line">                                 Address to listen on for UI, API, and telemetry.</span><br><span class="line">      --web.read-timeout=5m      Maximum duration before timing out read of the request, and closing idle connections.</span><br><span class="line">      --web.max-connections=512  Maximum number of simultaneous connections.</span><br><span class="line">      --web.external-url=&lt;URL&gt;   The URL under which Prometheus is externally reachable (for example, if Prometheus is served via a reverse</span><br><span class="line">                                 proxy). Used for generating relative and absolute links back to Prometheus itself. If the URL has a path</span><br><span class="line">                                 portion, it will be used to prefix all HTTP endpoints served by Prometheus. If omitted, relevant URL</span><br><span class="line">                                 components will be derived automatically.</span><br><span class="line">      --web.route-prefix=&lt;path&gt;  Prefix for the internal routes of web endpoints. Defaults to path of --web.external-url.</span><br><span class="line">      --web.user-assets=&lt;path&gt;   Path to static asset directory, available at /user.</span><br><span class="line">      --web.enable-lifecycle     Enable shutdown and reload via HTTP request.</span><br><span class="line">      --web.enable-admin-api     Enable API endpoints for admin control actions.</span><br><span class="line">      --web.console.templates=&quot;consoles&quot;</span><br><span class="line">                                 Path to the console template directory, available at /consoles.</span><br><span class="line">      --web.console.libraries=&quot;console_libraries&quot;</span><br><span class="line">                                 Path to the console library directory.</span><br><span class="line">      --web.page-title=&quot;Prometheus Time Series Collection and Processing Server&quot;</span><br><span class="line">                                 Document title of Prometheus instance.</span><br><span class="line">      --storage.tsdb.path=&quot;data/&quot;</span><br><span class="line">                                 Base path for metrics storage.</span><br><span class="line">      --storage.tsdb.retention=15d</span><br><span class="line">                                 How long to retain samples in storage.</span><br><span class="line">      --storage.tsdb.no-lockfile</span><br><span class="line">                                 Do not create lockfile in data directory.</span><br><span class="line">      --storage.remote.flush-deadline=&lt;duration&gt;</span><br><span class="line">                                 How long to wait flushing sample on shutdown or config reload.</span><br><span class="line">      --storage.remote.read-sample-limit=5e7</span><br><span class="line">                                 Maximum overall number of samples to return via the remote read interface, in a single query. 0 means no</span><br><span class="line">                                 limit.</span><br><span class="line">      --storage.remote.read-concurrent-limit=10</span><br><span class="line">                                 Maximum number of concurrent remote read calls. 0 means no limit.</span><br><span class="line">      --rules.alert.for-outage-tolerance=1h</span><br><span class="line">                                 Max time to tolerate prometheus outage for restoring &apos;for&apos; state of alert.</span><br><span class="line">      --rules.alert.for-grace-period=10m</span><br><span class="line">                                 Minimum duration between alert and restored &apos;for&apos; state. This is maintained only for alerts with configured</span><br><span class="line">                                 &apos;for&apos; time greater than grace period.</span><br><span class="line">      --rules.alert.resend-delay=1m</span><br><span class="line">                                 Minimum amount of time to wait before resending an alert to Alertmanager.</span><br><span class="line">      --alertmanager.notification-queue-capacity=10000</span><br><span class="line">                                 The capacity of the queue for pending Alertmanager notifications.</span><br><span class="line">      --alertmanager.timeout=10s</span><br><span class="line">                                 Timeout for sending alerts to Alertmanager.</span><br><span class="line">      --query.lookback-delta=5m  The delta difference allowed for retrieving metrics during expression evaluations.</span><br><span class="line">      --query.timeout=2m         Maximum time a query may take before being aborted.</span><br><span class="line">      --query.max-concurrency=20</span><br><span class="line">                                 Maximum number of queries executed concurrently.</span><br><span class="line">      --query.max-samples=50000000</span><br><span class="line">                                 Maximum number of samples a single query can load into memory. Note that queries will fail if they would</span><br><span class="line">                                 load more samples than this into memory, so this also limits the number of samples a query can return.</span><br><span class="line">      --log.level=info           Only log messages with the given severity or above. One of: [debug, info, warn, error]</span><br><span class="line">      --log.format=logfmt        Output format of log messages. One of: [logfmt, json]</span><br></pre></td></tr></table></figure>

<h1 id="配置-Prometheus"><a href="#配置-Prometheus" class="headerlink" title="配置 Prometheus"></a>配置 Prometheus</h1><p>Prometheus 的配置采用了 YAML 语法描述，Prometheus 下载好以后会有一个示例配置文件，文件名叫 <code>prometheus.yml</code> ，可以先配置这个文件。</p>
<p>将示例配置文件删除注释和一些高级配置以后，剩下的最基本、最少的配置项如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global:</span><br><span class="line">  scrape_interval:     15s</span><br><span class="line">  evaluation_interval: 15s</span><br><span class="line"></span><br><span class="line">rule_files:</span><br><span class="line">  # - &quot;first.rules&quot;</span><br><span class="line">  # - &quot;second.rules&quot;</span><br><span class="line"></span><br><span class="line">scrape_configs:</span><br><span class="line">  - job_name: prometheus</span><br><span class="line">    static_configs:</span><br><span class="line">      - targets: [&apos;localhost:9090&apos;]</span><br></pre></td></tr></table></figure>

<p>在示例配置文件中有三个配置块：global、rule_files、scrape_configs 。</p>
<p><code>global</code> 块控制 Prometheus 服务的全局配置，有两个选项。<code>scrape_interval</code> 控制Prometheus 采集数据的频率。你可以为某些指标数据覆盖此选项。默认情况下，全局设置是每15秒采集一次。<code>evaluation_interval</code>选项控制 Prometheus 评估规则的频率。Prometheus 使用规则创建新的时间序列并生成警报。</p>
<p><code>rule_files</code> 用来指定我们需要加载的规则的配置文件路径，这个配置文件也是 YAML 语法。当前没有配置规则，这部分注释掉不生效。</p>
<p><code>scrape_configs</code> 控制 Prometheus 监听的资源。由于 Prometheus 还将自己的数据作通过 HTTP 公开出来，因此它可以收集和监控自己的健康状况。在默认配置中有一个名为prometheus 的 job，它抓取 prometheus 服务公开的时间序列数据。该 Job 包含一个静态配置的目标，一般是本地主机的 9090 端口。 Prometheus 希望 Metric 能够在 <code>/metric</code> 的路径上可用。所以默认的 job 可以通过如下 RUEL 来采集，<a href="http://localhost:9090/metrics" target="_blank" rel="noopener">http://localhost:9090/metrics</a> .</p>
<p>返回的时间序列数据详细描述了 Prometheus 服务的状态和性能。</p>
<p>对于完整的配置文件，可以查看<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/" target="_blank" rel="noopener">官网的文档</a> ， 后续我也会整理出来。</p>
<h1 id="启动-Prometheus"><a href="#启动-Prometheus" class="headerlink" title="启动 Prometheus"></a>启动 Prometheus</h1><p>使用刚才修改好的配置文件来启动 Prometheus，切换到 Prometheus 二进制文件的目录下，执行如下命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./prometheus --config.file=prometheus.yml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当二进制文件和配置文件在同一个目录的时候可以直接使用上述命令。如果不在同一个目录，请指定配置文件的绝对路径。</p>
</blockquote>
<p>这样 Prometheus 就会启动起来。你可以使用浏览器访问 <a href="http://localhost:9090" target="_blank" rel="noopener">http://localhost:9090</a> 地址可以看到关于它自身的状态页面，Prometheus 在启动 30 秒以后在页面就可以看到数据了。</p>
<p>你也可以通过访问 <a href="http://localhost:9090/metrics，来验证" target="_blank" rel="noopener">http://localhost:9090/metrics，来验证</a> Prometheus 是否在暴露自己的指标。</p>
<h1 id="使用浏览器查看"><a href="#使用浏览器查看" class="headerlink" title="使用浏览器查看"></a>使用浏览器查看</h1><p>我们来看一下 Prometheus 收集的一些关于自己的数据。访问 <a href="http://localhost:9090/graph，并在" target="_blank" rel="noopener">http://localhost:9090/graph，并在</a> “graph” 选项卡中选择 “Console” 视图。</p>
<p>将 <code>promhttp_metric_handler_requests_total</code> (Prometheus 提供的一个Metric 名称) 输入到控制台，这将返回许多不同的时间序列(以及为每个时间序列记录的最新值)，所有这些时间序列的 Metric 名称都是 promhttp_metric_handler_requests_total，但是具有不同的 label 。这些 label 指定不同的请求状态。</p>
<p>如果想看 HTTP 请求返回码 200 的数据，可以使用下面这条语句:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">promhttp_metric_handler_requests_total&#123;code=&quot;200&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>如果要计算返回的时间序列的数量，可以使用 count 来查询，后边会写到函数相关的内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">count(promhttp_metric_handler_requests_total)</span><br></pre></td></tr></table></figure>

<h1 id="推荐目录结构"><a href="#推荐目录结构" class="headerlink" title="推荐目录结构"></a>推荐目录结构</h1><p>新安装的 Prometheus 建议使用如下目录结构进行调整。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── conf</span><br><span class="line">│   └── prometheus.yml</span><br><span class="line">├── current -&gt; deploy/prometheus-2.8.1.linux-amd64</span><br><span class="line">├── data</span><br><span class="line">├── deploy</span><br><span class="line">│   └── prometheus-2.8.1.linux-amd64</span><br><span class="line">│       ├── LICENSE</span><br><span class="line">│       ├── NOTICE</span><br><span class="line">│       ├── console_libraries</span><br><span class="line">│       ├── consoles</span><br><span class="line">│       ├── prometheus</span><br><span class="line">│       ├── prometheus.yml</span><br><span class="line">│       └── promtool</span><br><span class="line">├── logs</span><br><span class="line">│   └── prometheus.log</span><br><span class="line">├── run</span><br><span class="line">│   └── prometheus.pid</span><br><span class="line">└── scripts</span><br><span class="line">    └── run.sh</span><br></pre></td></tr></table></figure>

<p><code>conf</code> 目录用来存储 Prometheus 的配置文件，启动的时候指定配置文件。</p>
<p><code>current</code> 该目录软连接到二进制文件所在的目录</p>
<p><code>data</code> Prometheus 数据库的数据存储位置，</p>
<p><code>deploy</code> 放置 Prometheus 的二进制文件，方便 current 进行软连接</p>
<p><code>logs</code> 存放日志。如果普通用户启动，建议日志放置在这个目录。如果 root 用户启动，日志可以放在这个目录，也可以放在 /var/log/messages </p>
<p><code>scripts</code> 放置启动脚本。如果普通用户启动 ，放置启动进程的脚本。如果 root 用户启动，可以放置脚本到该目录，或者写成系统服务。</p>
<p>使用该目录结构可以方便的进行备份、迁移、升级、维护。</p>
<p>提供一个启动脚本 start.sh 的参考模板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PATH=/opt/prometheus</span><br><span class="line">LOG=$BASEPATH/logs</span><br><span class="line">nohup $PATH/current/prometheus --config.file=$PATH/conf/prometheus.yml --web.listen-address=:9090 --storage.tsdb.path=$PATH/data/  --storage.tsdb.retention=30d &gt;&gt; $LOG/prometheus.log  2&gt;&amp;1 &amp; echo $! &gt; $PATH/run/prometheus.pid</span><br></pre></td></tr></table></figure>

<p>该脚本做了如下内容</p>
<ul>
<li>指定配置文件</li>
<li>指定数据暴露的端口</li>
<li>指定数据文件存储的路径</li>
<li>指定数据文件存储的时间（轮询时间）</li>
<li>指定日志的存储位置（nohup 输出作为日志）</li>
<li>生成 PID 文件</li>
</ul>
<p>CentOS 7 启动脚本可以使用如下模板，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Prometheus Node Exporter</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/opt/prometheus/current/prometheus --config.file=/opt/prometheus/conf/prometheus.yml --web.listen-address=:9090 --storage.tsdb.path=/opt/prometheus/data/  --storage.tsdb.retention=30d</span><br><span class="line">User=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 root 用户启动</li>
<li>日志会存储在 /var/log/messages</li>
<li>指定配置文件</li>
<li>指定数据暴露的端口</li>
<li>指定数据文件存储的路径</li>
<li>指定数据文件存储的时间（轮询时间）</li>
</ul>
<p>大家根据自己需求取用、修改。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>notes</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>工程师的显示器怎么选</title>
    <url>/article/two-monitors-or-one-ultrawide.html</url>
    <content><![CDATA[<p>作为计算机工程师，我们想用各种方法来提高我们的生产力，今天我们来看看显示器对生产力的影响。小尺寸的显示器，用户同时打开很多窗口不能全部展示，在窗口之间切换很费时。</p>
<a id="more"></a>

<p>显然，我不是第一个想到这一点的人。NEC的研究人员得出了这样的结论:</p>
<ul>
<li>宽屏显示器的效率相当于两台显示器的总和；</li>
<li>与19英寸显示器相比，22英寸显示器的性能提高了30%；</li>
<li>与22英寸显示器相比，26英寸显示器的性能提高了20%；</li>
<li>然而，与26英寸的“冠军”相比，使用30英寸显示器时的性能有所下降；</li>
<li>然而，使用30英寸的显示器仍然比使用19英寸的显示器更有效率。</li>
</ul>
<p>戴尔公司声称，如果同时使用两台显示器，而且这两台显示器都被直接分配到工作任务中，而不是在划水看视频，那么员工的工作效率最高可提高30%。当然，这些说法可能有些偏颇。</p>
<p>密歇根大学(University of Michigan)心理学教授戴维•迈耶(David Meyer)认为，与专注于一台显示器相比，同时使用多台显示器会对工作效率产生负面影响。人们的注意力被分散，他们的工作流程不停的被打断。</p>
<p>开发者科里•豪斯写道:“人们一次只能专注于一件事。那么，为什么我们要花钱同时展示几样东西呢?如果为了看一眼我的电子邮件或社交网络而花费他们所有的时间。这不仅没有必要，而且会适得其反。一个显示器意味着我的工作，而且只有我的工作显示在前面和中央。分心的事物总是在视线之外，因此也就不必担心分心了。”</p>
<p>每个人都有自己的观点，所以 Keen Ethics 决定进行自己的实验。</p>
<p>实验选择了三个人:第一个人使用了一个24英寸的显示器，第二个参与者使用一个25英寸的显示器，长径比为21:9，第三个参与者使用了两个24英寸的显示器。这项研究持续了三个星期。每个星期，参与者交换他们的显示器，并在周五使用他们过去四天一直使用的显示器执行相同的任务。</p>
<p>实验表明，与使用单一显示器的参与者相比，使用两台显示器执行任务的参与者花的时间更少。这可以解释为，在一个监视器上打开任务的程序，在另一个监视器上打开任务本身和搜索引擎，员工在选项卡之间切换、查看任务等方面花费的时间更少。在一台显示器上平均工作10分钟，一个人在选项卡之间切换大约10 - 15次，而在两台显示器上，这个数字几乎下降了两倍。此外，参与者报告说，切换窗口会降低注意力。</p>
<p>关于健康方面，当你使用两台显示器时，你必须更频繁地转头。使用两台显示器工作时，与使用一台显示器相比，使用者的颈部转动幅度最高可达10°。因此，一个24英寸的显示器和一个25英寸的显示器在颈部运动上的差异也存在，但并不显著。因此，当工作在两个显示器可能需要按摩或体育锻炼以减少颈部疲劳。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>两个显示器：</p>
<ul>
<li>更大的生产力</li>
</ul>
<p>一个宽屏显示器：</p>
<ul>
<li>更加健康</li>
<li>更少的花费（比两个显示器价格少一些）</li>
<li>工作场所需要的空间更少</li>
</ul>
<p>从我个人的感觉来说，两个显示器确实比一个显示器效率更高。</p>
<p>但是一个带鱼显示器（21：9）比两个显示器更舒适。</p>
<p>我觉得单个显示器的时候，24 寸到 27 寸是最合适，</p>
<p>两个显示器的时候，23~24 寸最合适</p>
<p>一个带鱼显示器（21：9）的 30~35 寸是最合适的。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>article</category>
      </categories>
      <tags>
        <tag>monitor</tag>
        <tag>ultrawide</tag>
      </tags>
  </entry>
  <entry>
    <title>第19周分享</title>
    <url>/weekly/weekly19.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><h2 id="1-RHEL-8-发布"><a href="#1-RHEL-8-发布" class="headerlink" title="1. RHEL 8 发布"></a>1. <a href="https://developers.redhat.com/blog/2019/05/07/red-hat-enterprise-linux-8-now-generally-available/" target="_blank" rel="noopener">RHEL 8 发布</a></h2><p>在 RHEL 7 系列发布将近5年之后，RHEL 8 在这个月发布了。</p>
<p>Red Hat表示：“RHEL 8 是为混合云时代重新设计的操作系统，旨在支持从企业数据中心到多个公共云的工作负载和运作。从Linux容器、混合云到DevOps、人工智能，RHEL 8 不仅在混合云中支持企业IT，还可以帮助这些新技术战略蓬勃发展。”</p>
<p>RHEL 8 为混合云时代的到来引入了大量新功能，包括用于配置、管理、修复和配置 RHEL 8 的 Red Hat Smart Management 扩展程序，以及包含快速迁移框架、编程语言额和诸多开发者工具在内的 Application Streams。</p>
<p>在安全方面，RHEL 8 内置了对 OpenSSL 1.1.1 和 TLS 1.3 加密标准的支持。它还为 Red Hat 容器工具包提供全面支持，用于创建，运行和共享容器化应用程序，改进对 ARM 和 POWER 架构的支持，SAP 解决方案和实时应用程序，以及对 Red Hat 混合云基础架构的支持。</p>
<p>RHEL 8  下载地址： <a href="http://developers.redhat.com/rhel8" target="_blank" rel="noopener">http://developers.redhat.com/rhel8</a> </p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-Windows-Terminal"><a href="#1-Windows-Terminal" class="headerlink" title="1. Windows Terminal"></a>1. <a href="https://github.com/microsoft/Terminal" target="_blank" rel="noopener">Windows Terminal</a></h2><p>Windows Terminal是微软推出的新的命令行应用程序，提供多标签、分割窗口、快捷键、完整的Unicode字符支持等功能。</p>
<p>最重要的是，它支持PowerShell，Cmd，WSL（Windows的Linux子系统）和SSH等命令行程序，可以说是全平台制霸，简化开发者的工作流程。</p>
<p>而且，颜值即正义！微软还给Windows Terminal加入很多细节功能，让它更美观。</p>
<p>Windows Terminal使用的是基于DirectWrite/DirectX的GPU加速文本渲染引擎。</p>
<p>这个新的引擎支持显示PC中存在的文本字符，意味着终端里的汉字、日文不再乱码，而且还能玩emoji表情。</p>
<p>在微软展示的Demo中，你可以为自己的shell程序通过测试加入emoji表情提示。</p>
<p>此外，微软还为它增加了一种新的等宽字，以增强现代外观和感觉。这种字体不仅包括编程连字，而且它也是开源的，并有自己的repo。微软表示，将来会开放下载。</p>
<h2 id="2-shields"><a href="#2-shields" class="headerlink" title="2. shields"></a>2. <a href="https://shields.io" target="_blank" rel="noopener">shields</a></h2><p>一个徽章工具，用在很多 Github 的开源项目里，但是不仅仅能用在 Github，可以用在任何你想使用的地方。这篇文章对 shields 有一个基本的介绍。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>Erdong Notes</title>
    <url>/article/erdong-notes.html</url>
    <content><![CDATA[<p>这里记录我的一些学习笔记和一些发布在其他地方的文章。</p>
<a id="more"></a>


<h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><h2 id="ACP-Notes"><a href="#ACP-Notes" class="headerlink" title="ACP Notes"></a>ACP Notes</h2><ul>
<li><a href="https://github.com/erdong/acp-notes" target="_blank" rel="noopener">Github</a></li>
<li><a href="http://erdong.site/acp-notes/">Gitbook</a></li>
</ul>
<h2 id="Ansible-Notes"><a href="#Ansible-Notes" class="headerlink" title="Ansible Notes"></a>Ansible Notes</h2><ul>
<li><a href="https://github.com/erdong/ansible-notes" target="_blank" rel="noopener">Github</a></li>
<li><a href="http://erdong.site/ansible-notes/">Gitbook</a></li>
</ul>
<h2 id="Prometheus-Notes"><a href="#Prometheus-Notes" class="headerlink" title="Prometheus Notes"></a>Prometheus Notes</h2><ul>
<li><a href="https://github.com/erdong/prometheus-notes" target="_blank" rel="noopener">Github</a></li>
<li><a href="http://erdong.site/prometheus-notes/">Gitbook</a></li>
</ul>
<h1 id="Article"><a href="#Article" class="headerlink" title="Article"></a>Article</h1><h2 id="CCF-TF-讲稿整理"><a href="#CCF-TF-讲稿整理" class="headerlink" title="CCF TF 讲稿整理"></a>CCF TF 讲稿整理</h2><p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>article</category>
      </categories>
      <tags>
        <tag>article</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>第18周分享</title>
    <url>/weekly/weekly18.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-github-rank"><a href="#1-github-rank" class="headerlink" title="1. github-rank"></a>1. <a href="https://github.com/jaywcjlove/github-rank" target="_blank" rel="noopener">github-rank</a></h2><p>Github 仓库、用户排名。</p>
<p>比如 <a href="https://github.com/jaywcjlove/github-rank" target="_blank" rel="noopener">Github China User Ranking</a></p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-Open-source-jobs"><a href="#1-Open-source-jobs" class="headerlink" title="1. Open source jobs"></a>1. <a href="https://oo.t9t.io/jobs" target="_blank" rel="noopener">Open source jobs</a></h2><p>该网站收集了一份提供工作机会的开源项目列表，网站 slogan 是 “Working on open source and get paid” ，这个网站本身也是开源的: <a href="https://github.com/t9tio/open-source-jobs" target="_blank" rel="noopener">https://github.com/t9tio/open-source-jobs</a> 。</p>
<h2 id="2-外文期刊检索与下载"><a href="#2-外文期刊检索与下载" class="headerlink" title="2. 外文期刊检索与下载"></a>2. <a href="http://www.6453.net/" target="_blank" rel="noopener">外文期刊检索与下载</a></h2><p>偶然发现的一个外文期刊检索与下载的网站，里面集合了很多可以下载外文期刊的链接。</p>
<p>还有一个相似的网站 ：  <a href="http://www.4243.net/" target="_blank" rel="noopener">http://www.4243.net/</a> 。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第17周分享</title>
    <url>/weekly/weekly17.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="1-上海交通大学课程分享"><a href="#1-上海交通大学课程分享" class="headerlink" title="1. 上海交通大学课程分享"></a>1. <a href="https://github.com/CoolPhilChen/SJTU-Courses" target="_blank" rel="noopener">上海交通大学课程分享</a></h2><p>上海交通大学的课程分享。目前主要以计算机相关课程为主。</p>
<h2 id="2-浙江大学课程攻略共享计划"><a href="#2-浙江大学课程攻略共享计划" class="headerlink" title="2. 浙江大学课程攻略共享计划"></a>2. <a href="https://github.com/QSCTech/zju-icicles" target="_blank" rel="noopener">浙江大学课程攻略共享计划</a></h2><p>浙江大学课程共享，目前主要以计算机为主，也有英语、马克思、物理、化学等课程。</p>
<h2 id="3-传承-amp-交大"><a href="#3-传承-amp-交大" class="headerlink" title="3. 传承&amp;交大"></a>3. <a href="http://share.sjtu.edu.cn" target="_blank" rel="noopener">传承&amp;交大</a></h2><p>上海交大传承团队出品的课程，可以找到很多上海交大的课程资料。</p>
<h2 id="4-广东工业大学计算机学院课程"><a href="#4-广东工业大学计算机学院课程" class="headerlink" title="4. 广东工业大学计算机学院课程"></a>4. <a href="https://github.com/brenner8023/gdut-course" target="_blank" rel="noopener">广东工业大学计算机学院课程</a></h2><p>该仓库收集该校从大一到大四各门课程的资料。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.8.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-8-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.8.0" target="_blank" rel="noopener">2.8.0</a> 现在(2019.03.18)已经发布，在上个月的 <a href="http://erdong.site/Prometheus/New-Features/New-Features-in-Prometheus-2-7-0.html">2.7.0</a> 之后又进行了一些修正和改进。</p>
<a id="more"></a>

<p>这个版本中最大的变化是远程写现在通过 WAL 工作，使它更加可靠，资源使用更加可预测。另一个改进是TSDB现在支持压缩重叠块，将来的特性将使用这些重叠块来支持批量导入。</p>
<p>需要注意的一件事是，如果您指定了–storage.tsdb.retention。那么默认的时间保留将不适用。您还可以指定时间保留，在这种情况下两者都适用。</p>
<p>还有其他一些小的改进，包括PromQL 多对多匹配出现错误时显示违规的标签，重新加载配置对警报的影响已经减少，现在表达式浏览器度量自动完成有10k的限制，以避免包含标签的度量名称过多，导致浏览器退出。</p>
<p>还有许多改进、bug修复和其他更改，可以查看 <a href="https://github.com/prometheus/prometheus/releases/tag/v2.8.0" target="_blank" rel="noopener">release notes</a> 来获取更多的信息。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-8-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-8-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.9.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-9-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.9.0" target="_blank" rel="noopener">2.9.0</a> 现在(2019.04.15)已经发布，在上个月的 <a href="http://erdong.site/Prometheus/New-Features/New-Features-in-Prometheus-2-8-0.html">2.8.0</a> 之后又进行了一些修正和改进。</p>
<a id="more"></a>


<p>在 2.8.0 中引入的从 WAL 远程写读取时缺少时间序列的问题已经解决。这还应该修复启动时的 “unknown series references” 警告。为了让问题消失，需要一个干净的WAL(或等待所有的时间序列粗制滥造)。节省了远程写的内存使用，降低了片状目标对CPU的影响，并且对于连续第三个版本，针对 TSDB 中的索引也有了改进。</p>
<p>有一个 <code>honor_timestamp</code> 选项来处理异常目标产生的不必要和有问题的时间戳。TLS 证书现在从磁盘自动重新加载，现在 scrapes 交错跨 Prometheus 服务间(以前它们只交错在 Prometheus 服务中)。在服务发现中，OpenStack 和 Kubernetes 有更多的元数据，Consul 现在支持更多的 tags 如果你使用 tag ( 现在是 tags )配置字段来提高性能，。</p>
<p>还有其他一些小的改进，包括可读性稍强的日志输出、状态页包含更多信息以及其他端点通过POST工作。</p>
<p>还有许多改进、bug修复和其他更改，可以查看 <a href="https://github.com/prometheus/prometheus/releases/tag/v2.9.0" target="_blank" rel="noopener">release notes</a> 来获取更多的信息。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-7-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-7-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>第16周分享</title>
    <url>/weekly/weekly16.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-snip"><a href="#1-snip" class="headerlink" title="1. snip"></a>1. <a href="https://mathpix.com" target="_blank" rel="noopener">snip</a></h2><p>Mathpix 出品的 Snip 是一个免费的的工具，可用把各种公式转换成 LaTeX。除了印刷的公式，手写公式也能识别转换，但是要求字迹工整。除了公式，化学方程式和矩阵也能识别，支持 Mac、Windows、Ubuntu。</p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-wallpaperwide"><a href="#1-wallpaperwide" class="headerlink" title="1. wallpaperwide"></a>1. <a href="http://wallpaperswide.com" target="_blank" rel="noopener">wallpaperwide</a></h2><p>一个高清壁纸网站，分类比较齐全。</p>
<ol start="2">
<li><a href="https://interfacelift.com/wallpaper/downloads/date/any/" target="_blank" rel="noopener">InterfaceLIFT</a></li>
</ol>
<p>一个高清壁纸网站，有各种高分辨率的图片，还可以针对部分设备型号进行下载。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第15周分享</title>
    <url>/weekly/weekly15.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><h2 id="1-Developer-Survey-Results-2019"><a href="#1-Developer-Survey-Results-2019" class="headerlink" title="1. Developer Survey Results 2019"></a>1. <a href="https://insights.stackoverflow.com/survey/2019" target="_blank" rel="noopener">Developer Survey Results 2019</a></h2><p>Stack Overflow 发布了 Developer Survey Results 2019 报告，今年，有将近 90000 名开发者在 Stack Overflow 上提交了他们的反馈。</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-Aroma"><a href="#1-Aroma" class="headerlink" title="1. Aroma"></a>1. <a href="http://www.eeworld.com.cn/mp/QbitAI/a64179.jspx" target="_blank" rel="noopener">Aroma</a></h2><p>Facebook 在其官方博客上宣布，推出面向程序员的工具Aroma。它能帮助程序员轻松地找到可以“参考使用”的代码，节省他们日常开发工作流程中的时间和精力。</p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-Serverless-FaaS-的现状和未来"><a href="#1-Serverless-FaaS-的现状和未来" class="headerlink" title="1. Serverless/FaaS 的现状和未来"></a>1. <a href="http://jolestar.com/serverless-faas-current-status-and-future/" target="_blank" rel="noopener">Serverless/FaaS 的现状和未来</a></h2><p>这篇文章 Serverless 和 FaaS 说的还比较明白。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第14周分享</title>
    <url>/weekly/weekly14.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>


<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="1-tensorflow-internals"><a href="#1-tensorflow-internals" class="headerlink" title="1. tensorflow-internals"></a>1. <a href="https://github.com/horance-liu/tensorflow-internals" target="_blank" rel="noopener">tensorflow-internals</a></h2><p>一个程序员父亲对女儿的爱</p>
<p>书在内容上并没有涉及到如何使用TensorFlow构建机器学习模型，也不涉及应用TensorFlow最佳实践，它是通过剖析源码的方式，向读者揭示 TensorFlow 的系统架构、领域模型、工作原理、及其实现模式等相关内容，虽然不适合完全零基础的人，但是也相对友好。</p>
<p>试想，人家的女儿已经默认掌握了机器学习相关基本概念与理论，并且熟悉Python、C++等程序设计语言……</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-LayAuto"><a href="#1-LayAuto" class="headerlink" title="1. LayAuto"></a>1. <a href="https://sspai.com/post/4152" target="_blank" rel="noopener">LayAuto</a></h2><p>LayAuto 2.0 版本已经发布，作为一个窗口管理工具，它以解放双手的全自动化的桌面窗口整理和体贴的多分辨率显示器智能适配为卖点，从许多优秀 Mac 窗口管理工具的红海中杀出重围。文中介绍了 layauto 的新功能特点。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第13周分享</title>
    <url>/weekly/weekly13.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-Language-Design-in-the-Service-of-Software-Engineering"><a href="#1-Language-Design-in-the-Service-of-Software-Engineering" class="headerlink" title="1. Language Design in the Service of Software Engineering"></a>1. <a href="https://talks.golang.org/2012/splash.article" target="_blank" rel="noopener">Language Design in the Service of Software Engineering</a></h2><p>2012 年的老文章，Rob 伯伯讲述 Go 很多设计的初衷是什么。凡事必有因，了解背后的故事更有利于理解事物本身。</p>
<h2 id="2-Redox"><a href="#2-Redox" class="headerlink" title="2. Redox"></a>2. <a href="https://www.redox-os.org/" target="_blank" rel="noopener">Redox</a></h2><p>Redox是一个用Rust语言编写的类UNIX操作系统 , 它的目标是把Rust语言的创新带入到一个现代的微内核和全系列的应用程序。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第12周分享</title>
    <url>/weekly/weekly12.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-Aetos"><a href="#1-Aetos" class="headerlink" title="1. Aetos"></a>1. <a href="https://github.com/project-aetos/Aetos" target="_blank" rel="noopener">Aetos</a></h2><p>Aetos is a mobile application for monitoring the health &amp; performance of GKE Kubernetes clusters.</p>
<p>上边是官方的介绍，虽然官方定义为 K8s 的监控，应该可以把 Grafana 里的 Prometheus 数据进行展示，目前只有 iOS 版本。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>第11周分享</title>
    <url>/weekly/weekly11.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-自学是门手艺"><a href="#1-自学是门手艺" class="headerlink" title="1. 自学是门手艺"></a>1. <a href="https://github.com/selfteaching/the-craft-of-selfteaching" target="_blank" rel="noopener">自学是门手艺</a></h2><p>自学能力，对每个个体来说，是在这个变化频率和变化幅度都在不断加大的时代里最具价值的能力。具备这个能力，不一定能直接增加一个人的幸福感（虽然实际上常常确实能），但，它一定会缓解甚至消除一个人的焦虑 —— 若是在一个以肉眼可见的方式变化着的环境里生存，却心知肚明自己已然原地踏步许久，自己正在被这个时代甩在身后，谁能不焦虑呢？</p>
<p>这本书或者能帮你很好的学习。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>weekly</tag>
      </tags>
  </entry>
  <entry>
    <title>微信公众号如何创建赞赏账户</title>
    <url>/article/wechat-appreciates.html</url>
    <content><![CDATA[<p>开始写微信公众号有一段时间了，经常看到别人的公众号内可以给作者赞赏。如果作者的文章可以收到赞赏也是对作者能力的一种认可。</p>
<p>翻了翻网站的帮助手册，以及搜索引擎的搜索结果。现在总结一下吧。</p>
<p>微信公众号平台可能会经常更新，所以现在基于的版本是2018年6月6号以后的赞赏功能。</p>
<a id="more"></a>

<h2 id="开通条件"><a href="#开通条件" class="headerlink" title="开通条件"></a>开通条件</h2><p>首先你需要有一个邀请你的公众号，这个公众号可以是你自己的，也可以是别人的，但是需要你关注这个公众号。对于赞赏账户来说，需要有一个公众号邀请你开通，你才能开通。而不是你开通了以后入驻某个公众号，有个先后顺序的问题。</p>
<p>那么微信公众号如何获得邀请资格呢？</p>
<p>在微信公众号官网上提到，从2018年6月6号起，公众号每以同一作者名发表3篇或3篇以上的原创文章，即可创建一个赞赏账户，用于赞赏收款。但是这个也是有数量限制的，同一公众号最多可以邀请开通3个赞赏账户。</p>
<p>需要注意两点，一是，需要先发3篇文章才能邀请，而且是需要标明原创的。二是一个公众号只能开通3个赞赏账户。</p>
<p>那么问题来了，如果公众号有很多作者，可不可以有多个赞赏账户收取赞赏？</p>
<p>答案是可以。同一赞赏账户，可在多个公众号中使用。对于已经创建的赞赏账户，公众号就不需要再次邀请了，这样就可以不占用三个邀请名额。</p>
<p>只要赞赏账号在他的微信小程序 “赞赏账户”的 “可收款公众号” 里添加这个公众号，公众号对文章声明原创时，输入已经开通赞赏账户的账户名，文章作者即可收取赞赏。</p>
<h2 id="如何开通"><a href="#如何开通" class="headerlink" title="如何开通"></a>如何开通</h2><p>开通赞赏账户有两个步骤，一是公众号满足邀请条件以后，邀请个人微信号。二是个人微信号收到邀请以后填写信息开通。</p>
<h3 id="首先是公众号邀请"><a href="#首先是公众号邀请" class="headerlink" title="首先是公众号邀请"></a>首先是公众号邀请</h3><p>满足条件的公众号，可以进入左侧 “功能” 大项，点击下边的 “赞赏功能” ，会进入赞赏页面，在赞赏页面的 “赞赏账户” 选项卡里会有邀请按钮，点击后即可邀请个人微信号开通赞赏账户 。</p>
<p>有如下接个地方需要注意</p>
<ul>
<li>被邀请者需要关注该公众号</li>
<li>填写被邀请者的个人微信号，填写微信绑定的手机或QQ无效</li>
<li>填写个人微信号以后，在当前版本需要点击右侧的搜索按钮（一个放大镜的图例）搜索被邀请者，搜索到后，点击选择被邀请这。</li>
<li>如果发出邀请24小时被邀请者未注册则释放名额，名额的消耗和释放会通过站内信通知。</li>
</ul>
<h3 id="其次是个人微信设置赞赏账户"><a href="#其次是个人微信设置赞赏账户" class="headerlink" title="其次是个人微信设置赞赏账户"></a>其次是个人微信设置赞赏账户</h3><p>公众号发送赞赏账户开通邀请后，个人微信会收到一个服务通知，通知里是开通账户的邀请，点击会进入一个微信小程序，在这个小程序里进行设置。</p>
<p>相关注意事项如下：</p>
<p>赞赏账户名：名称只允许含有中文、英文大小写，长度为4-30个字符（1个汉字等于2个字符），且不可与公众号名称重复。名称不得涉及侵权、违反法律法规以及平台运营规范的内容；<br>头像：可以拍摄一张照片或从手机相册选取图片作为头像；<br>简介：长度4-120个字符，不得涉及侵权、违反法律法规以及平台运营规范的内容；<br>性别：设置作者性别；<br>地区：填写作者地区；<br>实名信息：填写作者真实的姓名、身份证号码（实名信息不会对外展示），且需与当前操作的个人微信实名信息一致，提交后实名信息不支持修改，每个人（以身份证统计）只能开通一个赞赏账户。</p>
<p>经常遇到的一个问题是创建赞赏账户时提示“名称与已有公众号或作者重复，不能申请使用？”</p>
<p>原因是为了保护赞赏账户不被抢注，赞赏账户名称和公众号小程序共用一套名称体系，整个体系内名称唯一。此外，微信公众号对部分名人名称做了关键词保护，防止滥用。</p>
<p>在注册的过程中有一点需要注意，只有从邀请绑定的模板消息进入小程序才可以注册，从其他渠道打开小程序会提示无法注册，而且该小程序的所有页面无法分享。</p>
<h2 id="管理赞赏账户"><a href="#管理赞赏账户" class="headerlink" title="管理赞赏账户"></a>管理赞赏账户</h2><p>赞赏账户的作者信息可以修改，但是只能修改一次，实名信息无法修改。修改方法是，进入“赞赏账户”小程序，点击上方的作者名-“我的信息”，即可修改作者信息。</p>
<p>旧名字将会有7天保护期，在7天内可以撤销新名字，恢复原来名称。如果不选择恢复，7天后旧名称就会释放，其它人都可以注册这一名称。需要注意的是，撤销也会占用改名机会，撤销后也不能再进行名称修改。</p>
<p>如果这个账户要在多个公众号内收款，那么在“赞赏账户”小程序里，点击上方的作者名-“收款公众号”，可以添加或移除设置自己作为原创文章赞赏收款账户的公众号。</p>
<p>赞赏账户收款的设置是这样，作者可以设置赞赏的六个金额和一句引导语，引导语对全局生效，即每篇文章的赞赏都展示这条，修改引导语也会影响已发布的文章。赞赏支持回复读者，会以“微信公众平台”官方公众号的名义通过服务通知下发，而且每个赞赏只能回复一次。</p>
<h2 id="赞赏功能"><a href="#赞赏功能" class="headerlink" title="赞赏功能"></a>赞赏功能</h2><p>作者授权公众号后，公众号群发文章可以选择已授权的作者，文章若有勾选“赞赏”读者阅读文章时在底部会有“喜欢作者”选项，读者可以自愿赞赏作者，赞赏的资金平台会结算到开通作者的个人微信号，结算周期为 T+7。作者可以通过“赞赏账户”小程序查看赞赏明细。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>article</category>
      </categories>
      <tags>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 EXT4 使用无法挂载</title>
    <url>/linux/system/ext4-error-loading-journal.html</url>
    <content><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>使用新版本的操作系统自带的文件系统格式化工具进行分区格式化以后，在较低的操作系统版本上会有提示，提示如下：</p>
<a id="more"></a>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mount -t ext4 /dev/sdb1 /root/test</span><br><span class="line">mount: 文件系统类型错误、选项错误、/dev/sdb1 上有坏超级块、</span><br><span class="line">       缺少代码页或助手程序，或其他错误</span><br><span class="line"></span><br><span class="line">       有些情况下在 syslog 中可以找到一些有用信息- 请尝试</span><br><span class="line">       dmesg | tail  这样的命令看看。</span><br></pre></td></tr></table></figure>

<p>按照提示查看日志发现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mar 12 01:12:20 localhost kernel: JBD2: Unrecognised features on journal</span><br><span class="line">Mar 12 01:12:20 localhost kernel: EXT4-fs (sdb1): error loading journal</span><br></pre></td></tr></table></figure>

<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>造成上述问题的原因是在新的操作系统上使用系统自带的 mkfs.ext4 对文件系统进行了格式化，默认会使用一些新的的特性，这些新的特性在旧的系统上是无法使用的。</p>
<p>比如在 Ubuntu 18.04  上进行使用 mkfs.ext4 进行格式化的磁盘，在 CentOS 7.4 1708 上 是可以正常使用的，在 CentOS 7.0 1406 以及以下版本是就是提示上述错误。</p>
<p>Ubuntu 18.04 的 mkfs 版本是 1.44.1-1 ，CentOS 7.0 1406 的 mkfs 版本是 1.42.9-4。造成了这个差异。CentOS 7.4 1708 的 mkfs 版本是 1.42.9-10 ，Redhat 内部在小版本上新增了这个特性的支持。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>按照日志提示，Unrecognised features on journal  ， 不支持 journal 。</p>
<p>那么查看文件系统特性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#tune2fs -l /dev/sdb1</span><br><span class="line">Filesystem features: has_journal ext_attr resize_inode dir_index filetype extent 64bit flex_bg sparse_super large_file</span><br></pre></td></tr></table></figure>

<p>文件系统含有一个 has_journal 特性，删除这个特性，删除方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#tune2fs -O ^has_journal /dev/sdb1 // 去除has_journal选项</span><br><span class="line">#tune2fs -O has_journal /dev/sdb1 // add has_journal选项</span><br></pre></td></tr></table></figure>

<p>验证是否删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#tune2fs -l /dev/sdb1</span><br><span class="line">Filesystem features: ext_attr resize_inode dir_index filetype</span><br></pre></td></tr></table></figure>

<p>可以看到已经没有这个特性了，再次尝试挂载，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mount -t ext4 /dev/sdb1 /root/test</span><br><span class="line">[root@localhost ~]# cd test/</span><br><span class="line">[root@localhost test]# ls</span><br><span class="line">lost+found  test_dir  test_file.txt</span><br><span class="line">[root@localhost test]# cat test_file.txt</span><br><span class="line">kkdkdkdkkak</span><br><span class="line">kldkjfalkf</span><br><span class="line">kjfklaf</span><br><span class="line">kjafkdj</span><br><span class="line"></span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure>

<p>可以看到，已经可以正常挂载，挂载后的文件也可以正常显示。</p>
<h1 id="couldn’t-mount-RDWR"><a href="#couldn’t-mount-RDWR" class="headerlink" title="couldn’t mount RDWR"></a>couldn’t mount RDWR</h1><p>在上述的现象里，如果挂载 ext4 到 CentOS 6.5 等更老一些的系统的时候，也会提示部分不支持的特性，在日志里如果出现了如下提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kernel: EXT4-fs (sdb1): couldn&apos;t mount RDWR because of unsupported optional features (400)</span><br></pre></td></tr></table></figure>

<p>这种情况是因为mkfs.ext4的时候制定的参数，旧的内核不支持导致.</p>
<p>The ext4 feature (400) is the new metadata_csum feature. If this feature is enabled and old tools are used to mount the filesystem they will only be able to mount read-only.</p>
<p><a href="https://ext4.wiki.kernel.org/index.php/Ext4_Metadata_Checksums" target="_blank" rel="noopener">https://ext4.wiki.kernel.org/index.php/Ext4_Metadata_Checksums</a></p>
<p>解决办法一样，可以在创建的时候不使用该特性，或者删除该特性后再 CentOS 6.5 上使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tune2fs -O ^metadata_csum /dev/sdb1</span><br><span class="line">tune2fs 1.43.1 (08-Jun-2016)</span><br><span class="line"></span><br><span class="line">请在这个文件系统上运行 e2fsck.</span><br></pre></td></tr></table></figure>

<p>系统提示需要 运行 e2fsck 进行磁盘检查，那么按照要求进行检查, e2fsck 的参数请大家自己选择。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# e2fsck -f -a -v /dev/sdb1</span><br><span class="line"></span><br><span class="line">          13 inodes used (0.00%, out of 30531584)</span><br><span class="line">           0 non-contiguous files (0.0%)</span><br><span class="line">           0 non-contiguous directories (0.0%)</span><br><span class="line">             # of inodes with ind/dind/tind blocks: 0/0/0</span><br><span class="line">             Extent depth histogram: 4</span><br><span class="line">     1935198 blocks used (1.58%, out of 122096637)</span><br><span class="line">           0 bad blocks</span><br><span class="line">           1 large file</span><br><span class="line"></span><br><span class="line">           1 regular file</span><br><span class="line">           3 directories</span><br><span class="line">           0 character device files</span><br><span class="line">           0 block device files</span><br><span class="line">           0 fifos</span><br><span class="line">           0 links</span><br><span class="line">           0 symbolic links (0 fast symbolic links)</span><br><span class="line">           0 sockets</span><br><span class="line">------------</span><br><span class="line">           4 files</span><br></pre></td></tr></table></figure>

<p>检查完以后，就可以尝试移除这个特性了，期间会询问，请按照实际选择。移除以后挂载就正常了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tune2fs -O ^metadata_csum /dev/sdb1</span><br><span class="line">tune2fs 1.43.1 (08-Jun-2016)</span><br><span class="line">Disabling checksums could take some time.</span><br><span class="line">Proceed anyway (or wait 5 seconds) ? (y,n) y</span><br><span class="line">[root@localhost ~]# mount -t ext4 /dev/sdb1 /root/test</span><br><span class="line">[root@localhost ~]# cd test/</span><br><span class="line">[root@localhost test]# ls</span><br><span class="line">lost+found  test_dir  test_file.txt</span><br><span class="line">[root@localhost test]#</span><br></pre></td></tr></table></figure>

<h1 id="tune2fs-版本较低"><a href="#tune2fs-版本较低" class="headerlink" title="tune2fs 版本较低"></a>tune2fs 版本较低</h1><p>执行 tune2fs 如果遇到如下提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# tune2fs -O ^has_journal /dev/sdb1</span><br><span class="line">tune2fs 1.42.9 (28-Dec-2013)</span><br><span class="line">tune2fs: Filesystem has unsupported read-only feature(s) while trying to open /dev/sdb1</span><br><span class="line">Couldn&apos;t find valid filesystem superblock.</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure>

<p>那么说明 tune2fs 版本较低，不支持 has_journal 特性，需要升级到 1.43.1以上才可以。</p>
<p>在 CentOS 6.5 中， tune2fs 版本更低，是 1.41.12，也需要升级。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>如果确认是新旧版本的问题导致的无法挂载，那么上述方法就可以解决了。</p>
<p>如果不是新旧版本的问题，那么还有一种可能，就是磁盘坏了，在这种情况下可以使用下列命令尝试修复。</p>
<p>特别提示，磁盘修复请慎重选择。本文不保证数据安全性和完整性，只提供一个可供参考的选择。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# e2fsck -f -c -v /dev/sdb1</span><br><span class="line">e2fsck 1.42.9 (28-Dec-2013)</span><br><span class="line">/dev/sdb1 has unsupported feature(s): metadata_csum</span><br><span class="line">e2fsck: Get a newer version of e2fsck!</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure>

<p>该提示显示 e2fsck 工具不支持 新的特性，meadata_csum , 解决版本是 升级 e2fsck 工具的版本， e2fsck 工具由 e2fsprogs 和 e2fsprogs-libs 两个工具包来提供，升级这两个工具包的版本就可以，最少要升级到 1.43.1 版本以上才可以。</p>
<p>Ubuntu 可以参考如下链接进行解决。</p>
<blockquote>
<p><a href="https://askubuntu.com/questions/1053404/e2fsck-how-to-handle-the-metadata-csum-error-by-advancing-the-e2fsck-version?noredirect=1&amp;lq=1" target="_blank" rel="noopener">https://askubuntu.com/questions/1053404/e2fsck-how-to-handle-the-metadata-csum-error-by-advancing-the-e2fsck-version?noredirect=1&amp;lq=1</a></p>
</blockquote>
<p>关于 CentOS 可以去下列地址查找对应的 rpm 包来进行升级。</p>
<blockquote>
<p><a href="http://www.rpmfind.net/linux/RPM/index.html" target="_blank" rel="noopener">http://www.rpmfind.net/linux/RPM/index.html</a></p>
</blockquote>
<p>更推荐的方法是用源码进行编译。过程如下</p>
<h3 id="安装-GCC-编译器"><a href="#安装-GCC-编译器" class="headerlink" title="安装 GCC 编译器"></a>安装 GCC 编译器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc -y</span><br></pre></td></tr></table></figure>

<h3 id="下载源码包，"><a href="#下载源码包，" class="headerlink" title="下载源码包，"></a>下载源码包，</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://downloads.sourceforge.net/project/e2fsprogs/e2fsprogs/v1.43.1/e2fsprogs-1.43.1.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="解压安装包进行编译"><a href="#解压安装包进行编译" class="headerlink" title="解压安装包进行编译"></a>解压安装包进行编译</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxf e2fsprogs-1.43.1.tar.gz</span><br><span class="line">cd e2fsprogs-1.43.1</span><br><span class="line">./configure</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>此时已经编译好了，进入 e2fsck 文件夹就可以看到新编译的版本了，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@loaclhost ~]cd e2fsck</span><br><span class="line">[root@localhost ~]# e2fsck -V</span><br><span class="line">e2fsck 1.43.1 (08-Jun-2016)</span><br><span class="line">	Using EXT2FS Library version 1.43.1, 08-Jun-2016</span><br></pre></td></tr></table></figure>

<p>如果希望替换系统的 e2fsck 工具，那么执行 make install 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd e2fsprogs-1.43.1</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>出现上述问题的主要原因是，新版的操作系统默认支持了很多新的特性，这些新特性在旧版本的操作系统上是不支持的。<br>如果在磁盘使用前就已经知道了磁盘将要使用的操作系统，应该依据操作系统的差别，然后有意的关闭一些参数，使得新旧操作系统的磁盘是兼容的。</p>
<p>如果无法预知操作系统，那么在实际使用中遇到了问题，可以查找是哪个新的特性导致的该问题，尝试移除这个文件系统的特性，之后就可以正常使用了。但是贸然移除某个特性，可能会导致磁盘上的数据丢失，这个应该做过充分的调研确认以后再操作。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>system</category>
      </categories>
      <tags>
        <tag>ext4</tag>
      </tags>
  </entry>
  <entry>
    <title>第10周分享</title>
    <url>/weekly/weekly10.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>



<h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><h2 id="1-杨超越杯编程大赛"><a href="#1-杨超越杯编程大赛" class="headerlink" title="1. 杨超越杯编程大赛"></a>1. <a href="https://github.com/ccyyycy/ycy" target="_blank" rel="noopener">杨超越杯编程大赛</a></h2><p>杨超越的粉丝在 Github 上发起了一场编程比赛来应援，他们的介绍如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">YCY is the abbreviation of ChaoYue Yang , who is a famous star in China,and we are her fans.</span><br><span class="line"></span><br><span class="line">We are now organize a programming competition. All ideas are submitted on GitHub issues.</span><br><span class="line"></span><br><span class="line">We welcome all friends to visit our GitHub and attend this competition.</span><br></pre></td></tr></table></figure>

<p>这年头，没有两把刷子，追星都不好追。几天时间，这个项目已经 1500+ star 了。</p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-cloudycluster"><a href="#1-cloudycluster" class="headerlink" title="1. cloudycluster"></a>1. <a href="http://cloudycluster.com" target="_blank" rel="noopener">cloudycluster</a></h2><p>认识到越来越多的人需要使用高性能计算(HPC)资源，Omnibond 设计了 CloudyCluster 来减少时间并简化按需创建HPC环境所需的工作。CloudyCluster 允许任何人在 Amazon Web Services (AWS) 上为 HPC 任务快速设置和配置 HPC 环境。</p>
<h2 id="2-dev域名注册"><a href="#2-dev域名注册" class="headerlink" title="2. .dev域名注册"></a>2. <a href="https://get.dev" target="_blank" rel="noopener">.dev域名注册</a></h2><p>据悉，谷歌已经在2月19日开放公众早期访问阶段并允许普通用户进行注册，自美国时间2月19日8:00到2月28日7:59期间内注册.dev顶级域名，需要向谷歌缴纳不等的费用，美国时间2月28日之后，将免费开放注册。</p>
<p>　　关于.dev顶级域名，早在2015年的时候，谷歌就因为对这个域名的新权力在开发者当中引起了小小的公愤，因为许多公司都使用.dev域名进行内部测试网站。两年后，谷歌收购.dev，以及与Chrome和其他浏览器的整合导致许多这些测试页面完全拒绝打开。</p>
<p>　　当然，Google正在为开发人员调整.dev顶级域名，这可能是为了修复最初获取.dev名称造成的损害。值得一提的是，就像今年早些时候推出的.app顶级域名一样，HTTPS安全性也是默认开启的！那些有需要的朋友，现在就可以行动起来了。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
  </entry>
  <entry>
    <title>常见 DNS 地址</title>
    <url>/linux/system/dns-server-ip.html</url>
    <content><![CDATA[<p>如果您是程序员、系统管理员或任何类型的 IT 工作者，那么您可能有自己最喜欢的用于故障排除的 IP 地址。而且你可能已经用了好几年了。</p>
<p>这些 ip 可用于:</p>
<ul>
<li>ping 测试连接</li>
<li>使用 dig 或 nslookup 检查 DNS 解析</li>
<li>更新系统的永久DNS设置</li>
</ul>
<p>大多数DNS服务器允许您 ping 它们。</p>
<a id="more"></a>
<h1 id="Google-DNS-servers"><a href="#Google-DNS-servers" class="headerlink" title="Google DNS servers"></a>Google DNS servers</h1><p>如果在国外的话，那么最常用的可能是 Google 的 DNS 服务地址了。</p>
<p>Google 的地址如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8.8.8.8 </span><br><span class="line">8.8.4.4</span><br><span class="line"></span><br><span class="line">2001:4860:4860::8888</span><br><span class="line">2001:4860:4860::8844</span><br></pre></td></tr></table></figure>

<p>但是这两个地址没有启用任何过滤功能，</p>
<h1 id="OpenDNS"><a href="#OpenDNS" class="headerlink" title="OpenDNS"></a>OpenDNS</h1><p>OpenDNS是一个免费的域名解析服务提供商（DNS）。创建于2006年，长期以来致力于为广大个人用户以及商务企业用户和公共领域提供免费的域名解析服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">208.67.222.222 </span><br><span class="line">208.67.220.220</span><br></pre></td></tr></table></figure>

<p>另有两个为Family Shield Servers， 可以阻挡成人网站和含有恶意网站</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">208.67.222.123</span><br><span class="line">208.67.220.123</span><br></pre></td></tr></table></figure>

<h1 id="IBM-Quad9"><a href="#IBM-Quad9" class="headerlink" title="IBM Quad9"></a>IBM Quad9</h1><p>OpenDNS的服务器很棒，但我总是得去查。然后，几年前，出现了一组新的DNS服务器，它们不仅关注速度和功能，还关注内存。</p>
<p>第一个容易记住的过滤选项是IBM的Quad 9，它的IP地址为4个9:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9.9.9.9</span><br></pre></td></tr></table></figure>

<h1 id="CloudFlare-DNS"><a href="#CloudFlare-DNS" class="headerlink" title="CloudFlare DNS"></a>CloudFlare DNS</h1><p>CloudFlare 他们没有提供过滤功能，而是关注隐私。</p>
<blockquote>
<p>其他一些递归DNS服务可能声称它们的服务是安全的，因为它们支持DNSSEC。虽然这是一个很好的安全实践，但具有讽刺意味的是，这些服务的用户并没有受到DNS公司本身的保护。许多公司从DNS客户那里收集数据用于商业目的。另外，1.1.1.1不挖掘任何用户数据。为了调试目的，日志被保存24小时，然后清除它们。</p>
</blockquote>
<p>也许对我来说最酷的是他们的记忆评级，基本上是完美无缺的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.1.1.1 </span><br><span class="line">1.0.0.1</span><br><span class="line"></span><br><span class="line">2001:2001:: </span><br><span class="line">2001:2001:2001::</span><br></pre></td></tr></table></figure>

<p>所以他们不会过滤你的url，但他们会有意识地避免记录或跟踪你，这很好。</p>
<h1 id="Norton-ConnectSafe-DNS"><a href="#Norton-ConnectSafe-DNS" class="headerlink" title="Norton ConnectSafe DNS"></a>Norton ConnectSafe DNS</h1><p>诺顿还有一个公共 DNS 服务，它有一个有趣的特性，即多级URL内容过滤。</p>
<p>封锁恶意和欺诈网站</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">199.85.126.10 </span><br><span class="line">199.85.127.10</span><br></pre></td></tr></table></figure>

<p>阻止色情内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">199.85.126.20 </span><br><span class="line">199.85.127.20</span><br></pre></td></tr></table></figure>

<h1 id="阿里云-dns"><a href="#阿里云-dns" class="headerlink" title="阿里云 dns"></a>阿里云 dns</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">223.5.5.5 </span><br><span class="line">223.6.6.6</span><br></pre></td></tr></table></figure>

<h1 id="腾讯-dns"><a href="#腾讯-dns" class="headerlink" title="腾讯 dns"></a>腾讯 dns</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">119.29.29.29</span><br></pre></td></tr></table></figure>

<h1 id="百度-dns"><a href="#百度-dns" class="headerlink" title="百度 dns"></a>百度 dns</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">180.76.76.76  </span><br><span class="line">2400:da00::6666</span><br></pre></td></tr></table></figure>

<h1 id="我的建议"><a href="#我的建议" class="headerlink" title="我的建议"></a>我的建议</h1><p>对于上边提到的 DNS 地址，如果您关心隐私、速度和最大内存，可以尝试 CloudFlare:</p>
<p>如果你想要URL过滤，可以尝试 IBM 的 Quad9，因为它更容易记住，而且似乎专注于拥有多个威胁情报来源。</p>
<p>如果你想要多级URL过滤，你可以使用诺顿的产品，但我个人更喜欢用 IBM Quad9来完成。但我认为诺顿仍然是一个很酷的选择，就像保护整个学校或通过强迫他们的DNS通过最严格的选择。</p>
<p>在国内，选择 BAT 任意一家的 DNS ，性能应该都不错。</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="https://dns.iui.im" target="_blank" rel="noopener">https://dns.iui.im</a></li>
<li><a href="http://alidns.com" target="_blank" rel="noopener">http://alidns.com</a></li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>system</category>
      </categories>
      <tags>
        <tag>DNS</tag>
      </tags>
  </entry>
  <entry>
    <title>第09周分享</title>
    <url>/weekly/weekly09.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-arthas"><a href="#1-arthas" class="headerlink" title="1. arthas"></a>1. <a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">arthas</a></h2><p>Arthas 是Alibaba开源的Java诊断工具，深受开发者喜爱。</p>
<p>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>
<p>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？<br>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？<br>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？<br>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！<br>是否有一个全局视角来查看系统的运行状况？<br>有什么办法可以监控到JVM的实时运行状态？<br>Arthas支持JDK 6+，支持Linux/Mac/Winodws，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。</p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-中科大计算机资源"><a href="#1-中科大计算机资源" class="headerlink" title="1. 中科大计算机资源"></a>1. <a href="https://mbinary.xyz/ustc-cs/" target="_blank" rel="noopener">中科大计算机资源</a></h2><p>本着技术开源、知识分享的想法，近日一位名叫 mbinary 的贡献者在 GitHub上创建了一个 repo，叫做「USTC-CS-Courses-Resource」，一本正经地介绍中科大的相关课程资源。这位贡献者正是中科大计算机相关专业的在读生。</p>
<p>Github 地址<br><a href="https://github.com/mbinary/USTC-CS-Courses-Resource" target="_blank" rel="noopener">https://github.com/mbinary/USTC-CS-Courses-Resource</a></p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
  </entry>
  <entry>
    <title>【翻译】时序数据库为什么选 Prometheus</title>
    <url>/Prometheus/guide/prometheus-comparison-tsdb.html</url>
    <content><![CDATA[<h1 id="Prometheus-与-Graphite"><a href="#Prometheus-与-Graphite" class="headerlink" title="Prometheus 与 Graphite"></a>Prometheus 与 Graphite</h1><h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><p>Graphite 专注于成为一个具有查询语言和绘图功能的被动时间序列数据库。任何其他问题都由外部组件处理。</p>
<p>Prometheus 是一个完整的监控和趋势系统，包括内置和活动的抓取、存储、查询、绘图和基于时间序列数据的报警。它知道监控应该是什么样子(监控点应该存在，时间序列模式意味着什么问题，等等)，并积极地寻找错误。</p>
<a id="more"></a>


<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>Graphite 存储命名时间序列的数字样本和 Prometheus 所做的一样。然而，Prometheus 的元数据模型更丰富。</p>
<p>Graphite metric 名称由点分隔的编码组成，这些编码较为隐藏。而 Prometheus 将显式地编码为 key-value 对称为 label，附加到 metric 名称上。这允许通过查询语言对这些 label 进行简单的筛选、分组和匹配。</p>
<p>此外，特别是当使用 Graphite 与 StatsD 结合使用时，通常只在所有被监视的实例上存储聚合数据，而不是将实例作为维度保存，并能够深入到各个有问题的实例中。</p>
<p>例如，Graphite / StatsD 存储 api-server 返回值为 500 的 HTTP 请求的数据会像下面一样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stats.api-server.tracks.post.500 -&gt; 93</span><br></pre></td></tr></table></figure>

<p>在 Prometheus 中，相同的数据会被编码成如下的样子，（假设有三个 api-server 实例）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">api_server_http_requests_total&#123;method=&quot;POST&quot;,handler=&quot;/tracks&quot;,status=&quot;500&quot;,instance=&quot;&lt;sample1&gt;&quot;&#125; -&gt; 34</span><br><span class="line">api_server_http_requests_total&#123;method=&quot;POST&quot;,handler=&quot;/tracks&quot;,status=&quot;500&quot;,instance=&quot;&lt;sample2&gt;&quot;&#125; -&gt; 28</span><br><span class="line">api_server_http_requests_total&#123;method=&quot;POST&quot;,handler=&quot;/tracks&quot;,status=&quot;500&quot;,instance=&quot;&lt;sample3&gt;&quot;&#125; -&gt; 31</span><br></pre></td></tr></table></figure>

<h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p>Graphite 将时间序列数据以 Whisper 格式存储在本地磁盘上，Whisper 格式是一种期望样本定期到达 RRD-style 数据库。<br>每个时间序列都存储在一个单独的文件中，新的采样数据会在一段时间后覆盖旧的采样数据。</p>
<p>Prometheus 也为每个时间序列数据创建一个本地文件，允许在发生剪贴或规则评估时以任意间隔存储数据。<br>由于新数据只是简单地追加，旧数据可以任意地保持较长时间。<br>Prometheus 也适用于许多短暂的、频繁变化的时间序列。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Prometheus 提供了更丰富的数据模型和查询语句，并且更易于运行和集成到您的环境中。如果您想要能够长期保存历史数据的集群解决方案，那么 Graphite 可能是更好的选择。</p>
<h1 id="Prometheus-与-InfluxDB"><a href="#Prometheus-与-InfluxDB" class="headerlink" title="Prometheus 与 InfluxDB"></a>Prometheus 与 InfluxDB</h1><p>InfluxDB 是一个开放源码的时间序列数据库，具有可伸缩和集群的商业选项。<br>在 Prometheus 开发项目开始将近一年后，InfluxDB 项目发布了，因此我们当时无法考虑将其作为替代方案。<br>尽管如此，Prometheus 和 InfluxDB 之间仍然存在显著的差异，而且这两个系统都针对稍微不同的用例。</p>
<h2 id="范围-1"><a href="#范围-1" class="headerlink" title="范围"></a>范围</h2><p>为了进行公平的比较，我们还必须将 Kapacitor 和 InfluxDB 一起考虑，因为它们结合起来处理与 Prometheus 和 Alertmanager 相同的问题场景。</p>
<p>InfluxDB 提供连续查询，这相当于 Prometheus 记录规则。</p>
<p>Kapacitor 的场景是 Prometheus 记录规则、警报规则和 Alertmanager 通知功能的组合。<br>Prometheus 提供了一种更强大的查询语言，用于绘图和警报。<br>Prometheus 的 Alertmanager 还提供了分组，去重功能和静默功能。</p>
<h2 id="数据模型和存储"><a href="#数据模型和存储" class="headerlink" title="数据模型和存储"></a>数据模型和存储</h2><p>与 Prometheus 一样，InfluxDB 数据模型也有 key-value 作为 labels ，称为 tag。<br>此外，InfluxDB 还有一个二级 labels 称为 field ，在使用上更加有限。<br>InfluxDB 支持纳秒级的时间戳，以及float64、int64、bool和字符串数据类型。<br>相比之下，Prometheus 支持 float64 数据类型，但对字符串和毫秒级分辨率时间戳的支持有限。</p>
<p>InfluxDB 使用了用于存储的一个变种 具有写前日志的日志结构合并树 （<a href="https://docs.influxdata.com/influxdb/v1.2/concepts/storage_engine/" target="_blank" rel="noopener">Storage Engine</a>），用时间分片。<br>这比 Prometheus 的 “每个时间序列只添加一个文件” 方法更适合于事件日志记录。</p>
<p><a href="https://grafana.com/blog/2016/01/05/logs-and-metrics-and-graphs-oh-my/" target="_blank" rel="noopener">Logs and Metrics and Graphs, Oh My! </a> 这篇文章描述了事件日志记录和指标记录之间的差异。</p>
<h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p>Prometheus 的服务器彼此独立运行，仅依赖本地存储实现核心功能:抓取、规则处理和警报。开源版本的  InfluxDB 也是类似的。</p>
<p>根据设计，商业的 InfluxDB 产品是一个分布式存储集群，存储和查询由多个节点同时处理。</p>
<p>这意味着商业的 InfluxDB 将更容易横向扩展，但也意味着您必须从一开始就管理分布式存储系统的复杂性。<br>Prometheus 将更易于运行，但在某些时候，您将需要根据可伸缩性边界(如产品、服务、数据中心或类似方面)显式地对服务器进行切分。独立服务器(可以冗余地并行运行)还可以提供更好的可靠性和故障隔离。</p>
<p>Kapacitor 的开源版本没有用于规则、警报或通知的内置的分布式/冗余选项，。<br>Kapacitor 的开源版本可以通过用户手工分片进行扩展，类似于 Prometheus 本身。<br>Influx 提供企业级的 Kapacitor，支持HA/冗余警报系统。</p>
<p>相比之下，Prometheus 和 Alertmanager 通过运行 Prometheus 的冗余副本并使用Alertmanager 的高可用性模式，提供了一个完全开源的冗余选项。</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>这两个系统有许多相似之处。<br>它们都有 labels (在 InfluxDB 中称为 tag)来有效地支持多维 metric 。<br>两者使用的数据压缩算法基本相同。<br>两者都有广泛的集成，包括彼此之间的集成。<br>它们都有钩子，允许您进一步扩展它们，例如在统计工具中分析数据或执行自动化操作。</p>
<p>InfluxDB 的优点</p>
<ul>
<li>存储事件日志</li>
<li>商业版本提供集群功能，对于存储长期数据是有帮助的。</li>
<li>数据副本之间的视图是一致的</li>
</ul>
<p>Prometheus 的优点</p>
<ul>
<li>存储指标数据。</li>
<li>更强大的查询语言、警报和通知功能。</li>
<li>高可用、很好的绘图功能、警报功能。</li>
</ul>
<p>InfluxDB 由一个单一的商业公司遵循开放核心模型，提供高级功能，如闭源集群、托管和支持。<br>普罗米修斯是一个完全开源和独立的项目，由许多公司和个人维护，其中一些还提供商业服务和支持。</p>
<h1 id="Prometheus-与-OpenTSDB"><a href="#Prometheus-与-OpenTSDB" class="headerlink" title="Prometheus 与 OpenTSDB"></a>Prometheus 与 OpenTSDB</h1><p>OpenTSDB 是基于 Hadoop 和 HBase 的分布式时间序列数据库。</p>
<h2 id="范围-2"><a href="#范围-2" class="headerlink" title="范围"></a>范围</h2><p>这里适用的一般范围差异与 Graphite 的情况相同。</p>
<h2 id="数据模型-1"><a href="#数据模型-1" class="headerlink" title="数据模型"></a>数据模型</h2><p>OpenTSDB 的数据模型几乎与 Prometheus 的数据模型相同:时间序列由一组任意的 key-value 对(OpenTSDB 是 tag 而 Prometheus 是 label )。</p>
<p>所有 metric 数据存储在一起，限制了 metric 的基数。但是有一些细微的区别: Prometheus 允许在label 值中使用任意字符，而 OpenTSDB 的限制更严格。</p>
<p>OpenTSDB 也缺乏完整的查询语言，只允许通过其 API 进行简单的聚合和数学运算。</p>
<h2 id="数据存储-1"><a href="#数据存储-1" class="headerlink" title="数据存储"></a>数据存储</h2><p>OpenTSDB 的存储是在 Hadoop 和 HBase 上实现的。这意味着很容易横向扩展 OpenTSDB，但是您必须从一开始就接受运行 Hadoop/HBase 集群的总体复杂性。</p>
<p>Prometheus 最初运行起来会更简单，但一旦超过单个节点的容量，就需要手动的分开。</p>
<h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>Prometheus 提供了更丰富的查询语言，可以处理更高的基数指标，并构成一个完整监控系统的一部分。<br>如果您已经在运行 Hadoop，并且看重长期存储而不是这些好处，那么 OpenTSDB 是一个不错的选择。</p>
<h1 id="Prometheus-与-Nagios"><a href="#Prometheus-与-Nagios" class="headerlink" title="Prometheus 与 Nagios"></a>Prometheus 与 Nagios</h1><p>Nagios 是一种起源于20世纪90年代的监视系统，名为 NetSaint。</p>
<h2 id="范围-3"><a href="#范围-3" class="headerlink" title="范围"></a>范围</h2><p>Nagios 主要是基于脚本的退出代码发出警报。这些被称为“check”。有个别报警会静默，但没有分组，路由或重复数据删除。<br>Nagios 有各种各样的插件。例如，允许通过管道将几千字节的插件数据返回到时间序列数据库，如 Graphite ，或者使用 NRPE 在远程机器上运行检查。</p>
<h2 id="数据模型-2"><a href="#数据模型-2" class="headerlink" title="数据模型"></a>数据模型</h2><p>Nagios是基于主机的。每个主机可以有一个或多个服务，每个服务可以执行一个检查。<br>没有标签或查询语言的概念</p>
<h2 id="数据存储-2"><a href="#数据存储-2" class="headerlink" title="数据存储"></a>数据存储</h2><p>除了当前的检查状态外，Nagios本身没有存储。有一些插件可以存储数据，比如 visualisation。</p>
<h2 id="结构体系"><a href="#结构体系" class="headerlink" title="结构体系"></a>结构体系</h2><p>Nagios服务器是独立的。所有检查的配置都是通过文件进行的。</p>
<h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>Nagios适用于基本监视小型系统或者静态系统，在这些系统中，黑盒探测就足够了。<br>如果您想进行白盒监控，或者拥有一个动态或基于云的环境，那么 Prometheus 是一个不错的选择。</p>
<h1 id="Prometheus-与-Sensu"><a href="#Prometheus-与-Sensu" class="headerlink" title="Prometheus 与 Sensu"></a>Prometheus 与 Sensu</h1><p>Sensu 是一个可组合的监视工作流，可以复用现有的 Nagios 检查。</p>
<h2 id="范围-4"><a href="#范围-4" class="headerlink" title="范围"></a>范围</h2><p>这里适用的一般范围差异与 Nagios 的情况相同。</p>
<p>还有一个客户端套接字允许将特别的检查结果推送到Sensu中。</p>
<h2 id="数据模型-3"><a href="#数据模型-3" class="headerlink" title="数据模型"></a>数据模型</h2><p>Sensu 拥有与 Nagios 相同的粗略数据模型。</p>
<h2 id="数据存储-3"><a href="#数据存储-3" class="headerlink" title="数据存储"></a>数据存储</h2><p>Sensu使用Redis持久化监控数据，包括Sensu客户端注册表、检查结果、检查执行历史和当前事件数据。</p>
<h2 id="体系结构-1"><a href="#体系结构-1" class="headerlink" title="体系结构"></a>体系结构</h2><p>Sensu有许多组件。它使用RabbitMQ作为传输，使用Redis表示当前状态，使用单独的服务器进行处理和API访问。<br>可以对Sensu部署的所有组件(RabbitMQ、Redis和Sensu服务器/API)进行集群，以实现高可用性和冗余配置。</p>
<h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p>如果您希望按原样扩展现有 Nagios 设置，或者希望利用 Sensu 的自动注册特性，那么 Sensu 是一个不错的选择。<br>如果您想进行白盒监控，或者拥有一个非常动态的或基于云的环境，那么 Prometheus 是一个不错的选择。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://prometheus.io/docs/introduction/comparison/" target="_blank" rel="noopener">https://prometheus.io/docs/introduction/comparison/</a> ， by Prometheus </li>
</ul>
<hr>
<p>欢迎访问网站 <a href="https://erdong.site">https://erdong.site</a> 来获取更多内容。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>guide</category>
      </categories>
      <tags>
        <tag>prometheus</tag>
        <tag>OpenTSDB</tag>
        <tag>InfluxDB</tag>
        <tag>Graphite</tag>
        <tag>Nagios</tag>
        <tag>Sensu</tag>
      </tags>
  </entry>
  <entry>
    <title>Parted 创建 GPT 分区</title>
    <url>/tools/parted-create-gpt-partition.html</url>
    <content><![CDATA[<p>对于磁盘的分区表 MBR与GPT区别。<br>MBR：MBR分区表(即主引导记录)大家都很熟悉，是过去我们使用windows时常用的。<br>所支持的最大卷：2T，而且对分区有限制：最多4个主分区或3个主分区加一个扩展分区</p>
<p>GPT： GPT（即GUID分区表）。是源自EFI标准的一种较新的磁盘分区表结构的标准，是未来磁盘分区的主要形式。与MBR分区方式相比，具有如下优点。</p>
<a id="more"></a>

<p>突破MBR 4个主分区限制，每个磁盘最多支持128个分区。支持大于2T的分区，最大卷可达18EB。</p>
<p>对于 GPT 的分区，建议使用 parted 工具进行分区，fdisk 在 GPT 这块不是很好。</p>
<h1 id="Parted-介绍"><a href="#Parted-介绍" class="headerlink" title="Parted 介绍"></a>Parted 介绍</h1><p>Parted 命令分为两种模式：命令行模式和交互模式。</p>
<h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2><p>parted [option] device [command] ,该模式可以直接在命令行下对磁盘进行分区操作，比较适合编程应用。如：</p>
<p>显示磁盘/dev/sdb分区。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parted /dev/sdb print</span><br></pre></td></tr></table></figure>

<h2 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h2><p>parted [option] device 进入交互模式。尤其是对 parted 命令不是很熟悉的情况下建议使用交互模式。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parted /dev/sdb</span><br></pre></td></tr></table></figure>

<h1 id="parted命令常用选项"><a href="#parted命令常用选项" class="headerlink" title="parted命令常用选项"></a>parted命令常用选项</h1><p>进入 交互模式下， 输入 <code>help</code> 可以看到如下提示，本文基于 Parted 3.2 进行说明。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test@test01:~$ sudo parted /dev/sdb</span><br><span class="line">GNU Parted 3.2</span><br><span class="line">使用 /dev/sdb</span><br><span class="line">欢迎使用 GNU Parted! 输入 &apos;help&apos;可获得命令列表.</span><br><span class="line">(parted) help</span><br><span class="line">  align-check TYPE N                        check partition N for TYPE(min|opt) alignment</span><br><span class="line">  help [COMMAND]                           print general help, or help on COMMAND</span><br><span class="line">  mklabel,mktable LABEL-TYPE               create a new disklabel (partition table)</span><br><span class="line">  mkpart 分区类型 [文件系统类型] 起始点 终止点      创建一个分区</span><br><span class="line">  name NUMBER 名称               将编号为NUMBER 的分区命名为“名称”</span><br><span class="line">  print [devices|free|list,all|NUMBER]     display the partition table, available devices, free space,</span><br><span class="line">        all found partitions, or a particular partition</span><br><span class="line">  quit                          退出程序</span><br><span class="line">  rescue 起始点 终止点  挽救临近“起始点”、“终止点”的遗失的分区</span><br><span class="line">  resizepart NUMBER END                    resize partition NUMBER</span><br><span class="line">  rm MINOR                      删除编号为 MINOR 的分区</span><br><span class="line">  选择设备  选择要编辑的设备</span><br><span class="line">  disk_set FLAG STATE                      change the FLAG on selected device</span><br><span class="line">  disk_toggle [FLAG]                       toggle the state of FLAG on selected device</span><br><span class="line">  set NUMBER FLAG STATE                    change the FLAG on partition NUMBER</span><br><span class="line">  toggle [NUMBER [FLAG]]                   切换分区 NUMBER 的 FLAG 标记</span><br><span class="line">  unit UNIT                                set the default unit to UNIT</span><br><span class="line">  version                                  display the version number and copyright information of GNU</span><br><span class="line">        Parted</span><br><span class="line">(parted)</span><br></pre></td></tr></table></figure>

<p>比较常用的几个选项是</p>
<ul>
<li>help 打印帮助信息</li>
<li>print 输出分区信息</li>
<li>mklabel 创建分区表， 即是使用msdos（MBR）还是使用gpt，或者是其他方式分区表</li>
<li>mkpart 创建新分区<br>格式：mkpart PART-TYPE  START END<br>PART-TYPE类型主要有primary（主分区）, extended（扩展分区）, logical（逻辑区）. 扩展分区和逻辑分区只对msdos。</li>
<li>rm  删除一个分区</li>
<li>resizepart 调整指定的分区的大小</li>
<li>quit 退出该交互界面</li>
</ul>
<h1 id="对磁盘进行分区"><a href="#对磁盘进行分区" class="headerlink" title="对磁盘进行分区"></a>对磁盘进行分区</h1><p>首先对于容量较大的磁盘使用 fdisk 工具会得到如下提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test@test01:~$ sudo fdisk /dev/sdb</span><br><span class="line"></span><br><span class="line">欢迎使用 fdisk (util-linux 2.31.1)。</span><br><span class="line">更改将停留在内存中，直到您决定将更改写入磁盘。</span><br><span class="line">使用写入命令前请三思。</span><br><span class="line"></span><br><span class="line">设备不包含可识别的分区表。</span><br><span class="line">The size of this disk is 3.7 TiB (4000787030016 bytes). DOS partition table format cannot be used on drives for volumes larger than 2199023255040 bytes for 512-byte sectors. Use GUID partition table format (GPT).</span><br><span class="line"></span><br><span class="line">创建了一个磁盘标识符为 0x9f682389 的新 DOS 磁盘标签。</span><br><span class="line"></span><br><span class="line">命令(输入 m 获取帮助)：</span><br></pre></td></tr></table></figure>

<p>这个时候我们就需要更新 parted 来对磁盘进行分区。</p>
<h2 id="更改分区表"><a href="#更改分区表" class="headerlink" title="更改分区表"></a>更改分区表</h2><p>操作如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(parted) mklabel gpt</span><br><span class="line">(parted) print</span><br><span class="line">Model: ATA ST4000DM004-2CV1 (scsi)</span><br><span class="line">磁盘 /dev/sdb: 4001GB</span><br><span class="line">Sector size (logical/physical): 512B/4096B</span><br><span class="line">分区表：gpt</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">数字  开始：  End  大小  文件系统  Name  标志</span><br><span class="line"></span><br><span class="line">(parted)</span><br></pre></td></tr></table></figure>

<h2 id="创建分区"><a href="#创建分区" class="headerlink" title="创建分区"></a>创建分区</h2><p>使用 mkpart 创建自己需要的大小的分区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(parted) mkpart primary 0 4TB</span><br><span class="line">(parted) p</span><br><span class="line">Model: ATA ST4000DM004-2CV1 (scsi)</span><br><span class="line">磁盘 /dev/sdb: 4001GB</span><br><span class="line">Sector size (logical/physical): 512B/4096B</span><br><span class="line">分区表：gpt</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">数字  开始：  End     大小    文件系统  Name     标志</span><br><span class="line"> 1    1049kB  4001GB  4001GB            primary</span><br><span class="line"></span><br><span class="line">(parted)</span><br></pre></td></tr></table></figure>

<p>创建好以后退出。</p>
<blockquote>
<p>parted 的每一个操作都是即时生效，和 fdisk 不同，fdisk 只有在最后使用 <code>w</code> 进行保存以后才会生效 。</p>
</blockquote>
<h2 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h2><p>格式化成你需要的文件系统。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>

<p>整个分区创建过程就结束了。</p>
<h1 id="对齐分区以得到最优性能"><a href="#对齐分区以得到最优性能" class="headerlink" title="对齐分区以得到最优性能"></a>对齐分区以得到最优性能</h1><p>当分区不对齐时，parted 会提示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">警告: The resulting partition is not properly aligned for best performance.</span><br><span class="line">忽略/Ignore/放弃/Cancel?</span><br></pre></td></tr></table></figure>

<p>对于这个提示，只要分区对齐就好。如果你的设计，就是要不对齐，那么可以忽略这个提示。</p>
<p>对齐分区有两个方法，</p>
<p>方法一，使用百分比来表示要分区的的空间大小，那么到100%的时候自然是对齐的。示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(parted) mkpart primary 0% 100%</span><br><span class="line">(parted) p</span><br><span class="line">Model: ATA ST4000DM004-2CV1 (scsi)</span><br><span class="line">磁盘 /dev/sdb: 4001GB</span><br><span class="line">Sector size (logical/physical): 512B/4096B</span><br><span class="line">分区表：gpt</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">数字  开始：  End     大小    文件系统  Name     标志</span><br><span class="line"> 1    1049kB  4001GB  4001GB            primary</span><br><span class="line"></span><br><span class="line">(parted)</span><br></pre></td></tr></table></figure>

<p>方法二，如果是使用容量来进行空间大小的话，那么 <code>-1</code> 这个值代表的是最后的位置。示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(parted) mkpart primary 0TB -1</span><br><span class="line">(parted) p</span><br><span class="line">Model: ATA ST4000DM004-2CV1 (scsi)</span><br><span class="line">磁盘 /dev/sdb: 4001GB</span><br><span class="line">Sector size (logical/physical): 512B/4096B</span><br><span class="line">分区表：gpt</span><br><span class="line">Disk Flags:</span><br><span class="line"></span><br><span class="line">数字  开始：  End     大小    文件系统  Name     标志</span><br><span class="line"> 1    1049kB  4001GB  4001GB            primary</span><br><span class="line"></span><br><span class="line">(parted)</span><br></pre></td></tr></table></figure>

<p>方法三，手动进行计算。</p>
<p>下边这篇博客的作者描述了如何计算磁盘的扇区来保证分区对齐。</p>
<p><a href="https://rainbow.chard.org/2013/01/30/how-to-align-partitions-for-best-performance-using-parted/" target="_blank" rel="noopener">https://rainbow.chard.org/2013/01/30/how-to-align-partitions-for-best-performance-using-parted/</a></p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>parted</tag>
        <tag>fdisk</tag>
        <tag>GPT</tag>
        <tag>MBR</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】Prometheus 不完全避坑指南</title>
    <url>/Prometheus/guide/prometheus-incomplete-guide.html</url>
    <content><![CDATA[<p>Prometheus 是一个开源监控系统，它本身已经成为了云原生中指标监控的事实标准，几乎所有 k8s 的核心组件以及其它云原生系统都以 Prometheus 的指标格式输出自己的运行时监控信息。我在工作中也比较深入地使用过 Prometheus，最大的感受就是它非常容易维护，突出一个简单省心成本低。当然，这当中也免不了踩过一些坑，下面就总结一下。</p>
<blockquote>
<p>假如你没有用过 Prometheus，建议先看一遍 官方文档</p>
</blockquote>
<a id="more"></a>


<h1 id="接受准确性与可靠性的权衡"><a href="#接受准确性与可靠性的权衡" class="headerlink" title="接受准确性与可靠性的权衡"></a>接受准确性与可靠性的权衡</h1><p>Prometheus 作为一个基于指标(Metric)的监控系统，在设计上就放弃了一部分数据准确性：</p>
<ul>
<li>比如在两次采样的间隔中，内存用量有一个瞬时小尖峰，那么这次小尖峰我们是观察不到的；</li>
<li>再比如 QPS、RT、P95、P99 这些值都只能估算，无法和日志系统一样做到 100% 准确，下面也会讲一个相关的坑；</li>
</ul>
<p>放弃一点准确性得到的是更高的可靠性，这里的可靠性体现为架构简单、数据简单、运维简单。假如你维护过 ELK 或其它日志架构的话，就会发现相比于指标，日志系统想要稳定地跑下去需要付出几十倍的机器成本与人力成本。既然是权衡，那就没有好或不好，只有适合不适合，我推荐在应用 Prometheus 之初就要先考虑清楚这个问题，并且将这个权衡明确地告诉使用方。</p>
<h1 id="首先做好自监控"><a href="#首先做好自监控" class="headerlink" title="首先做好自监控"></a>首先做好自监控</h1><p>不知道你有没有考虑过一个问题，其它系统都用 Prometheus 监控起来了，报警规则也设置好了，那 Prometheus 本身由谁来监控？</p>
<p>答案是”另一个监控系统”，而这个监控系统可以是另一个 Prometheus。按照官方的 quickstart 或 helm 部署的 Prometheus 单实例自己监控自己的，我们当然不能指望一个系统挂掉之后自己发现自己挂了。因此我强烈建议在上生产环境之前，一定要确保至少有两个独立的 Prometheus 实例互相做交叉监控。交叉监控的配置也很简单，每台 Prometheus 都拉取其余所有 Prometheus 的指标即可。</p>
<p>还有一个点是警报系统(Alertmanager)，我们再考虑一下警报系统挂掉的情况：这时候 Prometheus 可以监控到警报系统挂了，但是因为警报挂掉了，所以警报自然就发不出来，这也是应用 Prometheus 之前必须搞定的问题。这个问题可以通过给警报系统做 HA 来应对。除此之外还有一个经典的兜底措施叫做 “Dead man’s switch”: 定义一条永远会触发的告警，不断通知，假如哪天这条通知停了，那么说明报警链路出问题了。</p>
<h1 id="不要使用-NFS-做存储"><a href="#不要使用-NFS-做存储" class="headerlink" title="不要使用 NFS 做存储"></a>不要使用 NFS 做存储</h1><p>如题，Prometheus 维护者也在 <a href="https://github.com/prometheus/prometheus/issues/3534" target="_blank" rel="noopener">issue 中表示过不支持 NFS </a>。这点我们有血泪教训（我们曾经有一台 Prometheus 存储文件发生损坏丢失了历史数据）。</p>
<h1 id="尽早干掉维度-Cardinality-过高的指标"><a href="#尽早干掉维度-Cardinality-过高的指标" class="headerlink" title="尽早干掉维度(Cardinality)过高的指标"></a>尽早干掉维度(Cardinality)过高的指标</h1><p>根据我们的经验，Prometheus 里有 50% 以上的存储空间和 80% 以上的计算资源(CPU、内存)都是被那么两三个维度超高的指标用掉的。而且这类维度超高的指标由于数据量很大，稍微查得野一点就会 OOM 搞死 Prometheus 实例。</p>
<p>首先要明确这类指标是对 Prometheus 的滥用，类似需求完全应该放到日志流或数仓里去算。但是指标的接入方关注的往往是业务上够不够方便，假如足够方便的话什么都可以往 label 里塞。这就需要我们防患于未然，一个有效的办法是用警报规则找出维度过高的坏指标，然后在 Scrape 配置里 Drop 掉导致维度过高的 label。</p>
<p>警报规则的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 统计每个指标的时间序列数，超出 10000 的报警</span><br><span class="line">count by (__name__)(&#123;__name__=~&quot;.+&quot;&#125;) &gt; 10000</span><br></pre></td></tr></table></figure>

<p>“坏指标”报警出来之后，就可以用 metric_relabel_config 的 drop 操作删掉有问题的 label（比如 userId、email 这些一看就是问题户），这里的配置方式可以查阅文档</p>
<p>对了，这条的关键词是尽早，最好就是部署完就搞上这条规则，否则等哪天 Prometheus 容量满了再去找业务方说要删 label，那业务方可能就要忍不住扇你了……</p>
<h1 id="Rate-类函数-Recording-Rule-的坑"><a href="#Rate-类函数-Recording-Rule-的坑" class="headerlink" title="Rate 类函数 + Recording Rule 的坑"></a>Rate 类函数 + Recording Rule 的坑</h1><p>可能你已经知道了 PromQL 里要先 rate() 再 sum()，不能 sum() 完再 rate()（不知道也没事，马上讲）。但当 rate() 已经同类型的函数如 increase() 和 recording rule 碰到一起时，可能就会不小心掉到坑里去。</p>
<p>当时，我们已经有了一个维度很高的指标（只能继续维护了，因为没有尽早干掉），为了让大家查询得更快一点，我们设计了一个 Recording Rule，用 sum() 来去掉维度过高的 bad_label，得到一个新指标。那么只要不涉及到 bad_label，大家就可以用新指标进行查询，Recording Rule 如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sum(old_metric) without (bad_label)</span><br></pre></td></tr></table></figure>

<p>用了一段时候后，大家发现 new_metric 做 rate() 得到的 QPS 趋势图里经常有奇怪的尖峰，但 old_metric 就不会出现。这时我们恍然大悟：绕了个弯踩进了 rate() 的坑里。</p>
<p>这背后与 rate() 的实现方式有关，rate() 在设计上假定对应的指标是一个 Counter，也就是只有 incr(增加) 和 reset(归0) 两种行为。而做了 sum() 或其他聚合之后，得到的就不再是一个 Counter 了，举个例子，比如 sum() 的计算对象中有一个归0了，那整体的和会下降，而不是归零，这会影响 rate() 中判断 reset(归0) 的逻辑，从而导致错误的结果。写 PromQL 时这个坑容易避免，但碰到 Recording Rule 就不那么容易了，因为不去看配置的话大家也想不到 new_metric 是怎么来的。</p>
<p>要完全规避这个坑，可以遵守一个原则：Recording Rule 一步到位，直接算出需要的值，避免算出一个中间结果再拿去做聚合。</p>
<h1 id="警报和历史趋势图未必-Match"><a href="#警报和历史趋势图未必-Match" class="headerlink" title="警报和历史趋势图未必 Match"></a>警报和历史趋势图未必 Match</h1><p>最近半年常常被问两个问题：</p>
<ul>
<li>我的历史趋势图看上去超过水位线了，警报为什么没报？</li>
<li>我的历史趋势图看上去挺正常的，警报为什么报了？</li>
</ul>
<p>这其中有一个原因是：趋势图上每个采样点的采样时间和警报规则每次的计算时间不是严格一致的。当时间区间拉得比较大的时候，采样点非常稀疏，不如警报计算的间隔来得密集，这个现象尤为明显，比如时序图采样了 0秒，60秒，120秒三个点。而警报在15秒，30秒，45秒连续计算出了异常，那在图上就看不出来。另外，经过越多的聚合以及函数操作，不同时间点的数据差异会来得越明显，有时确实容易混淆。</p>
<p>这个其实不是问题，碰到时将趋势图的采样间隔拉到最小，仔细比对一下，就能验证警报的准确性。而对于聚合很复杂的警报，可以先写一条 Recording Rule, 再针对 Recording Rule 产生的新指标来建警报。这种范式也能帮助我们更高效地去建分级警报（超过不同阈值对应不同的紧急程度）</p>
<h1 id="Alertmanager-的-group-interval-会影响-resolved-通知"><a href="#Alertmanager-的-group-interval-会影响-resolved-通知" class="headerlink" title="Alertmanager 的 group_interval 会影响 resolved 通知"></a>Alertmanager 的 group_interval 会影响 resolved 通知</h1><p>Alertmanager 里有一个叫 group_interval 的配置，用于控制同一个 group 内的警报最快多久通知一次。这里有一个问题是 firing(激活) 和 resolved(已消除) 的警报通知是共享同一个 group 的。也就是说，假设我们的 group_interval 是默认的 5 分钟，那么一条警报激活十几秒后立马就消除了，它的消除通知会在报警通知的 5 分钟之后才到，因为在发完报警通知之后，这个 Group 需要等待 5 分钟的 group_interval 才能进行下一次通知。</p>
<p>这个设计让”警报消除就立马发送消除通知”变得几乎不可能，因为假如把 group_interval 变得很小的话，警报通知就会过于频繁，而调大的话，就会拖累到消除通知。</p>
<p>这个问题修改一点源码即可解决，不过无伤大雅，不修也完全没问题。</p>
<h1 id="最后一条：不要忘记因何而来"><a href="#最后一条：不要忘记因何而来" class="headerlink" title="最后一条：不要忘记因何而来"></a>最后一条：不要忘记因何而来</h1><p>最后一条撒点鸡汤：监控的核心目标还是护航业务稳定，保障业务的快速迭代，永远不要忘记因何而来</p>
<p>曾经有一端时间，我们追求”监控的覆盖率”，所有系统所有层面，一定要有指标，而且具体信息 label 分得越细越好，最后搞出几千个监控项，不仅搞得眼花缭乱还让 Prometheus 变慢了；</p>
<p>还有一段时间，我们追求”警报的覆盖率”，事无巨细必有要有警报，人人有责全体收警报（有些警报会发送给几十个人）。最后当然你也能预想到了，告警风暴让大家都对警报疲劳了；</p>
<p>这些事情乍看起来都是在努力工作，但其实一开始的方向就错了，监控的目标绝对不是为了达到 xxx 个指标，xxx 条警报规则，这些东西有什么意义？依我看，负责监控的开发就算不是 SRE 也要有 SRE 的心态和视野，不要为监控系统的功能或覆盖面负责（这样很可让导致开发在监控里堆砌功能和内容，变得越来越臃肿越来越不可靠），而要为整个业务的稳定性负责，同时站在稳定性的投入产出比角度去考虑每件事情的性质和意义，不要忘记我们因何而来。</p>
<p>作者： 吴叶磊</p>
<p>原文链接： <a href="https://aleiwu.com/post/prometheus-bp/" target="_blank" rel="noopener">https://aleiwu.com/post/prometheus-bp/</a></p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>guide</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenVPN linux 客户端安装使用</title>
    <url>/tools/openvpn-client-use.html</url>
    <content><![CDATA[<h1 id="openVPN-linux-客户端安装使用"><a href="#openVPN-linux-客户端安装使用" class="headerlink" title="openVPN linux 客户端安装使用"></a>openVPN linux 客户端安装使用</h1><a id="more"></a>

<h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><p>安装openssl和lzo，lzo用于压缩通讯数据加快传输速度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install openssl openssl-devel</span><br><span class="line">yum -y install lzo</span><br></pre></td></tr></table></figure>

<p>安装 epel 第三方源，使得可以安装 openvpn ，CentOS 官方源内不含 openvpn 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install openvpn</span><br></pre></td></tr></table></figure>

<p>将下面证书和密钥添加到 /etc/openvpn 下，新建一个 test-client 文件夹存放。client.ovpn 文件中的 .crt 以及 .key 等文件需要写绝对路径。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ca.crt  client1.crt  client1.key  client.ovpn  ta.key</span><br></pre></td></tr></table></figure>

<p>启动客户端服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hulk ~]# openvpn --config /etc/openvpn/test-client/client.ovpn</span><br><span class="line">Mon Feb 25 15:55:56 2019 OpenVPN 2.4.6 x86_64-redhat-linux-gnu [Fedora EPEL patched] [SSL (OpenSSL)] [LZO] [LZ4] [EPOLL] [PKCS11] [MH/PKTINFO] [AEAD] built on Apr 26 2018</span><br><span class="line">Mon Feb 25 15:55:56 2019 library versions: OpenSSL 1.0.2k-fips  26 Jan 2017, LZO 2.06</span><br><span class="line">Mon Feb 25 15:55:56 2019 WARNING: No server certificate verification method has been enabled.  See http://openvpn.net/howto.html#mitm for more info.</span><br><span class="line">Mon Feb 25 15:55:56 2019 Outgoing Control Channel Authentication: Using 160 bit message hash &apos;SHA1&apos; for HMAC authentication</span><br><span class="line">Mon Feb 25 15:55:56 2019 Incoming Control Channel Authentication: Using 160 bit message hash &apos;SHA1&apos; for HMAC authentication</span><br><span class="line">Mon Feb 25 15:55:56 2019 TCP/UDP: Preserving recently used remote address: [AF_INET]59.172.178.16:1194</span><br><span class="line">Mon Feb 25 15:55:56 2019 Socket Buffers: R=[212992-&gt;212992] S=[212992-&gt;212992]</span><br><span class="line">Mon Feb 25 15:55:56 2019 UDP link local: (not bound)</span><br><span class="line">Mon Feb 25 15:55:56 2019 UDP link remote: [AF_INET]55.12.18.19:1194</span><br><span class="line">Mon Feb 25 15:55:56 2019 TLS: Initial packet from [AF_INET]55.12.18.19:1194, sid=602b3fe8 336d7976</span><br><span class="line">Mon Feb 25 15:55:56 2019 Control Channel: TLSv1.2, cipher TLSv1/SSLv3 DHE-RSA-AES256-GCM-SHA384, 2048 bit RSA</span><br><span class="line">Mon Feb 25 15:55:56 2019 [server] Peer Connection Initiated with [AF_INET]55.12.18.19:1194</span><br><span class="line">Mon Feb 25 15:55:57 2019 SENT CONTROL [server]: &apos;PUSH_REQUEST&apos; (status=1)</span><br><span class="line">Mon Feb 25 15:55:57 2019 PUSH: Received control message: &apos;PUSH_REPLY,route 202.114.96.0 255.255.255.0,route 10.0.0.0 255.0.0.0,route 172.29.0.1,topology net30,ping 10,ping-restart 120,ifconfig 172.29.2.170 172.29.2.169&apos;</span><br><span class="line">Mon Feb 25 15:55:57 2019 OPTIONS IMPORT: timers and/or timeouts modified</span><br><span class="line">Mon Feb 25 15:55:57 2019 OPTIONS IMPORT: --ifconfig/up options modified</span><br><span class="line">Mon Feb 25 15:55:57 2019 OPTIONS IMPORT: route options modified</span><br><span class="line">Mon Feb 25 15:55:57 2019 Outgoing Data Channel: Cipher &apos;BF-CBC&apos; initialized with 128 bit key</span><br><span class="line">Mon Feb 25 15:55:57 2019 WARNING: INSECURE cipher with block size less than 128 bit (64 bit).  This allows attacks like SWEET32.  Mitigate by using a --cipher with a larger block size (e.g. AES-256-CBC).</span><br><span class="line">Mon Feb 25 15:55:57 2019 Outgoing Data Channel: Using 160 bit message hash &apos;SHA1&apos; for HMAC authentication</span><br><span class="line">Mon Feb 25 15:55:57 2019 Incoming Data Channel: Cipher &apos;BF-CBC&apos; initialized with 128 bit key</span><br><span class="line">Mon Feb 25 15:55:57 2019 WARNING: INSECURE cipher with block size less than 128 bit (64 bit).  This allows attacks like SWEET32.  Mitigate by using a --cipher with a larger block size (e.g. AES-256-CBC).</span><br><span class="line">Mon Feb 25 15:55:57 2019 Incoming Data Channel: Using 160 bit message hash &apos;SHA1&apos; for HMAC authentication</span><br><span class="line">Mon Feb 25 15:55:57 2019 WARNING: cipher with small block size in use, reducing reneg-bytes to 64MB to mitigate SWEET32 attacks.</span><br><span class="line">Mon Feb 25 15:55:57 2019 ROUTE_GATEWAY 172.18.0.1/255.255.240.0 IFACE=eth0 HWADDR=fa:23:62:87:31:00</span><br><span class="line">Mon Feb 25 15:55:57 2019 TUN/TAP device tun0 opened</span><br><span class="line">Mon Feb 25 15:55:57 2019 TUN/TAP TX queue length set to 100</span><br><span class="line">Mon Feb 25 15:55:57 2019 do_ifconfig, tt-&gt;did_ifconfig_ipv6_setup=0</span><br><span class="line">Mon Feb 25 15:55:57 2019 /sbin/ip link set dev tun0 up mtu 1500</span><br><span class="line">Mon Feb 25 15:55:57 2019 /sbin/ip addr add dev tun0 local 172.29.2.170 peer 172.29.2.169</span><br><span class="line">Mon Feb 25 15:55:57 2019 /sbin/ip route add 202.114.96.0/24 via 172.29.2.169</span><br><span class="line">Mon Feb 25 15:55:57 2019 /sbin/ip route add 10.0.0.0/8 via 172.29.2.169</span><br><span class="line">Mon Feb 25 15:55:57 2019 /sbin/ip route add 172.29.0.1/32 via 172.29.2.169</span><br><span class="line">Mon Feb 25 15:55:57 2019 WARNING: this configuration may cache passwords in memory -- use the auth-nocache option to prevent this</span><br><span class="line">Mon Feb 25 15:55:57 2019 Initialization Sequence Completed</span><br></pre></td></tr></table></figure>

<p>ifconfig 查看网卡，会多出一块 tun0 的网卡，ping 对端的机器，可以 ping 通。</p>
<p>按 crtl + C 中断前台进程，即可退出 VPN 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^@^CMon Feb 25 15:58:37 2019 event_wait : Interrupted system call (code=4)</span><br><span class="line">Mon Feb 25 15:58:37 2019 /sbin/ip route del 202.114.96.0/24</span><br><span class="line">Mon Feb 25 15:58:37 2019 /sbin/ip route del 10.0.0.0/8</span><br><span class="line">Mon Feb 25 15:58:37 2019 /sbin/ip route del 172.29.0.1/32</span><br><span class="line">Mon Feb 25 15:58:37 2019 Closing TUN/TAP interface</span><br><span class="line">Mon Feb 25 15:58:37 2019 /sbin/ip addr del dev tun0 local 172.29.2.170 peer 172.29.2.169</span><br><span class="line">Mon Feb 25 15:58:37 2019 SIGINT[hard,] received, process exiting</span><br><span class="line">[root@hulk ~]#</span><br></pre></td></tr></table></figure>

<p>为了使用简单，可以把该进程放在后台运行，或者使用 supervisor 来进行守护，增加易用性和可靠性。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>openvpn</tag>
      </tags>
  </entry>
  <entry>
    <title>第08周分享</title>
    <url>/weekly/weekly08.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-Md2All"><a href="#1-Md2All" class="headerlink" title="1. Md2All"></a>1. <a href="http://md.aclickall.com" target="_blank" rel="noopener">Md2All</a></h2><p>作者是 颜家大少 ，用来将 Markdown 格式的文档转换成富文本形式，然后可以发表在微信公众号、CSDN、博客园、知乎等平台。试用了几个同类型的在线工具，这应该是最好用的一个。</p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-前端九部-入门者手册2019"><a href="#1-前端九部-入门者手册2019" class="headerlink" title="1. 前端九部 - 入门者手册2019"></a>1. <a href="https://www.yuque.com/fe9/basic" target="_blank" rel="noopener">前端九部 - 入门者手册2019</a></h2><p>前段的入门手册，供大家参考。</p>
<h2 id="2-Golang-微服务系列教程"><a href="#2-Golang-微服务系列教程" class="headerlink" title="2. Golang 微服务系列教程"></a>2. <a href="https://wuyin.io/tags/微服务/" target="_blank" rel="noopener">Golang 微服务系列教程</a></h2><p>Golang 微服务系列教程 源码，每一节对应一个分支。</p>
<p><a href="https://github.com/wuYin/shippy" target="_blank" rel="noopener">https://github.com/wuYin/shippy</a></p>
<h2 id="3-80款免费字体"><a href="#3-80款免费字体" class="headerlink" title="3. 80款免费字体"></a>3. <a href="https://app.programmingfonts.org/#source-code-pro" target="_blank" rel="noopener">80款免费字体</a></h2><p>80 多个免费编程字体。</p>
<ul>
<li>左侧选字体，包括字体创造年份、下载链接；</li>
<li>右侧实时预览，并且可敲代码测试；</li>
<li>非常方便。</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
  </entry>
  <entry>
    <title>阿里云云栖社区博客相关问题</title>
    <url>/life/gossip/yunqi-blog.html</url>
    <content><![CDATA[<p>最近在阿里云的云栖社区内发表了多篇博客，发现一些奇怪的问题。比如，博客发布以后，会处于审核中的状态，这个审核要多久，都审核什么，一直是处于未知状态。经过几天的摸索，对于几个问题有了一些答案，记录在这里，和大家分享一下。</p>
<a id="more"></a>

<h2 id="博客审核问题和审核时间"><a href="#博客审核问题和审核时间" class="headerlink" title="博客审核问题和审核时间"></a>博客审核问题和审核时间</h2><p>首先说一下博客，在云栖社区里编写博客除了正文，还有标题、标签、文章类型（原创、翻译、转载）、摘要。</p>
<p>标题自取。</p>
<p>标签可以自己添加，发布的时候，系统会默认生成一些。如果觉得的生成的标签有不准确的，可以进行修改。</p>
<p>文章类型可以选原创、翻译和转载，但是发布以后，好像这几类文章没有什么明显的标识。可能就是用来记录积分的用处吧。</p>
<p>摘要可以自己写，也可以让系统自己抓取。</p>
<p>博客发布以后会进入一个 “审核中” 的状态，这个状态没有任何的提示，比如大概什么时候会审核结束，或者整个审核是分几个步骤，现在进行到第几步了。没有任何提示。</p>
<p>按照我的经验，审核如果是机审的话，大概10分钟能结束吧。人工审核大概要 3~4 个小时。而且我的好几篇文章都是人工审核。</p>
<p>吐个槽，话说机审不应该很快吗？而且发布博客以后，要刷新好几次，大概1分钟以后才能看到我发布的博客，在这一分钟当中系统都不显示我发布了这篇博客，让我一度以为自己网络有问题。</p>
<p>而且当发布的博客处于审核状态的时候，请大家尽量不要修改博客的任何内容，比如标签、正文等等，这个操作会导致两个问题。问题一：博客审核终止，进入正常阅读状态。问题二：该篇博客不会记录经验值和积分。  这是用经验值换来的经验啊。</p>
<p>关于为什么这样，我也不知道。我会到阿里云的聆听平台去反馈，看看会不会有结果。</p>
<h2 id="专辑审核问题和审核时间"><a href="#专辑审核问题和审核时间" class="headerlink" title="专辑审核问题和审核时间"></a>专辑审核问题和审核时间</h2><p>在博客的发布过程中，我也整理了几篇博客汇总成了一个专辑，这个专辑也是让我很是费解。主要是以下几个问题。</p>
<p>我创建了一个专辑，创建完以后就处于审核中，整个专辑不可以进行编辑，这个审核过程，持续了大约36个小时，期间没有任何提示和进度显示，我一度以为我这个专辑是不是不会通过审核。</p>
<p>还有就是专辑的 logo 图片，在我的专辑管理页面看到的 logo 是正常的。但是在用户的阅读页面，这个 logo 是被压扁的，整个视觉体验非常差。</p>
<p>总的来说，云栖的博客系统还有很多要改进的地方。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>life</category>
        <category>gossip</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>QDS03 pip</title>
    <url>/QDS/qds03.html</url>
    <content><![CDATA[<p>QDS （Quick Deployment Series）快速的部署一个软件。这次我们来部署 pip 。</p>
<p>pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。<br>pip 官网：<a href="https://pypi.org/project/pip/" target="_blank" rel="noopener">https://pypi.org/project/pip/</a></p>
<a id="more"></a>


<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先下载安装脚本 get-pip.py , 大约 1.7 MiB 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py</span><br></pre></td></tr></table></figure>

<p>安装 python2  的 pip 执行下列命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure>

<p>安装 python3  的 pip 执行下列命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 get-pip.py</span><br></pre></td></tr></table></figure>

<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@node31 ~]# pip --version</span><br><span class="line">pip 19.0.3 from /usr/lib/python2.7/site-packages/pip (python 2.7)</span><br><span class="line">[root@node31 ~]#</span><br></pre></td></tr></table></figure>

<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>QDS</category>
      </categories>
      <tags>
        <tag>QDS</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>QDS04 TensorFlow</title>
    <url>/QDS/qds04.html</url>
    <content><![CDATA[<p>QDS （Quick Deployment Series）快速的部署一个软件。这次我们来部署 TensorFlow。</p>
<a id="more"></a>

<h1 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h1><p>Ubuntu 16.04 或更高版本（64 位）<br>macOS 10.12.6 (Sierra) 或更高版本（64 位）（不支持 GPU）<br>Windows 7 或更高版本（64 位）（仅支持 Python 3）<br>Raspbian 9.0 或更高版本</p>
<h1 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h1><p>从 TensorFlow 1.6 开始，二进制文件使用 AVX 指令，这些指令可能无法在旧版 CPU 上运行。</p>
<p>CUDA® 计算能力为 3.5 或更高的 NVIDIA® GPU 卡。</p>
<h1 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h1><p>必须在系统中安装以下 NVIDIA® 软件：</p>
<ul>
<li>NVIDIA® GPU 驱动程序 - CUDA 9.0 需要 384.x 或更高版本。</li>
<li>CUDA® 工具包 - TensorFlow 支持 CUDA 9.0。</li>
<li>CUDA 工具包附带的 CUPTI。</li>
<li>cuDNN SDK（7.2 及更高版本）</li>
<li>（可选）NCCL 2.2，可实现多 GPU 支持。</li>
<li>（可选）TensorRT 4.0，可缩短在某些模型上进行推断的延迟并提高吞吐量。</li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="环境检测"><a href="#环境检测" class="headerlink" title="环境检测"></a>环境检测</h2><p>python 2 环境检测，如果没有某个部分，请补装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python --version</span><br><span class="line">pip --version</span><br></pre></td></tr></table></figure>

<p>python3 和 python2 类似，换成 python3 的命令即可。</p>
<h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install tensorflow  // 安装 TensorFlow CPU 版本</span><br><span class="line">pip install tensorflow-gpu  // 安装 TensorFlow GPU 版本</span><br><span class="line">pip install tf-nightly    // 安装 TensorFlow CPU 暗夜版本 不稳定</span><br><span class="line">pip install tf-nightly-gpu   // 安装 TensorFlow GPU 暗夜版本 不稳定</span><br></pre></td></tr></table></figure>

<p>不过这样通过 pip 安装速度有点慢啊，使用了 pip 官方的源。</p>
<p>换阿里云的 pip 源以后很快就完成了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple tensorflow-gpu</span><br></pre></td></tr></table></figure>

<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>依次输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@node31 ~]# python</span><br><span class="line">Python 2.7.5 (default, Jul 13 2018, 13:06:57)</span><br><span class="line">[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux2</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import tensorflow as tf</span><br><span class="line">&gt;&gt;&gt; tf.__version__</span><br><span class="line">&apos;1.12.0&apos;</span><br><span class="line">&gt;&gt;&gt; tf.__path__</span><br><span class="line">[&apos;/usr/lib/python2.7/site-packages/tensorflow&apos;, &apos;/usr/lib/python2.7/site-packages/tensorflow/python/estimator/api&apos;, &apos;/usr/lib/python2.7/site-packages/tensorflow/_api/v1&apos;]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>可以看到，已经安装了 TensorFlow 的 1.12 版本和安装的路径。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>QDS</category>
      </categories>
      <tags>
        <tag>QDS</tag>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>QDS02 Docker</title>
    <url>/QDS/qds02.html</url>
    <content><![CDATA[<p>QDS （Quick Deployment Series）快速的部署一个软件。这次我们来部署 Docker 。</p>
<a id="more"></a>

<h1 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h1><p>对于 CentOS 系统要安装 Docker CE，您需要一个 CentOS 7 的维护版本。不支持测试版本和存档版本。</p>
<p>必须启用 centos-extras 源。默认情况下，这个源是启用的，但是如果您禁用了它，则需要重新启用它。</p>
<p>建议使用 overlay2 存储驱动程序。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils  device-mapper-persistent-data  lvm2</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li>yum-utils 提供了 yum-config-manager 命令</li>
<li>device-mapper-persistent-data 和 lvm2 是 devicemapper 存储设备需要的。</li>
<li>命令中使用了阿里云的 yum 源，建议使用这个。如果一定要用官方的，地址为 <a href="https://download.docker.com/linux/centos/docker-ce.repo" target="_blank" rel="noopener">https://download.docker.com/linux/centos/docker-ce.repo</a></li>
</ul>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@promtail01 ~]# docker --version</span><br><span class="line">Docker version 18.09.2, build 6247962</span><br><span class="line">[root@promtail01 ~]#</span><br></pre></td></tr></table></figure>

<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>QDS</category>
      </categories>
      <tags>
        <tag>QDS</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>QDS01 Grafana</title>
    <url>/QDS/qds01.html</url>
    <content><![CDATA[<p>QDS （Quick Deployment Series）快速的部署一个软件。这次我们来部署 Grafana 。</p>
<a id="more"></a>


<p>添加 Grafana 的 yum 源文件 /etc/yum.repos.d/grafana.repo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[grafana]</span><br><span class="line">name=grafana</span><br><span class="line">baseurl=https://packages.grafana.com/oss/rpm</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.grafana.com/gpg.key</span><br><span class="line">sslverify=1</span><br><span class="line">sslcacert=/etc/pki/tls/certs/ca-bundle.crt</span><br></pre></td></tr></table></figure>

<p>执行下列命令可以安装最新版本的 Grafana 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install grafana</span><br></pre></td></tr></table></figure>

<h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start grafana-server</span><br></pre></td></tr></table></figure>

<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>通过浏览器访问 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 即可访问 Grafana 。默认的 账号密码是 admin/admin ，首次登陆需要修改密码。</p>
<p>如果有防火墙，请放开对应端口。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>QDS</category>
      </categories>
      <tags>
        <tag>Grafana</tag>
        <tag>QDS</tag>
      </tags>
  </entry>
  <entry>
    <title>Prometheus 由于时间不同步导致数据不显示</title>
    <url>/uncategorized/prometheus-time-difference.html</url>
    <content><![CDATA[<h1 id="现象描述"><a href="#现象描述" class="headerlink" title="现象描述"></a>现象描述</h1><p>将 Prometheus 数据在 Grafana 中进行展示，Grafana 中 Graph 数据显示有延迟，其他类型 Singlestat 和 Table 都显示 N/A 。 </p>
<a id="more"></a>

<h1 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h1><h2 id="1-排查数据库"><a href="#1-排查数据库" class="headerlink" title="1. 排查数据库"></a>1. 排查数据库</h2><p>发现 Prometheus 数据库端一切正常，</p>
<h2 id="2-查看-web-端"><a href="#2-查看-web-端" class="headerlink" title="2. 查看 web 端"></a>2. 查看 web 端</h2><p>打开 Prometheus web 发现有明显提示 ，如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Warning! Detected 437.83 seconds time difference between your browser and the server. Prometheus relies on accurate time and time drift might cause unexpected query results.</span><br></pre></td></tr></table></figure>

<p>看到这里就找到了数据不显示的原因，是因为时间不同步。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>数据库端的时间和浏览器端的时间不同步导致浏览器端无法正常显示数据，将数据库端的时间与浏览器端的时间进行同步即可。</p>
<p>本次问题中 Grafana 页面刷新间隔为 5min 。</p>
<p>在 Prometheus web 中偏差大于 5 min 时，无法查询到任何数据，当时间偏差小于 5min 时，可以查到数据，并且正常在 Grafana 中显示。</p>
<p>不确定 Grafana 和 Prometheus 的这两个是值是偶然相同还是有必然联系，留待以后验证。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <tags>
        <tag>prometheus</tag>
        <tag>time</tag>
      </tags>
  </entry>
  <entry>
    <title>第07周分享</title>
    <url>/weekly/weekly07.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-代码整洁之道"><a href="#1-代码整洁之道" class="headerlink" title="1. 代码整洁之道"></a>1. <a href="https://book.douban.com/subject/4199741/" target="_blank" rel="noopener">代码整洁之道</a></h2><p>中文书名：代码整洁之道<br>英文书名：The Clean Coder – A Handbook of Agile Software Craftmanship<br>出版社：人民邮电出版社<br>作者：[美] Robert C. Martin<br>译者：韩磊</p>
<h2 id="2-代码整洁之道-程序员的职业素养"><a href="#2-代码整洁之道-程序员的职业素养" class="headerlink" title="2. 代码整洁之道:程序员的职业素养"></a>2. <a href="https://book.douban.com/subject/26919457/" target="_blank" rel="noopener">代码整洁之道:程序员的职业素养</a></h2><p>中文书名：代码整洁之道–程序员的职业素养<br>英文书名：The Clean Coder – A Code of Conduct for Professional Programmers<br>出版社：中国工信出版集团  人民邮电出版社<br>作者：[美] Robert C. Martin<br>译者：余晟 彰显洲</p>
<h2 id="3-架构整洁之道"><a href="#3-架构整洁之道" class="headerlink" title="3. 架构整洁之道"></a>3. <a href="https://book.douban.com/subject/30333919/" target="_blank" rel="noopener">架构整洁之道</a></h2><p>中文书名：架构整洁之道<br>英文书名：Clean Architecture<br>出版社：中国工信出版集团  人民邮电出版社<br>作者：[美] Robert C. Martin<br>译者：孙宇聪</p>
<p>三本书都是创造 “Clean神话” 的 Bob 大叔撰写，推荐大家阅读。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
  </entry>
  <entry>
    <title>第06周分享</title>
    <url>/weekly/weekly06.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>

<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-美团技术团队"><a href="#1-美团技术团队" class="headerlink" title="1. 美团技术团队"></a>1. <a href="https://tech.meituan.com" target="_blank" rel="noopener">美团技术团队</a></h2><p>美团技术团队的博客，也有对应的微信公众号，会不定时分享美团的经验。</p>
<p>在2019年初，美团总结了2018年的技术分享，现在把下载链接分享给大家。</p>
<p>温馨提醒：文件过大，约350M，建议通过WIFI下载，或将地址复制到PC端，使用浏览器下载。</p>
<p>【前端系列】：<a href="http://dpurl.cn/DWVhPpS" target="_blank" rel="noopener">http://dpurl.cn/DWVhPpS</a><br>【后台系列】：<a href="http://dpurl.cn/obtIVn" target="_blank" rel="noopener">http://dpurl.cn/obtIVn</a><br>【系统系列】：<a href="http://dpurl.cn/zTDWq8Q" target="_blank" rel="noopener">http://dpurl.cn/zTDWq8Q</a><br>【算法系列】：<a href="http://dpurl.cn/ODj5qAB" target="_blank" rel="noopener">http://dpurl.cn/ODj5qAB</a><br>【运维系列】：<a href="http://dpurl.cn/6zjgHFj" target="_blank" rel="noopener">http://dpurl.cn/6zjgHFj</a><br>【测试系列】：<a href="http://dpurl.cn/wfKQqy" target="_blank" rel="noopener">http://dpurl.cn/wfKQqy</a><br>【工程师成长系列】：<a href="http://dpurl.cn/p5sPoKT" target="_blank" rel="noopener">http://dpurl.cn/p5sPoKT</a><br>【2018美团点评技术文章合辑】：<a href="http://dpurl.cn/iLGBtuS" target="_blank" rel="noopener">http://dpurl.cn/iLGBtuS</a></p>
<h2 id="2-2019-2020中国互联网趋势报告"><a href="#2-2019-2020中国互联网趋势报告" class="headerlink" title="2. 2019-2020中国互联网趋势报告"></a>2. <a href="https://mp.weixin.qq.com/s/BXAVztTFIAdJBxdFkPj-Qg" target="_blank" rel="noopener">2019-2020中国互联网趋势报告</a></h2><p>《2019-2020中国互联网趋势报告》，寻找中国互联网的“未饱和”.</p>
<p>在“更大的中国”这个范畴里，我们可能都是陌生人。</p>
<p>有些事情向上，有些事情向下。有些事情正在饱和，有些事情正在生长。</p>
<p>2019年到2020年，当我们期望于科技和互联网时，我们该期望些什么？</p>
<p>如果“饱和”，已经成为一种实实在在的压力，那么，中国互联网的“未饱和”部分，到底在哪里？</p>
<p>本报告由腾讯新闻和企鹅智库联合出品，2019年1月。</p>
<h2 id="3-HTTP2-amp-HTTP3"><a href="#3-HTTP2-amp-HTTP3" class="headerlink" title="3. HTTP2 &amp; HTTP3"></a>3. HTTP2 &amp; HTTP3</h2><p>这两部分详细讲解了 http2 和 http3 ，对于理解 http 是很好的资料。</p>
<p>HTTP3 详解 <a href="https://daniel.haxx.se/http3-explained/" target="_blank" rel="noopener">https://daniel.haxx.se/http3-explained/</a> </p>
<p>HTTP2 详解 <a href="https://daniel.haxx.se/http2/" target="_blank" rel="noopener">https://daniel.haxx.se/http2/</a></p>
<p>HTTP3 中文 gitbook ：<a href="https://http3-explained.haxx.se/zh/" target="_blank" rel="noopener">https://http3-explained.haxx.se/zh/</a></p>
<p>HTTP2 中文 gitbook ：<a href="https://http2-explained.haxx.se/content/zh/" target="_blank" rel="noopener">https://http2-explained.haxx.se/content/zh/</a></p>
<p>Curl 作者 Daniel Stenberg 出品</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
  </entry>
  <entry>
    <title>第05周分享</title>
    <url>/weekly/weekly05.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>


<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="1-Learn-Go-with-tests"><a href="#1-Learn-Go-with-tests" class="headerlink" title="1. Learn Go with tests"></a>1. <a href="https://studygolang.gitbook.io/learn-go-with-tests" target="_blank" rel="noopener">Learn Go with tests</a></h2><p>Go 教程，基于 TDD （Test Driven Development）的 Go 教程。一边学 Go ，一边还体验了 TDD。体验一下 TDD 还是不错的，强迫自己可以捋清楚需求，而且测试用例完备，对写出的代码也比较有信心，唯一的缺点就是代码量偏大。</p>
<p>深度解读 TDD <a href="https://www.jianshu.com/p/62f16cd4fef3" target="_blank" rel="noopener">https://www.jianshu.com/p/62f16cd4fef3</a></p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-微软对联"><a href="#1-微软对联" class="headerlink" title="1. 微软对联"></a>1. <a href="http://duilian.msra.cn/app/couplet.aspx" target="_blank" rel="noopener">微软对联</a></h2><p>微软对联是由微软亚洲研究院自然语言计算组研发的计算机自动对联系统。 首先用户给定上联，然后系统自动提供若干下联供用户选择， 用户可以通过交互手段优选字词来生成满意的下联；当确定一副对联后还可以生成若干四字横批供用户参考。 目前本系统可处理十字以下的对联。</p>
<h2 id="2-绝句"><a href="#2-绝句" class="headerlink" title="2. 绝句"></a>2. <a href="http://duilian.msra.cn/jueju/" target="_blank" rel="noopener">绝句</a></h2><p>微软绝句是由微软亚洲研究院自然语言计算组研发的计算机自动写诗系统。 首先用户选择一些关键词，系统根据用户确定的关键词生成第一句，用户可以手动选择第一句，也可以自行输入；接下来，用户点击第二句的输入框，系统根据第一句自动生成第二句；同理，第三句和第四句的生成也考虑已生成前文的信息。当四句诗生成结束后，用户可以点击“写诗题”输入诗题和姓名，之后可以根据诗歌内容进行诗配画并保存或分享。</p>
<p>当前绝句生成使用的主题词来源于清代学者刘文蔚创作的《诗学含英》一书，包含了二级分类，收集了《声韵启蒙》、《训蒙骈句》、《笠翁对韵》三本训练对偶技巧和声韵格律的工具书，包含若干主题，例如天文、时令、节序、地舆、楼馆、人伦、文学、游眺、饮食、器用、花草、竹木、飞禽、走兽等，对常见的古体诗有很好的覆盖。</p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-Golang-Example"><a href="#1-Golang-Example" class="headerlink" title="1. Golang Example"></a>1. <a href="https://golangexample.com" target="_blank" rel="noopener">Golang Example</a></h2><p>该网站收集 Go 语言的各种应用实例。</p>
<h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><p>一年又过去了，送走了 2018，迎来了 2019 。生活上 2018 年有太多的坎坷和磨难，希望 2019 可以顺利一些。</p>
<p>2019 年有太多的事情想做，回家了好好规划规划，努力一下吧。</p>
<p>年底很多人喜欢写总结，可是我不知道该总结什么。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
      <tags>
        <tag>Newsletter</tag>
      </tags>
  </entry>
  <entry>
    <title>CUDA 10.0 安装包浅析</title>
    <url>/GPU/cuda-introduction.html</url>
    <content><![CDATA[<p>本文基于最新的 CUDA 10.0 CentOS 7 操作系统的 run 文件安装包来进行解压分析，看看里边都有些什么内容。有些可能遇到的问题放在最后的 FAQ 里了。CUDA 9.x 会和10.0 有一些差别，不过大部分还是比较接近的。</p>
<p>CUDA 的源代码在 <a href="https://developer.download.nvidia.cn/compute/cuda/opensource/10.0.130/" target="_blank" rel="noopener">https://developer.download.nvidia.cn/compute/cuda/opensource/10.0.130/</a></p>
<a id="more"></a>


<p>这里有安装指导  <a href="https://developer.download.nvidia.cn/compute/cuda/10.0/Prod/docs/sidebar/CUDA_Installation_Guide_Linux.pdf" target="_blank" rel="noopener">https://developer.download.nvidia.cn/compute/cuda/10.0/Prod/docs/sidebar/CUDA_Installation_Guide_Linux.pdf</a></p>
<p>有快速开始的指导 <a href="https://developer.download.nvidia.cn/compute/cuda/10.0/Prod/docs/sidebar/CUDA_Quick_Start_Guide.pdf" target="_blank" rel="noopener">https://developer.download.nvidia.cn/compute/cuda/10.0/Prod/docs/sidebar/CUDA_Quick_Start_Guide.pdf</a></p>
<h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><p>首先要下载安装包，我们下载CUDA 10.0 CentOS 7 的 run 文件安装包，其次我们使用 noexec 参数进行解压，操作如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda_10.0.130_410.48_linux</span><br><span class="line">sh cuda_10.0.130_410.48_linux --noexec --target v10.0</span><br></pre></td></tr></table></figure>

<p>意思是不运行安装脚本，把 cuda_10.0.130_410.48_linux.run解压到v10.0目录。</p>
<blockquote>
<p>下载地址是从官网拷贝下来的，不知道为什么没有.run 的后缀，不过是个 run 包无疑。</p>
</blockquote>
<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>我们进入的解压的目录里看看有什么</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@cuda ~]# cd v10.0</span><br><span class="line">[root@cuda v10.0]# ll -h</span><br><span class="line">总用量 72K</span><br><span class="line">-rwxr-xr-x 1 root root  45K 9月  13 05:44 cuda-installer.pl</span><br><span class="line">-r-xr-xr-x 1 root root  13K 9月  13 05:44 InstallUtils.pm</span><br><span class="line">drwxrwxr-x 3 root root  196 1月  28 18:32 run_files</span><br><span class="line">-r-xr-xr-x 1 root root 7.6K 9月  13 05:44 uninstall_cuda.pl</span><br><span class="line">[root@cuda v10.0]#</span><br></pre></td></tr></table></figure>

<p>从上边的输出来看，解压以后最先看到的就是这三个文件和一个目录，他们分别是：</p>
<ul>
<li>cuda-installer.pl  perl 语言写的安装脚本</li>
<li>InstallUtils.pm package InstallUtils .</li>
<li>run_files   run 包的所有文件。</li>
<li>uninstall_cuda.pl  perl 语言写的卸载脚本，安装以后可以使用安装包来卸载已经安装好的 CUDA。</li>
</ul>
<p>我们接下来看一下 run_files 里有什么？</p>
<p>执行 ls 命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@172-18-12-25 run_files]# ll -h</span><br><span class="line">总用量 1.9G</span><br><span class="line">-rwxrwxr-x 1 root root 1.8G 9月  13 05:44 cuda-linux.10.0.130-24817639.run</span><br><span class="line">-rwxrwxr-x 1 root root  83M 9月  13 05:44 cuda-samples.10.0.130-24817639-linux.run</span><br><span class="line">-r--r--r-- 1 root root  63K 9月  13 05:44 EULA.txt</span><br><span class="line">-r-xr-xr-x 1 root root 444K 9月  13 05:44 getpass</span><br><span class="line">-rwxr-xr-x 1 root root 102M 9月  13 05:44 NVIDIA-Linux-x86_64-410.48.run</span><br><span class="line">-r--r--r-- 1 root root  185 9月  13 05:44 pc_template.pc</span><br><span class="line">[root@172-18-12-25 run_files]#</span><br></pre></td></tr></table></figure>

<p>可以看到这些文件</p>
<ul>
<li>cuda-linux.10.0.130-24817639.run  CUDA 安装包</li>
<li>cuda-samples.10.0.130-24817639-linux.run  CUDA sample 例子的安装包</li>
<li>EULA.txt  End User License Agreement 终端用户 license 协议</li>
<li>getpass  一个二进制文件，用来获取一个口令</li>
<li>NVIDIA-Linux-x86_64-410.48.run  显卡驱动安装包</li>
<li>pc_template.pc pc 模板，用来显示一些基本的信息，内容如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#pc_template.pc</span><br><span class="line">cudaroot=$(CUDAPATH)</span><br><span class="line">libdir=$(LIBDIR)</span><br><span class="line">includedir=$&#123;cudaroot&#125;/include</span><br><span class="line"></span><br><span class="line">Name: $(NAME)</span><br><span class="line">Description: $(DESCRIPTION)</span><br><span class="line">Version: $(VERSION)</span><br><span class="line">Libs: -L$&#123;libdir&#125; -l$(NAME)</span><br><span class="line">Cflags: -I$&#123;includedir&#125;</span><br></pre></td></tr></table></figure>

<h1 id="CUDA-安装包"><a href="#CUDA-安装包" class="headerlink" title="CUDA 安装包"></a>CUDA 安装包</h1><p>我们先把 cuda-samples.10.0.130-24817639-linux.run 解压，然后看看里边有什么内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@172-18-12-25 run_files]# sh cuda-linux.10.0.130-24817639.run --noexec --target cuda-linux</span><br><span class="line">[root@172-18-12-25 run_files]# cd cuda-linux</span><br><span class="line">[root@172-18-12-25 cuda-linux]# ll -h</span><br><span class="line">总用量 144K</span><br><span class="line">drwxrwxr-x 3 root root  331 9月  13 05:18 bin</span><br><span class="line">-rw-rw-r-- 1 root root 8.7K 9月  13 05:18 CUDA_Toolkit_Release_Notes.txt</span><br><span class="line">drwxrwxr-x 5 root root   40 9月  13 05:18 doc</span><br><span class="line">-rw-rw-r-- 1 root root  63K 9月  13 05:18 EULA.txt</span><br><span class="line">drwxrwxr-x 5 root root   89 9月  13 05:18 extras</span><br><span class="line">drwxrwxr-x 6 root root 8.0K 9月  13 05:18 include</span><br><span class="line">-rwxr-xr-x 1 root root  19K 9月  13 05:18 install-linux.pl</span><br><span class="line">-r-xr-xr-x 1 root root  13K 9月  13 05:18 InstallUtils.pm</span><br><span class="line">drwxrwxr-x 5 root root  185 9月  13 05:18 jre</span><br><span class="line">drwxrwxr-x 3 root root 4.0K 9月  13 05:18 lib64</span><br><span class="line">drwxrwxr-x 8 root root  226 9月  13 05:18 libnsight</span><br><span class="line">drwxrwxr-x 7 root root  209 9月  13 05:18 libnvvp</span><br><span class="line">drwxrwxr-x 8 root root  160 9月  13 05:18 NsightCompute-1.0</span><br><span class="line">drwxrwxr-x 2 root root   53 9月  13 05:18 nsightee_plugins</span><br><span class="line">drwxrwxr-x 3 root root   21 9月  13 05:18 nvml</span><br><span class="line">drwxrwxr-x 7 root root   85 9月  13 05:18 nvvm</span><br><span class="line">drwxrwxr-x 3 root root   17 9月  13 05:18 share</span><br><span class="line">drwxrwxr-x 2 root root  201 9月  13 05:18 src</span><br><span class="line">drwxrwxr-x 2 root root   43 9月  13 05:18 tools</span><br><span class="line">-r-xr-xr-x 1 root root 7.6K 9月  13 05:18 uninstall_cuda.pl</span><br><span class="line">-rw-rw-r-- 1 root root   22 9月  13 05:18 version.txt</span><br><span class="line">[root@172-18-12-25 cuda-linux]#</span><br></pre></td></tr></table></figure>

<ul>
<li>bin     编译好的命令                        </li>
<li>doc     文档</li>
<li>extras  cuda gdb 源码以及一些 demo 套件，包括 bandwidthTest、busGrind、deviceQuery、nbody、oceanFFT、randomFog、vectorAdd 。</li>
<li>install-linux.pl  perl 写的安装脚本</li>
<li>jre   Oracle java 的 jre， <a href="http://java.com/licensereadme" target="_blank" rel="noopener">http://java.com/licensereadme</a></li>
<li>libnsight  nsight 的 lib 库</li>
<li>NsightCompute-1.0  用于CUDA应用程序的交互式内核分析器。</li>
<li>nvml  一个简单的示例程序，演示如何构建一个 NVML 客户端。</li>
<li>share  里边有一个 gbd 目录</li>
<li>tools  有一个计算器</li>
<li>version.txt  版本信息</li>
<li>CUDA_Toolkit_Release_Notes.txt  CUDA 的 Release notes</li>
<li>EULA.txt  End User License Agreemen 终端用户 license 协议</li>
<li>include  各种 .h 文件</li>
<li>InstallUtils.pm   package InstallUtils</li>
<li>lib64  库文件</li>
<li>libnvvp   nvvp 库文件</li>
<li>nsightee_plugins   nsightee 的插件</li>
<li>nvvm  nvvm ，bin 目录下有一个 cicc 的命令</li>
<li>src   源码， 有一些 .h 结尾的文件</li>
<li>uninstall_cuda.pl  perl 写的卸载脚本</li>
</ul>
<p>CUDA 自身的内容大概就是这样，有需要的可以自行探索。</p>
<h1 id="CUDA-sample-例子的安装包"><a href="#CUDA-sample-例子的安装包" class="headerlink" title="CUDA sample 例子的安装包"></a>CUDA sample 例子的安装包</h1><p>我们先把 cuda-samples.10.0.130-24817639-linux.run 解压，然后看看里边有什么内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@172-18-12-25 run_files]# sh cuda-samples.10.0.130-24817639-linux.run</span><br><span class="line"> --noexec --target cuda-samples</span><br><span class="line">[root@172-18-12-25 run_files]# cd cuda-samples</span><br><span class="line">[root@172-18-12-25 cuda-samples]# ll -h</span><br><span class="line">总用量 36K</span><br><span class="line">-r-xr-xr-x  1 root root  784 9月  13 05:18 cuda-install-samples-10.0.sh</span><br><span class="line">-rwxr-xr-x  1 root root 7.3K 9月  13 05:18 install-sdk-linux.pl</span><br><span class="line">-r-xr-xr-x  1 root root  13K 9月  13 05:18 InstallUtils.pm</span><br><span class="line">drwxrwxr-x 11 root root  201 9月  13 05:18 samples</span><br><span class="line">-r-xr-xr-x  1 root root 7.6K 9月  13 05:18 uninstall_cuda.pl</span><br><span class="line">[root@172-18-12-25 cuda-samples]# cd samples</span><br><span class="line">[root@172-18-12-25 samples]# ll -h</span><br><span class="line">总用量 84K</span><br><span class="line">drwxrwxr-x 51 root root 4.0K 9月  13 05:18 0_Simple</span><br><span class="line">drwxrwxr-x  8 root root  145 9月  13 05:18 1_Utilities</span><br><span class="line">drwxrwxr-x 13 root root  241 9月  13 05:18 2_Graphics</span><br><span class="line">drwxrwxr-x 22 root root 4.0K 9月  13 05:18 3_Imaging</span><br><span class="line">drwxrwxr-x 10 root root  209 9月  13 05:18 4_Finance</span><br><span class="line">drwxrwxr-x 10 root root  150 9月  13 05:18 5_Simulations</span><br><span class="line">drwxrwxr-x 34 root root 4.0K 9月  13 05:18 6_Advanced</span><br><span class="line">drwxrwxr-x 38 root root 4.0K 9月  13 05:18 7_CUDALibraries</span><br><span class="line">drwxrwxr-x  6 root root   71 9月  13 05:18 common</span><br><span class="line">-rw-rw-r--  1 root root  63K 9月  13 05:18 EULA.txt</span><br><span class="line">-rw-rw-r--  1 root root 2.6K 9月  13 05:18 Makefile</span><br><span class="line">[root@172-18-12-25 samples]# cd ..</span><br></pre></td></tr></table></figure>

<p>我们可以看到第一级目录有如下文件：</p>
<ul>
<li>cuda-install-samples-10.0.sh  bash 写的 CUDA sample 安装脚本</li>
<li>install-sdk-linux.pl   perl 写的 SDK 安装脚本</li>
<li>InstallUtils.pm  package InstallUtils .</li>
<li>samples  sample 实例目录</li>
<li>uninstall_cuda.pl  perl 写的卸载脚本</li>
</ul>
<p>接下来看一下 samples 里有什么？</p>
<ul>
<li>0_Simple  </li>
<li>1_Utilities  </li>
<li>2_Graphics  </li>
<li>3_Imaging  </li>
<li>4_Finance  </li>
<li>5_Simulations  </li>
<li>6_Advanced  </li>
<li>7_CUDALibraries  </li>
</ul>
<p>上边这8个是 CUDA sample 的内容，主要用来做两件事情，一是举例某个接口或者某个功能该如何使用，二是用来验证某项功能是正常的。 个别项目可以用来测试性能。</p>
<ul>
<li>common  0-7里的源码编译要用到的，很重要.</li>
<li>EULA.txt  End User License Agreement 终端用户 license 协议</li>
<li>Makefile 编译的 Makefile 文件</li>
</ul>
<h1 id="显卡驱动安装包"><a href="#显卡驱动安装包" class="headerlink" title="显卡驱动安装包"></a>显卡驱动安装包</h1><p>首先解压 NVIDIA-Linux-x86_64-410.48.run 安装包，这次 noexec 这个参数不起作用了，查看了一下帮助，要求使用 -x 来进行解压 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@172-18-12-25 run_files]# sh NVIDIA-Linux-x86_64-410.48.run -x --target nvidia-linux</span><br><span class="line">Creating directory nvidia-linux</span><br><span class="line">Verifying archive integrity... OK</span><br><span class="line">Uncompressing NVIDIA Accelerated Graphics Driver for Linux-x86_64 410.48.................................................................</span><br><span class="line">[root@172-18-12-25 run_files]# cd nvidia-linux/</span><br><span class="line">[root@172-18-12-25 nvidia-linux]# ls</span><br><span class="line">10_nvidia.json                 libGL.la                        libnvidia-fatbinaryloader.so.410.48  libnvoptix.so.410.48                                  nvidia-cuda-mps-server            nvidia-settings.1.gz</span><br><span class="line">10_nvidia_wayland.json         libGL.so.1.7.0                  libnvidia-fbc.so.410.48              libOpenCL.so.1.0.0                                    nvidia-debugdump                  nvidia-settings.desktop</span><br><span class="line">32                             libGL.so.410.48                 libnvidia-glcore.so.410.48           libOpenGL.so.0                                        nvidia-drm-outputclass.conf       nvidia-settings.png</span><br><span class="line">html                           libglvnd_install_checker        libnvidia-glsi.so.410.48             libvdpau_nvidia.so.410.48                             nvidia_drv.so                     nvidia-smi</span><br><span class="line">kernel                         libGLX_nvidia.so.410.48         libnvidia-glvkspirv.so.410.48        LICENSE                                               nvidia.icd                        nvidia-smi.1.gz</span><br><span class="line">libcuda.so.410.48              libglxserver_nvidia.so.410.48   libnvidia-gtk2.so.410.48             makeself-help-script.sh                               nvidia_icd.json.template          nvidia-xconfig</span><br><span class="line">libEGL_nvidia.so.410.48        libGLX.so.0                     libnvidia-gtk3.so.410.48             makeself.sh                                           nvidia-installer                  nvidia-xconfig.1.gz</span><br><span class="line">libEGL.so.1.1.0                libnvcuvid.so.410.48            libnvidia-ifr.so.410.48              mkprecompiled                                         nvidia-installer.1.gz             pkg-history.txt</span><br><span class="line">libEGL.so.410.48               libnvidia-cbl.so.410.48         libnvidia-ml.so.410.48               nvidia-application-profiles-410.48-key-documentation  nvidia-modprobe                   README.txt</span><br><span class="line">libGLdispatch.so.0             libnvidia-cfg.so.410.48         libnvidia-opencl.so.410.48           nvidia-application-profiles-410.48-rc                 nvidia-modprobe.1.gz              tls</span><br><span class="line">libGLESv1_CM_nvidia.so.410.48  libnvidia-compiler.so.410.48    libnvidia-ptxjitcompiler.so.410.48   nvidia-bug-report.sh                                  nvidia-persistenced               tls_test</span><br><span class="line">libGLESv1_CM.so.1.2.0          libnvidia-eglcore.so.410.48     libnvidia-rtcore.so.410.48           NVIDIA_Changelog                                      nvidia-persistenced.1.gz          tls_test_dso.so</span><br><span class="line">libGLESv2_nvidia.so.410.48     libnvidia-egl-wayland.so.1.1.0  libnvidia-tls.so.410.48              nvidia-cuda-mps-control                               nvidia-persistenced-init.tar.bz2</span><br><span class="line">libGLESv2.so.2.1.0             libnvidia-encode.so.410.48      libnvidia-wfb.so.410.48              nvidia-cuda-mps-control.1.gz                          nvidia-settings</span><br><span class="line">[root@172-18-12-25 nvidia-linux]#</span><br></pre></td></tr></table></figure>

<p>可以看到解压以后都是安装驱动需要的库文件 。</p>
<h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><blockquote>
<p>某些情况下安装 run 包会提示 Can’t locate InstallUtils.pm ，报错提示如下</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Can&apos;t locate InstallUtils.pm in @INC (you may need to install the InstallUtils module) (@INC contains: /etc/perl /usr/local/lib/x86_64-linux-gnu/perl/5.26.1 /usr/local/share/perl/5.26.1 /usr/lib/x86_64-linux-gnu/perl5/5.26 /usr/share/perl5 /usr/lib/x86_64-linux-gnu/perl/5.26 /usr/share/perl/5.26 /usr/local/lib/site_perl /usr/lib/x86_64-linux-gnu/perl-base) at ./install-sdk-linux.pl line 6.</span><br><span class="line"> </span><br><span class="line">BEGIN failed--compilation aborted at ./install-sdk-linux.pl line 6.</span><br><span class="line"> </span><br><span class="line">&apos;uninstall_cuda_8.0.pl&apos; -&gt; &apos;/usr/local/cuda-8.0/bin/uninstall_cuda_8.0.pl&apos;</span><br></pre></td></tr></table></figure>

<p>出现上述问题的原因就是 InstallUtils.pm 文件没有复制到指定的位置，解决方案也很简单安装本文最开始的使用 noexec 将对应的 run 包解压，拷贝 InstallUtils.pm 到 @INC contains 的某个目录下就可以。</p>
<p>例如 可以拷贝到 perl 的目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp InstallUtils.pm /usr/share/perl5</span><br></pre></td></tr></table></figure>

<p>在重新执行 run 包即可。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>GPU</category>
      </categories>
      <tags>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.7.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-7-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.7.0" target="_blank" rel="noopener">2.7.0</a> 现在(2019.01.28)已经发布，在上个月的 <a href="http://erdong.site/Prometheus/New-Features/New-Features-in-Prometheus-2-6-0.html">2.6.0</a> 之后又进行了一些修正和改进。</p>
<a id="more"></a>

<p>首先，在 2.6.0 中对的 Docker 文件更改被还原回 2.5.0 中的设置，因为它产生了意外的影响。如果您已经更新了 2.6.0 更改的设置，那么您可能希望使用 2.7.0 进行恢复。</p>
<p>TSDB 为 blocks 添加了实验性 size-based 的保留，time-based 的保留也适用。我还对某些选择器进行了性能改进，虽然这并不是普罗米修斯的技术性变化，但 tsdbutil 现在有了一个 analyze 子命令，可以帮助确定哪些内容占用了空间并造成了混乱。</p>
<p>PromQL 添加了子查询支持，因此对于特殊查询，您不再需要遵循 PromQL 中的组合范围向量函数。除了其他每个规则组指标外，现在还有一个<code>rule_group_rules_loaded</code>指标。</p>
<p>对于服务发现，Azure现在可以进行托管身份验证，还可以获得租户和订阅ID元数据。OpenStack现在支持应用程序凭据。Consul added service 标记地址元数据 ，Consul gained servic 标记地址元数据 。</p>
<p>在API/UI方面，现在可以控制允许哪些CORS源。</p>
<p>还有许多改进、bug修复和其他更改，可以查看 <a href="https://github.com/prometheus/prometheus/releases/tag/v2.7.0" target="_blank" rel="noopener">release notes</a> 来获取更多的信息。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-7-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-7-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机中遇到的单位该怎么换算</title>
    <url>/linux/system/computer-unit-conversion.html</url>
    <content><![CDATA[<p>在计算机行业经常进行单位换算，这些单位到底该怎么换算，通过本文来说明一下。</p>
<a id="more"></a>


<p>** bit **</p>
<p>bit 是字长，意思是一个字所包含二进制输的位数，一个 bit 存放一位二进制数，即 0 或 1，最小的存储单位，简写为 b 。字长越长，运算速度越快，计算精度越高</p>
<p>** byte **</p>
<p>byte 是字节，计算机中处理信息的最小单位，以八位二进制信息，简写为 B 。</p>
<p>byte 和 bit 之间的换算是 8 ，原因是一个字节需要 8个字长</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 byte = 8 bit</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">1 B = 8 b</span><br></pre></td></tr></table></figure>

<p>** K M G T P E 是什么**</p>
<p>K M G T P E 等是国际单位制(SI)中所规定的词头(prefix)。词头加在SI单位(非SI单位也可以使用并通常遵循此用法)之前表示10的整数幂次，譬如k表示10^3=1000，M表示10^6=1,000,000，G则表示10^9=1,000,000,000. </p>
<p>举些例子，1kg=1000g，1km=1000m, 都是大家所熟悉的用法 。</p>
<p>那我们接下来看这些单位怎么换算。</p>
<h2 id="CPU-主频单位换算"><a href="#CPU-主频单位换算" class="headerlink" title="CPU 主频单位换算"></a>CPU 主频单位换算</h2><p>在计算机的使用过程中，我们会经常用到 CPU 的主频，那么主频是怎么换算呢？</p>
<p>所谓CPU的主频，就是说这块CPU的工作频率，也就是说这块CPU是在以哪个频率在进行运算处理。CPU的工作频率单位是以Hz（赫）计量，随着科技发展，CPU的制造工艺越来越先进，其主频也得到大幅度提升。现今，虽然CPU主频的计量单位Hz（赫）没变，但我们往往都会在单位前面加上M，甚至G，也就是我们常说的主频MHz（兆赫）和GHz（吉赫）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 GHz = 1000 MHz</span><br></pre></td></tr></table></figure>

<p>对于 CPU 来说，除了主频以外还有更重要的一个参数叫做浮点性能，有单精度和双精度，个别情况下会用到半精度，他们的单位是 FLOPS，那么浮点性能的单位怎么换算呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 TFLOPS = 1000 GFLOPS</span><br></pre></td></tr></table></figure>

<p>相邻两个单位之间的进制 1000 。</p>
<h2 id="速率单位换算"><a href="#速率单位换算" class="headerlink" title="速率单位换算"></a>速率单位换算</h2><p>我们在下载文件或者拷贝数据时经常用到一个单位 Mbps 来描述数据拷贝的快慢或者网络带宽的大小，这个 Mbps 的意思是 Mb 每秒，及在一秒内可以传输的数据量为多少 Mb ，p 的 per 的简写。</p>
<p>我们在一些提供下载功能的软件里经常可以看到下载是数据是 MB/s ，那么这个单位和上边的 Mbps 有什么区别呢？</p>
<p>区别有两点</p>
<ul>
<li>表示方法不统一。也就是说，二者同样的表示方式应该是 Mbps 和 MBps 或者 Mb/s 和 MB/s 。</li>
<li>b 和 B 的区别。这个我们在最开始的时候说过了，一个是字节一个是字长。</li>
</ul>
<p>那么他们应该这么换算呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 MB/s = 8Mb/s</span><br><span class="line"></span><br><span class="line">1 GB/s = 1024MB/s = 8192 Mb/s</span><br><span class="line">1 Gb/s = 1024Gb/s</span><br></pre></td></tr></table></figure>

<p>这样就清楚了，我们一般口头说的网络带宽的单位一般是 Mb/s , 下载文件和拷贝文件的单位一般是 MB/s ， 下次我们就可以自己换算一下了。</p>
<h2 id="存储单位换算"><a href="#存储单位换算" class="headerlink" title="存储单位换算"></a>存储单位换算</h2><p>我们经常看到的存储单位有 KB、MB、GB、TB、PB 等，这些单位在计算机操作系统内的换算情况是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 PB = 1024 TB</span><br><span class="line">1 TB = 1024 GB</span><br><span class="line">1 GB = 1024 MB</span><br><span class="line">1 MB = 1024 KB</span><br><span class="line">1 KB = 1024 B</span><br></pre></td></tr></table></figure>

<p>在硬盘厂商的宣传里是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 PB = 1000 TB</span><br><span class="line">1 TB = 1000 GB</span><br><span class="line">1 GB = 1000 MB</span><br><span class="line">1 MB = 1000 KB</span><br><span class="line">1 KB = 1000 B</span><br></pre></td></tr></table></figure>

<p>造成这种差异的原因是，起先计算机的存储容量低到可怜，几千个 Byte 算是很奢侈的容量，由于计算机的二进制特性，这个容量通常是 2 的整数次幂，用起来不方便。IT工程师们发现 2^10=1024 与 k=10^3 接近，相差不过 2%。于是就有人偷懒以 1kB 表示 2^10B 也就是1024B，初看起来一切都好，2% 的差距并不大，时间长了大家也就接受了。</p>
<p>但问题在于，随着计算机的存储容量依摩尔定律(Moore’s Law)以指数增长，这个差值会越来越大。1kB与1KiB(稍后解释)相差不过2%，1MB 与 1MiB 相差近 5%，1GB 与 1GiB 相差7%，1TB 和 1TiB 足足差了10%。可以预见，随着硬盘容量的进一步扩大，这个差别会越来越大。</p>
<p>时至今日，在IT业中已经形成了这种混乱的局面，为了解决这个混乱的局面，还是有人做过努力。早在 1998 年 SI 手册中明确要求 SI 词头不应用于 2 的幂次。而同年国际电工委员会(IEC)推出了一套适用于2进制的词头，并且得到了 IEEE 的批准 (IEEE 1541)——不过这还是一个试用的标准。简单来说就是在 SI 词头后加”i”。比如说 K 就成了 Ki，M 成了 Mi，G 成了 Gi。发音把原来SI词头的第二个音节换成[bi]。譬如Ki念 [kibi]，Mi念[mebi],Gi则是[Gibi]等等依此类推。这样，kMG 之类的的 SI 词头回复原来的含义，表示2幂次重任就交给了 Ki= 2^10=1024，Mi=2^20=1048576，Gi=2^30=1073741824 等等。这么一来，当表述一台电脑是3.15GHz CPU/2GiB内存/320GB硬盘时，G/Gi的含义就不存在歧义。</p>
<p>很简明易懂的解决方案，然而很不幸似乎买 IEC 帐的着实不多，目前支持IEC词头的软件屈指可数。更糟糕的是 1G=1024M 这种约定俗成的错误观念已经根深蒂固。</p>
<h2 id="进制的选择依据"><a href="#进制的选择依据" class="headerlink" title="进制的选择依据"></a>进制的选择依据</h2><p>看了上边各项单位的换算，不知道大家有没有发现什么规律。</p>
<p>在计算机里相邻两个单位之间的换算有 1000 和 1024 ，那么什么时候是1000，什么时候是 1024 ？</p>
<p>其实，一般的换算按照国际单位制(SI) 的规定，相邻两个单位之间的换算是 1000 。</p>
<p>那么什么时候用 1024 呢？</p>
<p>那就是单位里含有 byte 或者 bit 的时候，用 1024 来进行换算。其实按照 IEC 的规定，使用 Mi 和 M 进行区分就不会有这样的歧义和疑惑了。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>system</category>
      </categories>
      <tags>
        <tag>unit</tag>
        <tag>conversion</tag>
      </tags>
  </entry>
  <entry>
    <title>第04周分享</title>
    <url>/weekly/weekly04.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>




<h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><h2 id="1-InfluxDB-2-0"><a href="#1-InfluxDB-2-0" class="headerlink" title="1. InfluxDB 2.0"></a>1. <a href="https://v2.docs.influxdata.com/v2.0/get-started/" target="_blank" rel="noopener">InfluxDB 2.0</a></h2><p>Infoq 对该事件的报到： <a href="https://www.infoq.cn/article/662MdX6QNzcL-5D4axKb" target="_blank" rel="noopener">https://www.infoq.cn/article/662MdX6QNzcL-5D4axKb</a></p>
<p>InfluxDB 2.0 alpha 发布，更像 Prometheus 了。在2.0 版本中支持 Prometheus 格式，支持 PromQL 语言查询。</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-wondershaper"><a href="#1-wondershaper" class="headerlink" title="1. wondershaper"></a>1. <a href="https://github.com/magnific0/wondershaper" target="_blank" rel="noopener">wondershaper</a></h2><p>一个命令行下限制本地网络接口的传入和传出流量的工具，及其简单易用，本质是一个 shell 脚本，通过 iproute 的 tc 命令来实现，建议从 github 上下载最新版进行使用，系统和仓库里带的老版本使用效果上比新版本差一些。</p>
<p><a href="https://www.linuxidc.com/Linux/2018-10/154645.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2018-10/154645.htm</a></p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-晶格化图片"><a href="#1-晶格化图片" class="headerlink" title="1. 晶格化图片"></a>1. <a href="http://www.conceptfarm.ca/2013/portfolio/image-triangulator/" target="_blank" rel="noopener">晶格化图片</a></h2><p>手机里自带很多拍照特效，如果觉得不合适，那么这个晶格化特效一定会让你眼前一亮，做微信头像，做照片墙都非常不错。</p>
<p>彩色几何色块风格的设计正式名称叫做 Low Poly 3D，翻译过来叫做低面设计或低多边形设计。</p>
<p>低多边形最初起源于 3D 建模，通常设计师会运用大量的多边形来让 3D 模型 (譬如人物) 的线条更圆润自然，看起来更接近真实。然而，低多边形设计却是反道而行，它使用少量的多边形来表现出棱角分明的矢量晶格化艺术风格，让图片看起来有点像折纸工艺品，极具简约的现代感……</p>
<p>搜索 image triangulator 会有很多相同风格的图片。官方在contact 里的图片如下：</p>
<p><img src="http://www.conceptfarm.ca/2013/wp-content/uploads/2012/09/PigeonFinal.jpg" alt></p>
<h2 id="2-AutoDraw"><a href="#2-AutoDraw" class="headerlink" title="2. AutoDraw"></a>2. <a href="https://www.autodraw.com" target="_blank" rel="noopener">AutoDraw</a></h2><p>Google 出品，脑洞逆天。AutoDraw 是谷歌推出的深度学习项目，类似一个你画我猜的东西，可以说是业余设计者的福音，你随便画几笔，他就知道你要画什么，还会给你神补全。</p>
<h2 id="3-人工智能图片放大"><a href="#3-人工智能图片放大" class="headerlink" title="3. 人工智能图片放大"></a>3. <a href="http://bigjpg.com" target="_blank" rel="noopener">人工智能图片放大</a></h2><p>使用最新人工智能深度学习技术——深度卷积神经网络（Deep Convolutional Neural Networks, based on waifu2x）。它会将噪点和锯齿的部分进行补充，实现图片的无损放大。<br>动漫、插画图片的放大几乎可以说是完美的。将小图片放大后，无论是色彩、细节、边缘，效果都很出色。同时也兼容普通的照片放大。</p>
<h2 id="4-人工智能抠图"><a href="#4-人工智能抠图" class="headerlink" title="4. 人工智能抠图"></a>4. <a href="https://www.remove.bg" target="_blank" rel="noopener">人工智能抠图</a></h2><p>remove  是一个人工智能抠图工具，尽管现在很多人工智能的应用都是噱头，但是这个抠图工具一定会让你给一个大大的服字！即便是在背景较复杂的图片中，人物也能够被很好地抠出来，废话不说，看效果：</p>
<p><img src="https://www.remove.bg/images/samples/combined/s4.jpg" alt="源站图片，可能比较慢"></p>
<h2 id="5-你真的会高效的在GitHub搜索开源项目吗"><a href="#5-你真的会高效的在GitHub搜索开源项目吗" class="headerlink" title="5. 你真的会高效的在GitHub搜索开源项目吗?"></a>5. <a href="https://zhuanlan.zhihu.com/p/55294261" target="_blank" rel="noopener">你真的会高效的在GitHub搜索开源项目吗?</a></h2><p>本文首发于微信公众号「Tomcat那些事儿」，作者<a href="https://zhuanlan.zhihu.com/p/55294261" target="_blank" rel="noopener">知乎文章链接</a> , CSDN <a href="https://blog.csdn.net/csdnnews/article/details/86570635" target="_blank" rel="noopener">转载链接</a></p>
<p>作者用简单的实例和清晰的文风向大家介绍了如何高效的在 Github 搜索开源项目，提高大家的搜索效率。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
  </entry>
  <entry>
    <title>IB 速率 SDR DDR QDR FDR EDR 缩写介绍</title>
    <url>/tools/ib-speed.html</url>
    <content><![CDATA[<p>InfiniBand（直译为“无限带宽”技术，缩写为IB）是一个用于高性能计算的计算机网络通信标准，它具有极高的吞吐量和极低的延迟，用于计算机与计算机之间的数据互连。InfiniBand也用作服务器与存储系统之间的直接或交换互连，以及存储系统之间的互连。</p>
<a id="more"></a>

<p>Link Speed<br>SDR – Single Data Rate - 2.5Gb/s per lane (10Gb/s for 4x)<br>DDR – Double Data Rate - 5Gb/s per lane (20Gb/s for 4x)<br>QDR – Quad Data Rate - 10Gb/s per lane (40Gb/s for 4x)<br>FDR – Fourteen Data Rate - 14Gb/s per lane (56Gb/s for 4x)<br>EDR – Enhanced Data rate - 25Gb/s per lane (100Gb/s for 4x)</p>
<p>关于 IB 的介绍可以查看该文档 </p>
<p><a href="https://hpc.uiowa.edu/sites/hpc.uiowa.edu/files/Infiniband%20Overview.pdf" target="_blank" rel="noopener">Infiniband Overview</a></p>
<p><a href="https://mp.weixin.qq.com/s/6ifysnYjZptorr3RBv9ASw" target="_blank" rel="noopener">一文掌握InfiniBand技术和架构</a></p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>ib</tag>
      </tags>
  </entry>
  <entry>
    <title>第03周分享</title>
    <url>/weekly/weekly03.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>


<h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><h2 id="1-ZFS-On-Linux-在-Linux-Kernel-5-0-上陷入了困境……"><a href="#1-ZFS-On-Linux-在-Linux-Kernel-5-0-上陷入了困境……" class="headerlink" title="1. ZFS On Linux 在 Linux Kernel 5.0 上陷入了困境……"></a>1. <a href="https://www.oschina.net/news/103578/zfs-on-linux-5-0-problem" target="_blank" rel="noopener">ZFS On Linux 在 Linux Kernel 5.0 上陷入了困境……</a></h2><p>Linux Kernel 5.0 首个 RC 版已发布，5.0 是一个重要的版本，带来了许多相当吸引人的新功能和改进，但对于那些依赖 ZFS On Linux (ZOL) 的用户，他们可能暂时不会希望尝鲜使用 Linux Kernel 5.0 的候选发布版本。</p>
<h2 id="2-Homebrew-1-9-发布"><a href="#2-Homebrew-1-9-发布" class="headerlink" title="2. Homebrew 1.9 发布"></a>2. <a href="https://www.infoq.cn/article/UjpE7pQTefQCM3dli*Pg" target="_blank" rel="noopener">Homebrew 1.9 发布</a></h2><p>Homebrew 1.9 版本于 1 月 9 日更新，距离 1.8 版本大约两个多月。1.9 版本最大的变化是开始尝试支持 Linux 和 Windows 10 。</p>
<h2 id="3-scp-客户端发现了隐藏-35-年的漏洞"><a href="#3-scp-客户端发现了隐藏-35-年的漏洞" class="headerlink" title="3. scp 客户端发现了隐藏 35 年的漏洞"></a>3. <a href="https://sintonen.fi/advisories/scp-client-multiple-vulnerabilities.txt" target="_blank" rel="noopener">scp 客户端发现了隐藏 35 年的漏洞</a></h2><p>SCP 的客户端发现了漏洞，大家可以检查一下自己常用的工具，升级一下。</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-juicesync"><a href="#1-juicesync" class="headerlink" title="1. juicesync"></a>1. <a href="https://github.com/juicedata/juicesync" target="_blank" rel="noopener">juicesync</a></h2><p>一个多云迁移工具，在多个云之间进行数据迁移的时候可以用到。</p>
<h2 id="2-domcomp"><a href="#2-domcomp" class="headerlink" title="2. domcomp"></a>2. <a href="https://www.domcomp.com" target="_blank" rel="noopener">domcomp</a></h2><p>一个域名比价网站，注册域名的时候对价格比较敏感的话可以对比一下。</p>
<h2 id="3-auth0"><a href="#3-auth0" class="headerlink" title="3. auth0"></a>3. <a href="https://auth0.com/blog/auth0-architecture-running-in-multiple-cloud-providers-and-regions/" target="_blank" rel="noopener">auth0</a></h2><p>Auth0为任何栈上的任何类型(移动、web、本机)的应用程序提供身份验证、授权和单点登录服务。对于绝大多数应用程序来说，身份验证是至关重要的。我们从一开始就设计了Auth0，这样它就可以在任何地方运行:在我们的云上，在您的云上，甚至在您自己的私有基础设施上。</p>
<h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h1><h2 id="1-10年博客的经验"><a href="#1-10年博客的经验" class="headerlink" title="1. 10年博客的经验"></a>1. 10年博客的经验</h2><p>原文<br><a href="https://ferrucc.io/posts/starting-a-blog/" target="_blank" rel="noopener">https://ferrucc.io/posts/starting-a-blog/</a></p>
<p>中文译文<br><a href="https://erdong.site/article/starting-a-blog.html">https://erdong.site/article/starting-a-blog.html</a></p>
<p>作者 Ferruccio 写博客已经超过10年，文中讲述了他在博客网站的经验，还有他的朋友对这件事的建议，对于想要搭建博客的同学很有帮助。</p>
<h2 id="2-收录各种好用的-Mac-软件"><a href="#2-收录各种好用的-Mac-软件" class="headerlink" title="2. 收录各种好用的 Mac 软件"></a>2. 收录各种好用的 Mac 软件</h2><p><a href="https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md" target="_blank" rel="noopener">https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md</a></p>
<p>如果你是一个 macOS 用户，那么各种用途的软件是必不可少的，这个链接里或许可以找到你需要的。</p>
<h2 id="3-The-Two-Types-of-Programmers"><a href="#3-The-Two-Types-of-Programmers" class="headerlink" title="3. The Two Types of Programmers"></a>3. <a href="https://blog.codinghorror.com/the-two-types-of-programmers/?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=website" target="_blank" rel="noopener">The Two Types of Programmers</a></h2><p>2007年的老文章。世界上只有两种类型的程序员：20% 与 80%。所谓 20% 的程序员：用各种开源工具，紧跟最新技术发展。而 80% 的程序员是：编程是份工作，只用微软大礼包或者Java大礼包，不想知道外面的世界。</p>
<p>20% 的程序员不知道有其他 80% 程序员的存在（难道不是每个程序员都用 git？难道不是每个程序员都用 php、pyhon、ruby？都什么年代了，还有人用 .net 或 java？）；同样，80% 程序员也不知道其他 20% 程序员的存在（还有人在下班后去编程做自己的项目？难道不都是用 .net 或 java？）。</p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
  </entry>
  <entry>
    <title>【翻译】10年博客的经验</title>
    <url>/article/starting-a-blog.html</url>
    <content><![CDATA[<p>我21岁，但我写博客已经快10年了。</p>
<p>我就是这样长大的。</p>
<a id="more"></a>


<p>我在互联网上写的东西已经影响了数百万人。我所写的大部分都是意大利语，但我用英语也可以写的很好。我在 Quora [译者注：一个获取和分享知识的地方。它是一个提问的平台，可以与那些提供独特见解和高质量答案的人联系。类似于国内的知乎] 上三个月内达到了40万人的关注。</p>
<p>通过写博客，我有机会周游世界，获得所有大型音乐节(Ultra, Tomorrowland……你能想到的都有)的免费门票，得到专业的宣传，采访我最喜欢的艺术家。</p>
<p>以下是我第一个博客 <a href="http://edmnews.it/" target="_blank" rel="noopener">EDMnews.it</a> ，现在我只能找到这个了，其他的域名过期了。</p>
<p><img src="https://ferrucc.io/starting-a-blog/edmnews-views.png" alt="图片描述"></p>
<p>最后，由于我没有时间写博客了，我的个人兴趣也从 EDM 转移到了这个网站，它也被同化成了EDM，它是一个谷歌的新闻来源，一个月的浏览量超过10万次。</p>
<p>因为我的网站使用 Wordpress，我被迫学习如何编程。如果没有写博客，我就不会是今天的我。</p>
<p>我发现写博客仍然是把你的信息传播出去，结识有趣的人的最好方法。</p>
<h1 id="打开天窗说亮话"><a href="#打开天窗说亮话" class="headerlink" title="打开天窗说亮话"></a><strong>打开天窗说亮话</strong></h1><p>以下是我对博客的全部了解:</p>
<ul>
<li>不要把第一行写得太长让人不想看，没人有时间读你这样的文章</li>
<li>网站的设计并不重要</li>
<li>开始的时候你不需要任何的软件</li>
<li>定义你的受众群体</li>
<li>弄清楚你的受众群体在哪里</li>
<li>为了SEO（Search Engine Optimization，搜索引擎优化）不要写短文章（&gt;2000 words）</li>
<li>一篇研究充分的文章胜过许多平庸的内容</li>
<li>花一半的时间写作，一半的时间推销。</li>
<li>把50%的写作时间花在实际写作上，剩下的时间用来调整、阅读和说明。细节是很重要的。</li>
<li>说出你知道的所有，不要担心你会江郎才尽，你不会的</li>
<li>没有规则，慢慢打造你独特的风格</li>
<li>回到你以前的帖子，把它们链接到新的上去</li>
<li>启动一个 Newsletter</li>
<li>做别人不敢做的事</li>
<li>向别人寻求帮助或提供建议</li>
</ul>
<p>精心制作一些真正能深入读者心灵的永恒的东西是困难的，但值得去做。</p>
<p>大多数时候，当你读一些东西的时候，你已经知道了一切。</p>
<p>10%的情况下，事情是不一样的，你觉得你的头脑中有一个开关打开了，突然看到了不同的东西。</p>
<p>当我找到让我有这种感觉的内容时，我会每天刷新网站的页面，检查我是否错过了一些新内容。像武痴那样疯狂。</p>
<p>这就是我们想要的，例如:</p>
<p>“这很有启发性，它在我的脑海中打开了一个充满可能性的世界。”</p>
<p>“我一直这么想，但没有勇气把它写下来，谢谢你这么做。”</p>
<p>“你的话让我终于明白了X没什么大不了的，谢谢。”</p>
<p>让我们一起来学习如何让这一切发生。</p>
<h1 id="受众人群"><a href="#受众人群" class="headerlink" title="受众人群"></a>受众人群</h1><p>创建博客的第一步是确定谁是你的读者。我认识的大多数人都会跳过这一步，但这很重要。脱口而出一些单词并在社交媒体上分享它们是很容易的。要创作出与你想接触的人产生共鸣的文章，难度要大得多。</p>
<p>为了解释如何做到这一点，我将向您展示我现在是如何为这个个人博客做这件事的。</p>
<p>直到现在，我用这个博客来帮助我思考，但在新的一年里，我决定更认真地对待它。</p>
<p>我的目标是什么?</p>
<p>这是我的个人博客。</p>
<p>它是一个 “个人” 博客并不意味着它是关于我的。</p>
<p>事实上，这意味着我能为你提供什么。</p>
<p>我的第一个实用技巧与此相关:</p>
<p>你博客里的“关于”页面必须是关于你能如何帮助别人，以及人们能从你那里得到什么。然后最终</p>
<p>关于你……</p>
<p>但说实话，没人在乎你，也没人在乎我。</p>
<p>我的受众人群是什么?</p>
<p>如果你要为你的公司创建一个博客，你必须了解你的客户通常是谁，或者哪些客户是你的理想受众并迎合他们。</p>
<p>以下是对我的现实读者的描述:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你的名字是 Vincent，你是一个30岁的多面手，来自法国，你在工作日不会花很长的时间工作。</span><br><span class="line">你花了一些时间远程工作，但现在在美国很稳定。你已经开始了数不清的项目，有些项目是成功的。</span><br><span class="line">你对任何不寻常的东西都感兴趣，你天生就是一个逆向投资者。</span><br><span class="line">你从不回避争论，也从不被冒犯。你并不是真的对退休感兴趣，你更感兴趣的是尝试。</span><br><span class="line">有些人认为你是个混蛋，你一点也不在乎。</span><br></pre></td></tr></table></figure>

<p>一旦你定义了你的受众，你必须<del>弄清楚它是否足够大</del>。</p>
<p>拜托，这是互联网，别担心，它已经足够大了。</p>
<p>事实上，如果它对你来说足够大的话，我会考虑小众化。</p>
<h1 id="名字"><a href="#名字" class="headerlink" title="名字"></a>名字</h1><p>下一步是选择一个名字，这并不重要，只要确定它是你喜欢的，而且它不是太普通或不可能记住。不要在这上面花超过一天的时间，一旦你找到了一个名字，在确定下来之前，至少要睡上一晚。</p>
<p>在我的例子中，我选择了我的名字 Ferruccio 作为域名，因为我的名字非常罕见，而且我已经拥有了 ferrucc.io 域名。</p>
<p>不利的一面是，美国人不知道该怎么说，但我对此没有意见。这当然比某些印度名字更容易记住。</p>
<h1 id="风格"><a href="#风格" class="headerlink" title="风格"></a>风格</h1><p>你博客的风格，比如它的外观，在一开始并不重要。</p>
<p>另一方面，你的写作风格会带来很大的不同。</p>
<p>根据你的听众是谁，你必须调整谈话的语气。</p>
<p>例如，当我选择一个比我年长、经验丰富的人作为目标受众时，如果我的语气是 “无所不知”，那就没有意义了。我的听众不是以英语为母语的人，所以我不会让我的语言变得复杂，我将限制我的词汇量，以尽可能地清晰易懂。</p>
<p>如果你真的想做一些独特的东西，你可以做的一件事是在你的风格自定义插图。在你的博客里有一个连贯的插图风格可以让人们记住你。</p>
<p>除了大型企业的博客, <a href="https://waitbutwhy.com/" target="_blank" rel="noopener">Wait But Why</a>做得很好。</p>
<p>如果你不擅长绘画，学习如何使用 <a href="https://www.sketchapp.com" target="_blank" rel="noopener">Sketch</a>或 <a href="https://www.figma.com" target="_blank" rel="noopener">Figma</a>。</p>
<p>我仍然在为这个网站上的插图设计风格，但我认为它会是这样的: </p>
<p><img src="https://ferrucc.io/starting-a-blog/chat.png" alt="chat"></p>
<p>我有点痴迷于设计，但插图只是你可以做的脱颖而出的事情之一。</p>
<p>如果你是一名软件开发者，你可以尝试让你的文章里的小程序和用户是可以以可视化的方式交互式的互动。</p>
<p><a href="https://twitter.com/nealagarwal" target="_blank" rel="noopener">Neal Agarawall</a>的博客 <a href="https://neal.fun" target="_blank" rel="noopener">neal.fun</a> 就是一个很好的例子。看看他做的这个彩票模拟器，直观地解释了为什么赌博是一个坏主意:</p>
<p><img src="https://ferrucc.io/starting-a-blog/powerball.gif" alt></p>
<p>另一个例子是我创建的<a href="https://lab-cryptotrend.herokuapp.com/" target="_blank" rel="noopener">blockchain simulator</a>(意大利语)，它是我不久前创建的一个意大利加密货币博客的促销产品，一个月内增长到了10k。我还为这幅画创作了独特的插图。</p>
<p>如果你不具备以上任何一项技能，你可以通过实践来学习，也可以让一切都保持简单，只关注文本内容。为了证明你不需要做这些事情，这里有一些丑陋的博客与伟大的内容:</p>
<ul>
<li><a href="http://www.paulgraham.com/articles.html" target="_blank" rel="noopener">Paul Graham’s Blog</a></li>
<li><a href="https://www.kalzumeus.com/" target="_blank" rel="noopener">Patio11’s Blog</a></li>
<li><a href="https://sivers.org/" target="_blank" rel="noopener">Derek Sivers’s Blog</a></li>
<li><a href="https://www.gwern.net/" target="_blank" rel="noopener">Gwern’s blog</a></li>
</ul>
<p>以下是Gwern博客的样子:</p>
<p><img src="https://ferrucc.io/starting-a-blog/gwern-ugly.png" alt></p>
<p>有插图并不重要，但我可以把它们画出来，用视觉来表达我的信息，这一点帮助我脱颖而出。</p>
<p>所以，找到一些独特的你可以做的，并把它添加到你的网站! <strong>例如，一个不需要特殊技能的想法是添加一个帖子的音频版本。</strong></p>
<h1 id="写作过程"><a href="#写作过程" class="headerlink" title="写作过程"></a>写作过程</h1><p>在了解了博客的所有基础知识之后，你就可以开始写作了。</p>
<p>最好的方法是集思广益，想出几个你的读者感兴趣的题目，最好也是你感兴趣的题目，然后开始写作。<br>标题并不一定要描述文章的内容。</p>
<p>挑选文章标题的一个好方法是使用 <a href="https://en.wikipedia.org/wiki/E._Haldeman-Julius" target="_blank" rel="noopener">Julius Haldeman</a> 20世纪20年代的著作《第一个一亿》(“<a href="https://ferrucc.io/posts/old-school-marketers/" target="_blank" rel="noopener">The First Hundred Million</a>”)的内容。</p>
<p>显然，你的文章不可能完全脱离主题，但你的目标必须是吸引读者和提供信息。</p>
<p>根据你的目标读者在哪里，你也必须弄清楚你的文章应该是什么样的。例如，如果你的目标读者在subreddit 上，你可以写700-800字的帖子。</p>
<p>如果你想在搜索引擎上取得成功，你可能想让你的内容更长。<br>这里有一些数据显示了理想的字数:</p>
<p><img src="https://ferrucc.io/starting-a-blog/shares-data.png" alt></p>
<p>正如你所看到的，在大于 1000 字范围内的文章得到的分享比短内容多得多。超过 3000 字的分数看起来(字数)/(分享)的奖励开始减少，但没有严格的规则，做你认为合适的就可以。</p>
<p>你不能忽视的是，较长的内容显然与更多的集中的流量相关:</p>
<p><img src="https://ferrucc.io/starting-a-blog/hubspot.png" alt></p>
<p>所以我的建议是，如果你想让你的博客成长，那就写长点的内容。</p>
<p>但是这种相关性也可能是由外部因素造成的。也许写更长的文章平均需要更多的研究，以确保更高质量的内容，从而更多的共享。</p>
<p>如果你不知道如何写博客，你可以搜索你喜欢的文章，目标读者，解构他们试图找出一个重复的主题或模板结构，你可以遵循。</p>
<p>您的博客文章将是一个私人的事情，所以我不认为我可以提供其他建议，可以帮助您。</p>
<p>另一方面，如果你正在创建一个公司博客，一个好的建议是写与你的产品相关的内容。</p>
<p>例如，我在 <a href="https://boxysuite.com/" target="_blank" rel="noopener">Boxy Suite </a> 的朋友们制作的谷歌应用是Mac OS的原生应用。</p>
<p>他们最近还决定为公司开设一个博客来吸引更多的客户。</p>
<p>在他们的案例中，博客的目标是被Gmail的高级用户发现。所以他们的博客文章会是这样的内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“10条Gmail捷径最大化生产力”</span><br><span class="line">“Gmail最好的Chrome扩展”</span><br></pre></td></tr></table></figure>

<p>在你的文章开始的时候，有时把自己限定为一个专家也是一个好主意，展示一些你为什么谈论某事以及为什么人们应该听你说话的背景。</p>
<p>在很多情况下这样做都有帮助，但这并不意味着你必须这么做。</p>
<h1 id="修改草稿"><a href="#修改草稿" class="headerlink" title="修改草稿"></a>修改草稿</h1><p>一旦你完成写作，等待一天，开始阅读你写的所有东西，修改打字错误，删除无用的单词。</p>
<p>如果一个句子没有任何价值，删除它。如果一个句子太长，就把它拆开。</p>
<p>为了提高可读性，用粗体和斜体突出重要的单词。</p>
<p>有时候，像我刚才做的那样，用几个短段落引出一个长段落也是一个很好的练习。避免长句子和长段落，它们不容易吸引读者的眼球，会导致人们浏览你的内容。</p>
<p>一旦你完成了你的文章。再睡一晚吧。</p>
<p>第二天就把它寄出去。</p>
<p>如果你第n次读的时候感觉不舒服，那么你可能已经做得很好了。</p>
<h1 id="促进工作"><a href="#促进工作" class="headerlink" title="促进工作"></a>促进工作</h1><p>当你确定了你的听众，你也知道你的听众在哪里。</p>
<p>在允许的平台上转发你的文章，比如你所在领域的媒体和看板。</p>
<p>在社交媒体上分享你的内容，甚至把它发短信给你可能关心它的朋友。</p>
<p>另一个必须做的，就是收集读者的邮件。如果有人访问了你的网站，然后离开了，他们可能永远不会回来，除非你设法拿到了他们的电子邮件。</p>
<p>电子邮件很重要，因为它让你直接与人接触，减少了大型媒体公司或社交媒体算法变化对受众的影响。</p>
<p>同时，开始接触那些拥有类似博客的人，向他们推销客座文章。</p>
<p>客座文章是一个很好的机会，以挖掘更广泛的受众和获得反向链接到您的网站。</p>
<h1 id="来自朋友的建议"><a href="#来自朋友的建议" class="headerlink" title="来自朋友的建议"></a>来自朋友的建议</h1><p>因为我想让这篇文章成为博客上最好的资源，我决定接触一些我钦佩的人。</p>
<p>下面是我的朋友们给我的一些很棒的建议:</p>
<h2 id="Pat-Walls-of-Starter-Story"><a href="#Pat-Walls-of-Starter-Story" class="headerlink" title="Pat Walls of Starter Story"></a><a href="https://twitter.com/thepatwalls" target="_blank" rel="noopener">Pat Walls</a> of <a href="https://www.starterstory.com" target="_blank" rel="noopener">Starter Story</a></h2><p>在2018年11月的 Starter Story上 有 19,470 个 uniques.</p>
<p>我不做任何关键字研究。我的大部分内容都是采访，所以我让别人来写。这让我可以做得更多，因为我不需要做所有的艰苦工作的写作。我的大部分工作是确保内容是好的，并与作者合作使其更好。我主要在 Reddit 和社交媒体上推广。在 Reddit 上，我发布“case studies“，主要是将我的博客内容作为一篇自述转发到 subReddit 上。</p>
<p>我的内容有重复的格式这一事实是一把双刃剑。</p>
<p>它使我能够系统化内容创建过程。</p>
<p>它也伤害了我的成长，尽管人们厌倦了同样的格式。</p>
<h2 id="Hugo-Di-Francesco-of-Code-with-Hugo"><a href="#Hugo-Di-Francesco-of-Code-with-Hugo" class="headerlink" title="Hugo Di Francesco of Code with Hugo"></a><a href="https://twitter.com/hugo__df" target="_blank" rel="noopener">Hugo Di Francesco</a> of <a href="https://codewithhugo.com" target="_blank" rel="noopener">Code with Hugo</a></h2><p>7个月内 0-12k Unique users/month</p>
<p>做广告并不坏，只要你没有什么可以代替它们。</p>
<p>基于广告的一切会让你只关注流量，而不是流量的质量。尝试 “让我们在网站上再增加10万用户” 的问题是，10万比10或100更难。</p>
<p>如果你有什么东西要卖，就卖吧，广告商付钱给你，意味着他们重视你的关注，而不是他们花了多少钱(更别提在中间商和费用上浪费了多少美元)。</p>
<p>重视你的受众的注意力，获得广告收入，但在你有更好的东西提供之前，把它当作一根拐杖。</p>
<h2 id="Ethan-of-Code-The-Web"><a href="#Ethan-of-Code-The-Web" class="headerlink" title="Ethan of Code The Web"></a><a href="https://twitter.com/booligoosh" target="_blank" rel="noopener">Ethan</a> of <a href="https://codetheweb.blog/" target="_blank" rel="noopener">Code The Web</a></h2><p><strong>创建邮件列表</strong></p>
<p>当有人访问你的博客时，他们不太可能经常回来。除非你开始写邮件!确保从一开始就在你的博客上放置一个订阅表单。你也可以通过提供一些PDF格式的特殊内容来鼓励人们加入。</p>
<p>通过编写 Web 代码，我最终意识到，那些注册的人不仅希望得到新文章的通知，他们还希望学习编写代码。所以我改变了格式，把它变成了每周发送 5-10 个链接到 web 开发教程的电子邮件。我将包括我的一些旧文章，以及一个链接到我的最新文章顶部。这需要更多的努力，但我的电子邮件列表在更改之后开始增长得更快。我还在 Product Hunt 上发布了这款应用，获得了大约500个注册用户(我现在每周都能收到一些!) </p>
<p>有一个电子邮件列表不仅有利于参与，而且它也可以帮助很多，如果你以后决定寻找赞助商!</p>
<p><strong>与读者建立联系</strong></p>
<p>这是运行博客的一个重要(但经常被忽视)方面。记住要表现得像一个真正的人——在你的文章、电子邮件和互动中。每次有新人在我的邮件列表上注册时，我都会给他们发一封邮件，邀请他们自我介绍，并问我任何问题。我最终通过电子邮件帮助了很多人!!这会让你的读者更加忠诚，让你对你的读者有第一手的了解。它也给我带来了一些很好的反馈，其中很多都可以作为我的证明!</p>
<p>像这样:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“谢谢你花时间创造了一些有用的东西。内容创造者让这个社会变得更好，尤其是当他们免费分享劳动成果的时候。”</span><br><span class="line"></span><br><span class="line">“我真的很难理解，也很难理解这一切。但在我遇到你的解释之前，我还不够自信。</span><br><span class="line">多亏了你，我觉得我终于明白了，这些概念也不像我曾经想的那么陌生。</span><br><span class="line">我现在很受鼓舞，因为我可以坚持下去，并在这个过程中掌握更多的概念!”</span><br><span class="line"></span><br><span class="line">“我希望你能在很长一段时间内继续创作出令人惊叹、易于理解的内容”</span><br></pre></td></tr></table></figure>

<p><strong>有大量的头脑风暴想法</strong></p>
<p>在我写第一篇关于 Web 代码的文章之前，我进行了一次大规模的头脑风暴。我设定了一个目标，在一天结束前写下 60 篇博文。这很难!!我试着完全去除所有的心理过滤，只有当我把它们放下来的时候，我才能判断哪些是好的，哪些是坏的。</p>
<p>我确保这个数字永远不会低于50。我还养成了一种习惯，一旦想法突然出现在我脑海里，我就把它们写下来。我已经超过100了!!拥有一个庞大的博客帖子想法列表真的有助于激励。不知道写些什么真的很可怕，这是你写那篇博客文章的另一个心理障碍。为了获得额外的动力，你也可以给每个想法指定一个日期，然后你就有了一个要坚持的计划!如果你跳过一个星期，你将不得不重新安排其他所有星期的内容</p>
<p><strong>从标题开始</strong></p>
<p>这个技巧与你的博客文章的实际写作有关。从空白屏幕开始常常会让人觉得难以承受。事实上，它会导致拖延症或写作障碍!为了解决这个问题，我总是从写下文章的标题开始。这让我对文章的流程有了一个大致的了解，也给了我一个计划，这样我就不太可能放弃或者不知道接下来要写什么了!事实上，我在写这篇文章的时候就用了这个技巧。</p>
<p><strong>博客帮助你学习</strong></p>
<p>这不是一个小窍门，我只是想和大家分享一下。我开始以博客的形式编写Web代码，向初学者讲授Web开发。通过这个过程，我自己成为了一个更好的web开发人员。我相信教学是最好的学习方式，通过创建一个完整的学习web开发的路径，我成功地填补了我知识中的许多空白。我学到了很多很酷的东西，比如CSS flexbox、CSS grid、CSS变量、JavaScript箭头函数等等。写博客对读者和作者都有好处!</p>
<h2 id="KP-of-KP"><a href="#KP-of-KP" class="headerlink" title="KP of KP"></a><a href="https://twitter.com/thisiskp_" target="_blank" rel="noopener">KP</a> of <a href="http://thisiskp.com/" target="_blank" rel="noopener">KP</a></h2><p>每年超过1000篇文章 - 每年18000 独立用户在他的新博客</p>
<p>确保你拥有黑客一样的动力作为突破点。创建一个简单的例程和一个清晰的重复提示。我的提示是每天早上8:30，我使用的手段是 “打开我的笔记本电脑，输入一个完整的句子” 。因为这是一个可以实现的目标，所以坚持这个习惯变得很容易。当然，我写了不止一句话，但这是一个很好的开始。</p>
<p><strong>为什么广告是个坏主意</strong></p>
<p>你网站上的广告是指以下内容。</p>
<p>通过一个平台(通常会保留50%的资金)的人为推广一款产品所支付的费用是你的两倍。</p>
<p>这些人并不傻，他们这么做是因为他们期待投资回报。据我所知，他们已经这样做了30多年，到现在还没有停止。</p>
<p>这意味着这些广告是有效的，即使它们的针对性很差，而且在你看来价格过高。</p>
<p>我的建议很简单。你比任何广告商都更了解你的读者，所以卖给他们你知道他们想要的东西。</p>
<p>我和 <a href="https://twitter.com/hugo__df" target="_blank" rel="noopener">Hugo Di Francesco</a> of <a href="https://codewithhugo.com" target="_blank" rel="noopener">Code with Hugo</a> 讨论过，他告诉我，对他来说，网站上的大多数广告都是有意义的。</p>
<p>原因如下:</p>
<p>“广告商承担了风险。我降低了用户交互的风险。我不需要建立信任和卖东西就能赚钱。<br>重要的是，你觉得有用的文章的作者肯定比广告商更值得信任。”</p>
<p>事实上，在与Hugo交谈之后，我们一起意识到他的策略在那些与他销售的东西无关的帖子上效果很好。</p>
<p>在与他所卖的东西相关的帖子上，他会为自己填充一个广告，而不是普通的广告。</p>
<p><img src="https://ferrucc.io/starting-a-blog/hugo.png" alt></p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>写博客没有任何规则。</p>
<p>你可以从这些年来我学到的东西中得到一些启示，或者忽略一切，以自己的方式做事。</p>
<p>事实上，如果你违反了规定，给我发一封邮件，把你帖子的链接发给我。我一直在寻找灵感，并着迷于那些改变规则却仍能取得成果的人。</p>
<p>如果你没有得到结果，重读这篇文章，找出你做错了什么。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://ferrucc.io/posts/starting-a-blog/" target="_blank" rel="noopener">https://ferrucc.io/posts/starting-a-blog/</a></li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>article</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>三种方法解决域名解析的主机记录冲突</title>
    <url>/article/cname-and-mx-conflicts.html</url>
    <content><![CDATA[<p>申请域名用作网站访问添加了 CNAME 主机记录以后，又想添加邮箱的 MX 的主机记录，或者想添加 CDN 的 CNAME 记录，这时候经常会遇到主机记录冲突的问题导致添加失败。接下来我们详细分析一下。</p>
<a id="more"></a>



<h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>根据国际上互联网标准 <a href="http://tools.ietf.org/pdf/rfc1034" target="_blank" rel="noopener">RFC 1034</a> 章节3.6.2中指出：<br>If aCNAME RR is present at a node, no other data should be present; this ensuresthat the data for a canonical name and its aliases cannot be different. </p>
<p>大意就是说如果CNAME资源记录出现在一个域名节点，为了确保不会出现不同的解析结果，这个域名节点将不再接受其他记录值。</p>
<p>所以一些记录的冲突会导致主机记录值无法正常添加，究竟哪些不能冲突，可以查看阿里的<a href="https://help.aliyun.com/knowledge_detail/39787.html" target="_blank" rel="noopener">这篇文章</a> 。</p>
<p>知道了原因，我们就可以尝试来解决问题了，经过试验发现，解决域名的解析记录冲突有三种方法，分别是：</p>
<ul>
<li>删除其中的一条解析记录</li>
<li>使用跳转的方式进行解析</li>
<li>使用二级域名进行解析</li>
</ul>
<h1 id="删除其中的一条解析记录"><a href="#删除其中的一条解析记录" class="headerlink" title="删除其中的一条解析记录"></a>删除其中的一条解析记录</h1><p>既然发生冲突了，那么最简单的方式就是二选一，保留一条，删除一条，这样就可以恢复正常。</p>
<p>如果实在不愿意删除，那么可以尝试把其中一条 CNAME 的解析记录更换为 A 记录，指定到一个 IP 地址上。这样会有一个隐患发生，那就是当 IP 地址更换了以后，你的解析会中断，需要手动变更 A 记录才能恢复。不是很推荐这种方法。</p>
<h1 id="使用隐式CNAME进行解析"><a href="#使用隐式CNAME进行解析" class="headerlink" title="使用隐式CNAME进行解析"></a>使用隐式CNAME进行解析</h1><p>在不同的域名服务商可能有不同的叫法，比如阿里云叫 显示/隐式 URL，CloudXNS的叫做 LINK 记录。思路就是给其中的一条解析起一个名字，然后将这条解析通过 LINK 或者 URL 的方式去解析。大致操作方法如下：</p>
<table>
<thead>
<tr>
<th align="center">记录类型</th>
<th align="center">主机记录</th>
<th align="center">记录值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MX</td>
<td align="center">@</td>
<td align="center">qiye.aliyun.com</td>
</tr>
<tr>
<td align="center">LINK</td>
<td align="center">@</td>
<td align="center"><a href="http://www.test.com" target="_blank" rel="noopener">www.test.com</a></td>
</tr>
<tr>
<td align="center">CNAME</td>
<td align="center">www</td>
<td align="center">xxx.github.io</td>
</tr>
</tbody></table>
<h1 id="使用二级域名进行解析"><a href="#使用二级域名进行解析" class="headerlink" title="使用二级域名进行解析"></a>使用二级域名进行解析</h1><p>在分析的时候也说到了，一个域名节点只能有一个 CNAME 的解析记录，那么就可以启用二级域名，这样就不是同一个域名节点了。</p>
<p>而且可以不同的二级域名可以对应不同的功能服务，比如用 mail.xxx.com 来解析邮箱，用 blog.xxx.com 来映射博客访问，做好二级域名的规划，完全不用担心解析记录的冲突。</p>
<p>大致操作方法如下：</p>
<table>
<thead>
<tr>
<th align="center">记录类型</th>
<th align="center">主机记录</th>
<th align="center">记录值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MX</td>
<td align="center">mail</td>
<td align="center">mx1.qiye.aliyun.com</td>
</tr>
<tr>
<td align="center">CNAME</td>
<td align="center">smtp.mail</td>
<td align="center">smtp.qiye.aliyun.com</td>
</tr>
<tr>
<td align="center">CNAME</td>
<td align="center">imap.mail</td>
<td align="center">imap.qiye.aliyun.com</td>
</tr>
<tr>
<td align="center">CNAME</td>
<td align="center">pop3.mail</td>
<td align="center">pop.qiye.aliyun.com</td>
</tr>
<tr>
<td align="center">CNAME</td>
<td align="center">mail.mail</td>
<td align="center">qiye.aliyun.com</td>
</tr>
<tr>
<td align="center">CNAME</td>
<td align="center">blog</td>
<td align="center">xxx.github.io</td>
</tr>
</tbody></table>
<p>这样就把 blog.xxx.com 解析到了 github pages，把 mail.xxx.com 解析到了邮箱。<br>阿里云的邮箱详细解析见<a href="https://help.aliyun.com/knowledge_detail/36723.html" target="_blank" rel="noopener">这里</a> 。</p>
<p>个人比较推荐第三种方法，规划好二级域名，用二级域名来做各种功能的解析，这样可以发挥一个域名最大的作用。</p>
<p><a href="https://blog.skk.moe/post/about-cname-and-mx-conflicts/" target="_blank" rel="noopener">也来谈谈关于 CNAME 和 MX 冲突的一些事</a> 这篇博客也对冲突进行了一些分析，也可以参考一下</p>
<p>参考链接：</p>
<ul>
<li><a href="https://help.aliyun.com/knowledge_detail/39787.html" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/39787.html</a> ，by Aliyun</li>
<li><a href="https://help.aliyun.com/knowledge_detail/36723.html" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/36723.html</a> ，by Aliyun</li>
<li><a href="http://tools.ietf.org/pdf/rfc1034" target="_blank" rel="noopener">http://tools.ietf.org/pdf/rfc1034</a> ，by P. Mockapetris</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>article</category>
      </categories>
      <tags>
        <tag>域名解析</tag>
        <tag>CNAME</tag>
        <tag>MX</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.6.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-6-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.6.0" target="_blank" rel="noopener">2.6.0</a> 现在(2018.12.24)已经发布，在上个月的 <a href="http://erdong.site/Prometheus/New-Features/New-Features-in-Prometheus-2-5-0.html">2.5.0</a> 之后又进行了一些修正和改进。</p>
<a id="more"></a>

<p>有许多性能改进。WAL reading 现在的速度是现在的四倍，带来了更快的启动时间。压缩、索引、内存系列和low ingestion rate servers 使用的RAM数量都显著减少。远程写的性能得到了改进，现在可以指定最小的碎片数。远程读取现在对后端故障具有弹性。</p>
<p>在服务发现方面，Azure、EC2和Kubernetes获得了新的元数据。Prometheus 在TSDB、模板和规则方面有一些新的 metric 。相应地，promtool 更新已被删除，如果您想将 1.x 记录规则转换为 2.x 格式，您需要使用早期版本的promtool。Prometheus 现在在出站 HTTP 请求的用户代理中标识自己，UI 中的 console 选项卡支持选择即时查询的评估时间。</p>
<p>这次还有很多的提升、bug fix 和其他的改变，可以查看 <a href="https://github.com/prometheus/prometheus/releases/tag/v2.6.0" target="_blank" rel="noopener">release notes</a> 来获取更多的信息。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-6-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-6-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.5.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-5-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.5.0" target="_blank" rel="noopener">2.5.0</a> 现在(2018.11.12)已经发布，在 9 月份的 <a href="http://erdong.site/Prometheus/New-Features/New-Features-in-Prometheus-2-4-0.html">2.4.0</a> 之后又进行了一些修正和改进。</p>
<a id="more"></a>


<p>这是新的6周计划的第二次发布。第一个重要的特性是，基于我们内部用于单元测试PromQL本身的语法，现在promtool中对规则和警报进行了单元测试。Prometheus 现在还会在加载配置文件时捕捉一些警告模板错误，而不是在评估模板时。</p>
<p>第二个特性是，现在对一个查询一次可以在内存中拥有的查询数量有一个限制，这样可以防止大量查询导致的 RAM 升高引起 OOM 威胁你的 Prometheus。可以通过 –query.max-samples flag 来调整这个值。每个示例使用 16 bytes 的内存，但是请记住，在内存中，用于查询的不仅仅是 active samples 。</p>
<p>第三个值得注意的特性是，这是第一个支持抓取 OpenMetrics 格式的版本。该格式仍在草案中，因此这是实验性的 Prometheus。目前只有 Prometheus Python 客户端可以生成这种格式，但是如果您同时使用这两种格式的最新版本，那么将使用 OpenMetrics 而不是 Prometheus 文本格式。</p>
<p>远程读取有一些改进，减少了内存使用、新的 metric 和并发限制。在服务发现方面，OpenStack 现在可以从所有项目中发现、发现所有网络接口并使用 TLS。Triton SD 可以按组进行过滤，并具有关联的新元数据。Kubernetes SD和SD通常都获得了一些新的 metric。</p>
<p>最后还有一个bug修复，它主要影响用户在 metric 名称上错误使用匹配器。如果您正在执行速率 ({<strong>name</strong>=~”som.*thing”}[5m]) 之类的操作，那么现在将失败，因为一旦删除 metric 名称，速率将生成两个具有相同标签的时间序列，这是没有意义的，并且会造成问题。前面已经讨论了如何正确地处理这个问题。</p>
<p>这次还有很多的提升、bug fix 和其他的改变，可以查看 <a href="https://github.com/prometheus/prometheus/releases/tag/v2.5.0" target="_blank" rel="noopener">release notes</a> 来获取更多的信息。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-5-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-5-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.4.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-4-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.4.0" target="_blank" rel="noopener">2.4.0</a> 现在(2018.9.17)已经发布，在 6 月份的 <a href="http://erdong.site/Prometheus/New-Features/New-Features-in-Prometheus-2-3-0.html">2.3.0</a> 之后又进行了一些修正和改进。</p>
<a id="more"></a>

<p>第一个较大的变化是，对于警报中的状态，现在跨重启持久化，因此短暂的重启将不再需要挂起警报从头开始。现在，在向 Alertmanager 发送警报时也有了一些限制，因此不再是在每次评估时发送现有警报，而是最多每分钟发送一次，这减少了 Alertmanager 上的负载。</p>
<p>这次有一个新的 WAL 实现，这意味着升级到2.4.0以后不能降级。有新的 API target 可以访问来自目标的规则、警报和元数据 metric 。</p>
<p>这次在服务发现方面有一些改进。如果有相同的 SD 配置，它们将只实例化一次，而不是针对它们的每个实例，这将更加有效和有用。此外还有Consul、EC2和GCE的新元数据字段，Azure获得了VMSS支持。</p>
<p>这次还有很多的提升、bug fix 和其他的改变，可以查看 <a href="https://github.com/prometheus/prometheus/releases/tag/v2.4.0" target="_blank" rel="noopener">release notes</a> 来获取更多的信息。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-4-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-4-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.3.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-3-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.3.0" target="_blank" rel="noopener">2.3.0</a> 现在(2018.6.11)已经发布，在 3 月份的 <a href="http://erdong.site/Prometheus/New-Features/New-Features-in-Prometheus-2-2-0.html">2.2.0</a> 之后又进行了一些修正和改进。</p>
<a id="more"></a>

<p>这个版本中最大的变化是与性能相关的。我对PromQL的评估方式进行了重大更改，这可以为常见仪表板查询减少31-64%的CPU和55-99%的内存分配。此外，我更改了用于编码响应的JSON库，节省了40%的CPU。</p>
<p>如果您正在使用带有无记名令牌的商业Marathon产品，请注意字段名已经更改。从好的方面来说，其他地方可用的所有常用HTTP选项现在都可以用于Marathon SD。EC2和领事SD现在允许使用这些技术的内置过滤，这与重新标记没有什么不同，但是对性能很有用。Kubernetes和GCE SD获得了额外的元数据。任何可以指定基本身份验证密码的地方，现在都可以从文件中读取该密码。</p>
<p>这次还有很多的提升、bug fix 和其他的改变，可以查看 <a href="https://github.com/prometheus/prometheus/releases/tag/v2.3.0" target="_blank" rel="noopener">release notes</a> 来获取更多的信息。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-3-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-3-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.2.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-2-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.2.0" target="_blank" rel="noopener">2.2.0</a> 现在(2018.3.12)已经发布，在 1 月份的 <a href="http://erdong.site/Prometheus/New-Features/New-Features-in-Prometheus-2-1-0.html">2.1.0</a> 之后又进行了一些修正和改进。</p>
<a id="more"></a>

<p>这个版本的存储格式发生了变化，所以一旦升级到2.2.0，就不可能降级回去。由于 2.2.0 的存储中有 BUG ，不建议继续使用该版本。</p>
<p>有各种各样的改进可以简化管理。警报状态页面可以显示注释，更好的规则格式，运行时页面包含更多信息和 flag，dropped target 和 dropped alertmanager 也可以从API中获得。</p>
<p>本次对联邦和服务发现的性能做了提升。无记名令牌中的更改不再需要重新加载配置文件。在2.1.0中添加的prometheus_sd_file_timestamp metric 现在有了改进的名称 prometheus_sd_file_mtime_seconds 。Azure SD中添加了元数据。</p>
<p>这次还有很多的提升、bug fix 和其他的改变，可以查看 <a href="https://github.com/prometheus/prometheus/releases/tag/v2.2.0" target="_blank" rel="noopener">release notes</a> 来获取更多的信息</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-2-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-2-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.1.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-1-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.1.0" target="_blank" rel="noopener">2.1.0</a> 现在(2018.01.22)已经发布，从上个月的 <a href="http://erdong.site/Prometheus/New-Features/New-Features-in-Prometheus-2-0-0.html">2.0.0</a> 到 2.1.0 有一些修改和提升。</p>
<a id="more"></a>


<p>有几个改进可以简化管理。新的服务发现状态页使重新标记哪些元数据变得更加容易。规则状态页现在包括每个规则的最后一次计算花费的时间。便于找出哪些可能需要调整。每个规则组的最后评估持续时间现在也可以作为rule_group_last_duration_seconds metric 使用。文件SD有一个新的 prometheus_sd_file_timestamp metric，可以帮助您检测文件是否过期。</p>
<p>新的改进的存储引擎已经修复了许多错误，现在可以处理大于 4 GiB 的索引。Federation endpoint更快，Expression Browser 具有可选的查询历史记录。v1 版本的 HTTP API现在包含用于快照、删除和强制压缩的管理功能。</p>
<p>在2.0.0中添加的 read_recent 选项有一个错误的缺省值，现在在2.1.0中缺省值为 false。</p>
<p>这里有很多的 bug fix 和其他的改变，可以查看 <a href="https://github.com/prometheus/prometheus/releases/tag/v2.1.0" target="_blank" rel="noopener">release notes</a> 获取更多的信息。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-1-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-1-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>第02周分享</title>
    <url>/weekly/weekly02.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>



<h1 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h1><h2 id="1-GitHub-开放私有仓库"><a href="#1-GitHub-开放私有仓库" class="headerlink" title="1. GitHub 开放私有仓库"></a>1. <a href="https://blog.github.com/2019-01-07-new-year-new-github/" target="_blank" rel="noopener">GitHub 开放私有仓库</a></h2><p>在2019 年的1月7日，GIthub 以 New year，new GitHub 为题公布了一个另个人开发者欢欣鼓舞的消息，可以在 Github 上创建免费的私有仓库，虽然有每个私仓三个协作者的限制，但是还是很很好的消息。</p>
<p>CSDN 资讯的<a href="https://blog.csdn.net/csdnnews/article/details/86109374" target="_blank" rel="noopener">这篇报道</a> 描述了更多的内容。</p>
<h2 id="2-2018年华为研发投入全球排第5"><a href="#2-2018年华为研发投入全球排第5" class="headerlink" title="2. 2018年华为研发投入全球排第5"></a>2. <a href="https://www.ithome.com/0/403/433.htm" target="_blank" rel="noopener">2018年华为研发投入全球排第5</a></h2><p>近日，欧盟委员会公布了《2018年欧盟工业研发投资排名》，这个排名主要是对全球46个国家和地区的2500家主要企业2017会计年度研发投入进行的调查。<br>其中华为排第5 ，结合2018年华为公布的各系列产品，有输入才有产出。</p>
<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="1-A-Programmer’s-Guide-to-English"><a href="#1-A-Programmer’s-Guide-to-English" class="headerlink" title="1. A Programmer’s Guide to English"></a>1. <a href="https://github.com/yujiangshui/A-Programmers-Guide-to-English/blob/master/README.md" target="_blank" rel="noopener">A Programmer’s Guide to English</a></h2><p>专为程序员编写的英语学习指南。<br>本教程目标人群是想要花一些时间真正掌握英语的人，尤其适合英语渣。对于英语渣来说，网上杂七杂八的英语学习技巧和经验不一定会有很多帮助，甚至会误导。比如这篇回答就说了，如果别人问答主如何学英语，她顶多给一句“多看美剧，培养语感”，好在这篇回答详细说了答主的水平和长期的努力细节，否则会误导一大片低水平英语渣去拼命的看美剧。所以在英语学习过程中，要注意查看符合自己水平的经验和教程，否则可能会走弯路。</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="1-UCloud-开源发布终端链路探测-SDK"><a href="#1-UCloud-开源发布终端链路探测-SDK" class="headerlink" title="1. UCloud 开源发布终端链路探测 SDK"></a>1. <a href="https://mp.weixin.qq.com/s?__biz=MjM5NjQ4MjYwMQ==&mid=2664613120&idx=1&sn=041701d505cde7607d3c1cef27dc7756&chksm=bdcefe468ab97750d218a9033a0dff43b26b7bb3344a37c8a5be412b9c6a8d497baad0966442&mpshare=1&scene=1&srcid=&rd2werd=1#wechat_redirect" target="_blank" rel="noopener">UCloud 开源发布终端链路探测 SDK</a></h2><p>UCloud 自主研发的终端链路探测 SDK 正式开源发布，开放中立云平台的专业网络运营、数据分析能力帮助出海企业以尊重用户隐私、数据安全加密的方式，探测终端访问 APP 的网络链路质量，定向优化移动端网络体验。</p>
<p>开源地址 ： <a href="https://github.com/ucloud/netanalysis-sdk-android" target="_blank" rel="noopener">https://github.com/ucloud/netanalysis-sdk-android</a></p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
  </entry>
  <entry>
    <title>【翻译】Prometheus 2.0.0 新特性</title>
    <url>/Prometheus/New-Features/New-Features-in-Prometheus-2-0-0.html</url>
    <content><![CDATA[<p>Prometheus <a href="https://github.com/prometheus/prometheus/releases/tag/v2.0.0" target="_blank" rel="noopener">2.0.0</a> 现在(2017.11.8)已经发布，从上个月的 <a href="https://www.robustperception.io/new-features-in-prometheus-1-8-0" target="_blank" rel="noopener">1.8.0</a> 到 2.0.0 有显著的改进。</p>
<a id="more"></a>

<p>最大的变化是新的存储引擎，它被完全重写，并与检索系统中的变化相结合，带来了可观的性能收益。现在，Prometheus 的服务器每秒可以摄取数百万个样本。这是由于与文本展示格式相关联的优化。如果您使用的导出器非常罕见，只支持protobuf公开格式，那么您需要添加对文本格式的支持。这个新的存储引擎不向后兼容，但是有<a href="https://www.robustperception.io/accessing-data-from-prometheus-1-x-in-prometheus-2-0/" target="_blank" rel="noopener">一种方法</a>可以透明地访问仍然存储在1.x中的旧数据。</p>
<p>新的存储引擎不需要通过 flag 进行调优。它通过 mmaped files 进行工作，因此依赖于现代内核的页面缓存。这种设计还允许为希望进行备份的用户制作快照。</p>
<p>第二个大的变化是PromQL中的新过时语义。在通常情况下，从服务发现中删除时间序列后，不再需要等待整整5分钟才会过期，现在需要大约一个scrape 间隔。</p>
<p>规则文件格式已更改为YAML，我们之前已经了解了如何使用 promtool 对其进行转换。规则现在按组划分，并按顺序执行。</p>
<p>PromQL有一些小的更改。添加了一个 <strong>timestamp</strong> 函数，删除了<strong>count_scalar</strong>、<strong>drop_common_tags</strong> 和 <strong>keep_common</strong> 。</p>
<p>出于安全原因，默认情况下禁用 admin 和 lifecycle API。你可以通过下面这两个 flag 来重新开启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--web.enable-admin-api  </span><br><span class="line">--web.enable-lifecycle</span><br></pre></td></tr></table></figure>

<p>说到 flag ，Kingpin 现在也在使用，所以所有 flag 的前缀都是双连字符而不是单连字符。用于指定AlertManager的命令行 flag 已被删除，现在要使用 AlertManager 只能在配置文件中开启，这个选项已经在<a href="https://www.robustperception.io/new-features-in-prometheus-1-4-0/" target="_blank" rel="noopener">1.4</a> 的配置文件中添加过了。</p>
<p>如果使用远程读取的对象不是远程存储，则需要启用新的 <strong>read_recent</strong> 选项。默认情况下，远程读取不再请求它应该在本地拥有的数据。</p>
<h1 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h1><ul>
<li><a href="https://www.robustperception.io/new-features-in-prometheus-2-0-0" target="_blank" rel="noopener">https://www.robustperception.io/new-features-in-prometheus-2-0-0</a> ， By Brian Brazil</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Prometheus</category>
        <category>New-Features</category>
      </categories>
      <tags>
        <tag>Prometheus</tag>
        <tag>Features</tag>
        <tag>release</tag>
      </tags>
  </entry>
  <entry>
    <title>Grafana 重置 admin 密码</title>
    <url>/Grafana/grafana-admin-password-reset.html</url>
    <content><![CDATA[<p>Grafana 的使用越来越广泛，在使用过程中经常遇到要重置密码的需求，尤其是 admin 密码，先说常规问题。</p>
<a id="more"></a>

<h1 id="已知-admin-密码修改新密码"><a href="#已知-admin-密码修改新密码" class="headerlink" title="已知 admin 密码修改新密码"></a>已知 admin 密码修改新密码</h1><h2 id="方法一：常规方法"><a href="#方法一：常规方法" class="headerlink" title="方法一：常规方法"></a>方法一：常规方法</h2><p>使用已知密码登陆系统，在系统页面里进行修改。</p>
<h2 id="方法二：API-接口"><a href="#方法二：API-接口" class="headerlink" title="方法二：API 接口"></a>方法二：API 接口</h2><p>接口使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X PUT -H &quot;Content-Type: application/json&quot; -d &apos;&#123;</span><br><span class="line">  &quot;oldPassword&quot;: &quot;admin&quot;,</span><br><span class="line">  &quot;newPassword&quot;: &quot;newpass&quot;,</span><br><span class="line">  &quot;confirmNew&quot;: &quot;newpass&quot;</span><br><span class="line">&#125;&apos; http://admin:admin@&lt;your_grafana_host&gt;:3000/api/user/password</span><br></pre></td></tr></table></figure>

<h1 id="忘记-admin-密码重置密码"><a href="#忘记-admin-密码重置密码" class="headerlink" title="忘记 admin 密码重置密码"></a>忘记 admin 密码重置密码</h1><p>接下来就是划重点的时候了，经常搭建了一个小环境以后，隔了几周想再看看的时候发现，admin 密码忘记了，没法登陆了。接下来这几个方法都能解决这几个问题，看情况使用。</p>
<h2 id="方法一：命令行"><a href="#方法一：命令行" class="headerlink" title="方法一：命令行"></a>方法一：命令行</h2><p>该方法基于 Grafana 4.1 以上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grafana-cli admin reset-admin-password &lt;new password&gt;</span><br></pre></td></tr></table></figure>

<p>如果上述方法报错：Could not find config defaults, make sure homepath command line parameter is set or working directory is homepath</p>
<p>那么使用如下 flag 来指定参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grafana-cli admin reset-admin-password --homepath &quot;/usr/share/grafana&quot; newpass</span><br></pre></td></tr></table></figure>

<h2 id="方法二：修改数据库"><a href="#方法二：修改数据库" class="headerlink" title="方法二：修改数据库"></a>方法二：修改数据库</h2><p>查看Grafana配置文件，确定Grafana 数据库 grafana.db的路径</p>
<p>配置文件路径一般为 /etc/grafana/grafana.ini ，如果安装时修改过，请查看对应位置的 grafana.ini  。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[paths]</span><br><span class="line">;data = /var/lib/grafana</span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line"># For &quot;sqlite3&quot; only, path relative to data_path setting</span><br><span class="line">;path = grafana.db</span><br></pre></td></tr></table></figure>

<p>通过配置文件得知grafana.db的完整路径为： /var/lib/grafana/grafana.db</p>
<p>由于 Grafana 使用 sqlite3 来存储配置数据，所以使用 sqlite3 来进行修改，如果没有请安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@local]# sqlite3 /var/lib/grafana/grafana.db</span><br><span class="line">#查看数据库中包含的表</span><br><span class="line">.tables</span><br><span class="line"></span><br><span class="line">#查看user表内容</span><br><span class="line">select * from user;</span><br><span class="line"></span><br><span class="line">#重置admin用户的密码为默认admin</span><br><span class="line">update user set password = &apos;59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6&apos;, salt = &apos;F3FAxVm33R&apos; where login = &apos;admin&apos;;</span><br><span class="line"></span><br><span class="line">#退出sqlite3</span><br><span class="line">.exit</span><br></pre></td></tr></table></figure>

<p>使用上述方法，会将 admin 用户的密码重置为 admin ，然后登陆页面进行修改。</p>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>一般来说上述方法已经可以满足需求了，如果不方便重置 admin 用户的密码，那么也可以通过修改数据库，将某个用户提权为 admin 权限用户，然后通过这个用户来进行修改。</p>
<p>提权语句如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">udpate user set is_admin = 1 where login = &apos;xxxx&apos;;</span><br></pre></td></tr></table></figure>

<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="http://docs.grafana.org/administration/cli/#reset-admin-password" target="_blank" rel="noopener">http://docs.grafana.org/administration/cli/#reset-admin-password</a> , By Grafana</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>Grafana</category>
      </categories>
      <tags>
        <tag>Grafana</tag>
      </tags>
  </entry>
  <entry>
    <title>第01周分享</title>
    <url>/weekly/weekly01.html</url>
    <content><![CDATA[<p>这里记录过去一周，我看到的值得分享的东西。</p>
<a id="more"></a>


<p>长久以来，我一直用各种方式，尝试整理我的收藏夹。最近想到，把它写成文章，共享出来，也许效果更好。<br>                       —阮一峰</p>
<p>和阮老师有同样的需求，希望在这里能见证自己的成长。</p>
<p>本周是 2019 年的第一周也是开始这个分享的第一周，推荐大家两本书看吧。</p>
<p>第一本是 《Site Reliablity Engineering: How Google Runs Production Systems》，作者是 Betsy Beyer ， Chris Jones ， Jennifer Petoff ， Niall Richard Murphy ,中文版是由孙宇聪翻译，书名为 《SRE：Google 运维解密》。</p>
<blockquote>
<p>Google 是 SRE 理念的发明者。本书不光介绍了这个职位的技术细节，还包括了其中的思考过程、团队目标、设计理念以及学到的宝贵课程。如果你想从起源上了解 SRE 一词的意义，应该从本书开始。</p>
</blockquote>
<p>上述是 Google SRE Russ Allbery 对本书的评价，我觉得很好的表述了对这本书的内容和意义。</p>
<p>第二本是 《The Site Reliablity Work Book》,作者是 Betsy Beyer ， Niall Richard Murphy ，David K.Rensin , Kent Kawahara ， Stephen Thorne 。当前好像还没有中文版，</p>
<blockquote>
<p>谷歌第一本解释了 SRE 内容和原因的书。本书向您展示了如何在任何公司、初创公司或巨头中实现 SRE。</p>
</blockquote>
<p>上述是 Stripe SRE  Jonah Horowitz 对这本书的评价，也是比较中肯的。</p>
<p>把这两本书推荐给大家，两本书都可以在下面的链接中找到。</p>
<p><a href="https://landing.google.com/sre/books/" target="_blank" rel="noopener">https://landing.google.com/sre/books/</a></p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>weekly</category>
      </categories>
  </entry>
  <entry>
    <title>使用 vuls 对 CentOS 操作系统安全评估</title>
    <url>/tools/vuls-tool-introduction.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于某些安全事件的发生，对于系统安全需要进行进行一步的评估，本次主要使用 vuls 工具对日常主要使用的几个版本操作系统对其进行安全基线的建立和系统安全性的评分。</p>
<a id="more"></a>
<h1 id="评估工具"><a href="#评估工具" class="headerlink" title="评估工具"></a>评估工具</h1><p>vuls 是一个 Linux/FreeBSD 的无代理漏洞扫描器，使用 go 语言编写。</p>
<ul>
<li>github： <a href="https://github.com/future-architect/vuls" target="_blank" rel="noopener">https://github.com/future-architect/vuls</a></li>
<li>官网：<a href="https://vuls.io/en/" target="_blank" rel="noopener">https://vuls.io/en/</a></li>
</ul>
<h2 id="用到的CVE工具"><a href="#用到的CVE工具" class="headerlink" title="用到的CVE工具"></a>用到的CVE工具</h2><p>主要是三个工具，go-cve-dictionary、goval-dictionary、gost（go-security-tracker）</p>
<ul>
<li>go-cve-dictionary：该工具用于构建 NVD(国家漏洞数据库)和日本 JVN 的本地副本，根据它们的CVE标识符包含安全漏洞，包括详尽的信息和风险评分。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/kotakanbe/go-cve-dictionary/releases/download/v0.2.1/go-cve-dictionary_0.2.1_linux_amd64.tar.gz</span><br><span class="line">tar -zxf go-cve-dictionary_0.2.1_linux_amd64.tar.gz</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 2002 $(date +<span class="string">"%Y"</span>)`; <span class="keyword">do</span> go-cve-dictionary fetchnvd -years <span class="variable">$i</span>; <span class="keyword">done</span></span><br><span class="line">... snip ...</span><br><span class="line">ls -alh cve.sqlite3</span><br><span class="line">-rw-r--r--. 1 centos centos  51M Aug  6 08:10 cve.sqlite3</span><br><span class="line">-rw-r--r--. 1 centos centos  32K Aug  6 08:10 cve.sqlite3-shm</span><br><span class="line">-rw-r--r--. 1 centos centos 5.1M Aug  6 08:10 cve.sqlite3-wal</span><br></pre></td></tr></table></figure>

<ul>
<li>goval-dictionary：这是用来建立OVAL的本地副本的工具。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/kotakanbe/goval-dictionary/releases/download/v0.1.0/goval-dictionary_0.1.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxf goval-dictionary_0.1.0_linux_amd64.tar.gz</span><br><span class="line">goval-dictionary fetch-redhat 7</span><br></pre></td></tr></table></figure>

<ul>
<li>gost：是一个 RedHat 或者 Debian 副本的本地安全跟踪器。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 官方没有提供构建好的二进制文件，但是提供了 docker image。</span></span><br><span class="line">docker run --rm -i \</span><br><span class="line">	-v <span class="variable">$PWD</span>:/vuls \</span><br><span class="line">	-v <span class="variable">$PWD</span>:/var/<span class="built_in">log</span>/gost \</span><br><span class="line">	vuls/gost fetch redhat --after=2016-01-01</span><br></pre></td></tr></table></figure>

<p>使用这些工具将 2002年以后的 CVE 事件和 Bug fix 情况在本地建立副本用于测试。时间范围为2002年到2018年9月13日。</p>
<h2 id="vuls-配置"><a href="#vuls-配置" class="headerlink" title="vuls 配置"></a>vuls 配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[servers.172-31-4-82]</span><br><span class="line"># 主机地址</span><br><span class="line">host         = &quot;172.31.4.82&quot;</span><br><span class="line"># 用户名</span><br><span class="line">user        = &quot;ec2-user&quot;</span><br><span class="line"># ssh 登陆 key 文件路径</span><br><span class="line">keyPath     = &quot;/home/username/.ssh/id_rsa&quot;</span><br><span class="line"># 扫描模式 fast fast-root deep </span><br><span class="line">scanMode     = [&quot;fast-root&quot;]</span><br><span class="line"># 扫描在运行的 docker 容器，通过 docker exec 实现，所以只能是在运行的容器。</span><br><span class="line">containerType = &quot;docker&quot;</span><br><span class="line">containersIncluded = [&quot;$&#123;running&#125;&quot;]</span><br></pre></td></tr></table></figure>

<h2 id="vuls-模式"><a href="#vuls-模式" class="headerlink" title="vuls 模式"></a>vuls 模式</h2><p> vuls 从联网和不联网有两种模式 online 和 offline，本次测试使用 online </p>
<p> vuls 从扫描的角度有三种模式 ，分别是 fast， fast-root， deep。</p>
<ul>
<li>fast：快速扫描模式不需要 root 权限，没有依赖性，几乎没有负载扫描目标服务器。</li>
<li>fast-root： 快速扫描模式扫描使用 root 权限，几乎没有负载扫描目标服务器。可以分析受影响的进程（需要 yum-ps 或者debian-goodies来进行）。</li>
<li>deep：使用 root 权限进行深度扫描模式。某些命令可能导致高负载，例如获取许多可更新包的。可以生成解析的变更日志。</li>
</ul>
<p>三种模式对漏洞的扫描程度并没有变化，只是增加了一些附属的功能。所以选择 fast 模式。</p>
<h2 id="vuls-报告"><a href="#vuls-报告" class="headerlink" title="vuls 报告"></a>vuls 报告</h2><p>生成报告</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vuls report</span><br></pre></td></tr></table></figure>

<p>单行模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vuls report -format-one-line-text</span><br><span class="line"></span><br><span class="line">One Line Summary</span><br><span class="line">================</span><br><span class="line">c74     Total: 294 (High:65 Medium:198 Low:24 ?:7)      93/294 Fixed    708 installed, 285 updatable</span><br><span class="line">deb8    Total: 490 (High:62 Medium:158 Low:22 ?:248)    11/490 Fixed    512 installed</span><br></pre></td></tr></table></figure>

<p>完整模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vuls report -format-full-text</span><br><span class="line"></span><br><span class="line">c74 (centos7.4.1708)</span><br><span class="line">====================</span><br><span class="line">Total: 23 (High:22 Medium:1 Low:0), 9/23 Fixed, 708 installed, 285 updatable</span><br><span class="line"></span><br><span class="line">+---------------+----------------------------------------------------------------------------------+</span><br><span class="line">| CVE-2017-9233 |                                                                                  |</span><br><span class="line">+---------------+----------------------------------------------------------------------------------+</span><br><span class="line">| Max Score     | 7.5 HIGH (nvd)                                                                   |</span><br><span class="line">| nvd           | 7.5/CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H HIGH                            |</span><br><span class="line">| redhat_api    | 6.5/CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H MODERATE                        |</span><br><span class="line">| nvd           | 5.0/AV:N/AC:L/Au:N/C:N/I:N/A:P MEDIUM                                            |</span><br><span class="line">| Summary       | XML External Entity vulnerability in libexpat 2.2.0 and earlier (Expat XML       |</span><br><span class="line">|               | Parser Library) allows attackers to put the parser in an infinite loop using a   |</span><br><span class="line">|               | malformed external entity definition from an external DTD.                       |</span><br><span class="line">| Mitigation    |  Do not parse untrusted arbitrary XML data using the expat                       |</span><br><span class="line">|               | package.                                                                         |</span><br><span class="line">| CWE           | CWE-835: Loop with Unreachable Exit Condition (&apos;Infinite Loop&apos;) (redhat_api)     |</span><br><span class="line">| CWE           | [OWASP Top4] CWE-611: Improper Restriction of XML External Entity Reference      |</span><br><span class="line">|               | (&apos;XXE&apos;) (nvd)                                                                    |</span><br><span class="line">| Affected PKG  | expat-2.1.0-10.el7_3 -&gt; Will not fix                                             |</span><br><span class="line">| Confidence    | 100 / RedHatAPIMatch                                                             |</span><br><span class="line">| Source        | https://nvd.nist.gov/vuln/detail/CVE-2017-9233                                   |</span><br><span class="line">| CVSSv2 Calc   | https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator?name=CVE-2017-9233          |</span><br><span class="line">| CVSSv3 Calc   | https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?name=CVE-2017-9233          |</span><br><span class="line">| RHEL-CVE      | https://access.redhat.com/security/cve/CVE-2017-9233                             |</span><br><span class="line">| CWE           | https://cwe.mitre.org/data/definitions/CWE-835.html                              |</span><br><span class="line">| CWE           | https://cwe.mitre.org/data/definitions/CWE-611.html                              |</span><br><span class="line">| OWASP Top10   | https://github.com/OWASP/Top10/blob/master/2017/en/0xa4-xxe.md                   |</span><br><span class="line">+---------------+----------------------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">... snip ...</span><br></pre></td></tr></table></figure>

<p>命令行图形化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vuls tui</span><br></pre></td></tr></table></figure>

<p>通过 tab 键来进行窗口的切换，通过方向键来翻页。</p>
<h1 id="基线测试环境"><a href="#基线测试环境" class="headerlink" title="基线测试环境"></a>基线测试环境</h1><p>本次测试主要针对 CentOS 操作系统的 7.2、7.4、7.5 devel安装和 minimal 安装进行测试，建立以建立基线。</p>
<p>devel 安装时选择 “Development and Creative Workstations” 中的 “development Tools”</p>
<h2 id="CentOS-三个版本安装包的数量"><a href="#CentOS-三个版本安装包的数量" class="headerlink" title="CentOS 三个版本安装包的数量"></a>CentOS 三个版本安装包的数量</h2><table>
<thead>
<tr>
<th></th>
<th>CentOS 7.2</th>
<th>CentOS7.4</th>
<th>CentOS 7.5</th>
</tr>
</thead>
<tbody><tr>
<td>minimal</td>
<td>285</td>
<td>299</td>
<td>300</td>
</tr>
<tr>
<td>dev</td>
<td>1594</td>
<td>1568</td>
<td>1640</td>
</tr>
</tbody></table>
<p>随着版本的更新，越新的版本安装的包会之间变多，</p>
<h1 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h1><h2 id="CentOS-三个版本的高危漏洞"><a href="#CentOS-三个版本的高危漏洞" class="headerlink" title="CentOS 三个版本的高危漏洞"></a>CentOS 三个版本的高危漏洞</h2><table>
<thead>
<tr>
<th></th>
<th>Total</th>
<th>High</th>
<th>Medium</th>
<th>Low</th>
<th>Fixed</th>
<th>installed</th>
<th>updatable</th>
</tr>
</thead>
<tbody><tr>
<td>CentOS 7.2 mini</td>
<td>886</td>
<td>221</td>
<td>557</td>
<td>107</td>
<td>433</td>
<td>290</td>
<td>212</td>
</tr>
<tr>
<td>CentOS 7.2 devel</td>
<td>2206</td>
<td>554</td>
<td>1446</td>
<td>205</td>
<td>1134</td>
<td>1594</td>
<td>1020</td>
</tr>
<tr>
<td>CentOS 7.4 mini</td>
<td>572</td>
<td>122</td>
<td>374</td>
<td>75</td>
<td>124</td>
<td>304</td>
<td>178</td>
</tr>
<tr>
<td>CentOS 7.4 devel</td>
<td>1393</td>
<td>294</td>
<td>941</td>
<td>157</td>
<td>333</td>
<td>1568</td>
<td>661</td>
</tr>
<tr>
<td>CentOS 7.5 mini</td>
<td>491</td>
<td>100</td>
<td>327</td>
<td>63</td>
<td>43</td>
<td>305</td>
<td>79</td>
</tr>
<tr>
<td>CentOS 7.5 devel</td>
<td>1141</td>
<td>213</td>
<td>795</td>
<td>132</td>
<td>85</td>
<td>1640</td>
<td>229</td>
</tr>
</tbody></table>
<p>通过观察上述结果发现，</p>
<ul>
<li>安装的软件越多，带来的漏洞越多。所以建议尽量使用 mini 镜像，然后开始安装需要的软件，避免引入漏洞，扩大被攻击面。</li>
<li>随着版本的更新，总的漏洞数量和高危漏洞数量都在减少。所以尽量使用新的操作系统发行版。</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>vuls</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 的下载工具</title>
    <url>/tools/linux-download-tool.html</url>
    <content><![CDATA[<p>有时候在 linux 下需要下载一些镜像，但是文件较大，使用 wget 要下载很长时间，这个时候如果有 BT 种子文件可以加速下载。</p>
<a id="more"></a>

<p>要用到的工具 transmission ，使用它的客户端在 linux 下载。</p>
<h2 id="1-下载-torrent-文件"><a href="#1-下载-torrent-文件" class="headerlink" title="1. 下载 torrent 文件"></a>1. 下载 torrent 文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://vault.centos.org/7.2.1511/isos/x86_64/CentOS-7-x86_64-DVD-1511.torrent</span><br></pre></td></tr></table></figure>

<h2 id="2-安装-transmission-客户端"><a href="#2-安装-transmission-客户端" class="headerlink" title="2. 安装 transmission 客户端"></a>2. 安装 transmission 客户端</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install transmission-cli</span><br></pre></td></tr></table></figure>

<h2 id="3-下载"><a href="#3-下载" class="headerlink" title="3. 下载"></a>3. 下载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">transmission-cli CentOS-7-x86_64-DVD-1511.torrent</span><br></pre></td></tr></table></figure>

<h1 id="有价值的连接"><a href="#有价值的连接" class="headerlink" title="有价值的连接"></a>有价值的连接</h1><p>其他人的介绍<br><a href="https://blog.csdn.net/jiyuanyi1992/article/details/44250943" target="_blank" rel="noopener">https://blog.csdn.net/jiyuanyi1992/article/details/44250943</a></p>
<p>其他5种 BT 下载工具<br><a href="https://blog.csdn.net/s464036801/article/details/8168157" target="_blank" rel="noopener">https://blog.csdn.net/s464036801/article/details/8168157</a></p>
<p>10种下载工具的简单说明<br><a href="https://linux.cn/article-7369-1.html" target="_blank" rel="noopener">https://linux.cn/article-7369-1.html</a></p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>torrent</tag>
      </tags>
  </entry>
  <entry>
    <title>Superset 介绍及 docker 安装</title>
    <url>/tools/superset-introduction.html</url>
    <content><![CDATA[<p>人是视觉动物，要用数据把一个故事讲活，图表是必不可少的。如果你经常看到做数据分析同事，在SQL客户端里执行完查询，把结果复制/粘贴到Excel里再做成图表，那说明你的公司缺少一个可靠的数据可视化平台。数据可视化是Business Intelligence(简称BI)中的核心功能，有许多成熟的解决方案，例如今天要介绍的 Superset 。</p>
<p>Superset最初是由Airbnb的数据团队开源的，目前已进入Apache Incubator，算是明星级的开源项目。</p>
<a id="more"></a> 

<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul>
<li>一个直观的界面来探索和可视化数据集，并创建交互式仪表板。</li>
<li>展示数据的一系列漂亮的可视化效果。</li>
<li>简单、无代码的用户流可以深入挖掘、切分暴露仪表板下的数据。仪表盘和图表作为深入分析的起点。</li>
<li>SQL编辑器/IDE的一种状态，显示了丰富的元数据浏览器，以及从任何结果集中创建可视化的简单工作流。</li>
<li>一个可扩展的、高粒度的安全模型，允许关于谁可以访问哪些产品特性和数据集的复杂规则。与主要身份验证后端(数据库、OpenID、LDAP、OAuth、REMOTE_USER、…)的集成</li>
<li>一个轻量级语义层，允许通过定义维度和度量来控制数据源如何向用户公开</li>
<li>大多数sql语言数据库的开箱即用支持</li>
<li>与 Druid 的深度整合，允许超集保持快速，同时切片和切分大型实时数据集</li>
<li>具有可配置缓存的快速加载仪表板</li>
</ul>
<h1 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h1><p> 一个 Superset SQLAlchemy 数据源只能是一个单个的表或者视图。<br><a href="https://superset.incubator.apache.org/faq.html" target="_blank" rel="noopener">https://superset.incubator.apache.org/faq.html</a></p>
<h1 id="支持的数据库"><a href="#支持的数据库" class="headerlink" title="支持的数据库"></a>支持的数据库</h1><ul>
<li>MySQL</li>
<li>Postgres</li>
<li>Vertica</li>
<li>Oracle</li>
<li>Microsoft SQL Server</li>
<li>SQLite</li>
<li>Greenplum</li>
<li>Firebird</li>
<li>MariaDB</li>
<li>Sybase</li>
<li>IBM DB2</li>
<li>Exasol</li>
<li>MonetDB</li>
<li>Snowflake</li>
<li>Redshift</li>
<li>Clickhouse</li>
</ul>
<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><ul>
<li><a href="https://airbnb.io/projects/superset/" target="_blank" rel="noopener">https://airbnb.io/projects/superset/</a> （官网）</li>
<li><a href="https://github.com/apache/incubator-superset" target="_blank" rel="noopener">https://github.com/apache/incubator-superset</a></li>
<li><a href="https://superset.incubator.apache.org/index.html" target="_blank" rel="noopener">https://superset.incubator.apache.org/index.html</a></li>
<li><a href="https://hub.docker.com/r/amancevice/superset/" target="_blank" rel="noopener">https://hub.docker.com/r/amancevice/superset/</a></li>
<li><a href="https://github.com/amancevice/superset" target="_blank" rel="noopener">https://github.com/amancevice/superset</a></li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>本次基于如下环境进行安装和使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 操作系统</span></span><br><span class="line">CentOS Linux release 7.4.1708 (Core)</span><br><span class="line">Linux 172-18-12-17 3.10.0-693.el7.x86_64 <span class="comment">#1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"><span class="comment"># docker version</span></span><br><span class="line">Client:</span><br><span class="line"> Version:           18.06.1-ce</span><br><span class="line"> API version:       1.38</span><br><span class="line"> Go version:        go1.10.3</span><br><span class="line"> Git commit:        e68fc7a</span><br><span class="line"> Built:             Tue Aug 21 17:23:03 2018</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.06.1-ce</span><br><span class="line">  API version:      1.38 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.3</span><br><span class="line">  Git commit:       e68fc7a</span><br><span class="line">  Built:            Tue Aug 21 17:25:29 2018</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"><span class="comment"># superset version</span></span><br><span class="line">0.26.3</span><br></pre></td></tr></table></figure>

<h2 id="下载官方推荐的-docker-镜像"><a href="#下载官方推荐的-docker-镜像" class="headerlink" title="下载官方推荐的 docker 镜像"></a>下载官方推荐的 docker 镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull amancevice/superset:0.26.3</span><br><span class="line">[root@hulk ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">amancevice/superset   0.26.3              7ddd79c685a7        9 days ago          923MB</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动 superset 镜像</span></span><br><span class="line"></span><br><span class="line">建议事先准备好 superset 的配置文件和数据目录，</span><br></pre></td></tr></table></figure>

<h1 id="create-config-dir"><a href="#create-config-dir" class="headerlink" title="create config dir"></a>create config dir</h1><p>mkdir /superset/conf</p>
<h1 id="create-data-dir"><a href="#create-data-dir" class="headerlink" title="create data dir"></a>create data dir</h1><p>mkdir /superset/data</p>
<h1 id="start-superset"><a href="#start-superset" class="headerlink" title="start superset"></a>start superset</h1><p>docker run -d -p 8088:8088 -v /superset/conf:/etc/superset -v /superset/data:/var/lib/superset –name superset amancevice/superset:0.26.3</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 初始化 superset 镜像</span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line"># 设定superset的用户名和密码</span><br><span class="line">docker exec -it superset fabmanager create-admin --app superset</span><br><span class="line">Username [admin]: ****</span><br><span class="line">User first name [admin]: ****</span><br><span class="line">User last name [user]: ****</span><br><span class="line">Email [admin@fab.org]: ****</span><br><span class="line">Password:</span><br><span class="line">Repeat for confirmation:</span><br><span class="line">Recognized Database Authentications.</span><br><span class="line"></span><br><span class="line"># 初始化数据库</span><br><span class="line">docker exec -it superset superset db upgrade</span><br><span class="line"># 创建默认角色和许可</span><br><span class="line">docker exec -it superset superset init</span><br><span class="line"># 开启superset服务</span><br><span class="line">docker exec -it superset superset runserver</span><br></pre></td></tr></table></figure>

<h2 id="使用浏览器登陆"><a href="#使用浏览器登陆" class="headerlink" title="使用浏览器登陆"></a>使用浏览器登陆</h2><p>打开宿主机上的浏览器，输入<a href="http://localhost:8088" target="_blank" rel="noopener">http://localhost:8088</a> 用你刚刚创建的用户名进行登录即可。</p>
<h1 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h1><h2 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h2><p>如果在启动时，数据目录是挂载出来的，那么可以忽略数据<br>如果数据目录是在 docker 容器内的，那么先把数据库文件拷出来，superset 官方默认使用 sqlite 数据库，该数据库可以直接拷贝数据库文件，如果使用了其他数据库请参照对应的数据库备份方法备份。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp superset:/var/lib/superset/superset.db .</span><br></pre></td></tr></table></figure>

<p>将superset.db 拷贝到新机器的/superset/data 目录下，数据备份完成。</p>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>在新的机器上安装好 docker，实现 pull 好 superset 的镜像。执行下列命令启动就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8088:8088 -v /superset/conf:/etc/superset -v /superset/data:/var/lib/superset --name superset amancevice/superset:0.26.3</span><br></pre></td></tr></table></figure>

<h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>与迁移类似，先备份数据，方式参考迁移的备份数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Pull desired version</span></span><br><span class="line">docker pull amancevice/superset:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove the current container</span></span><br><span class="line">docker rm -f superset</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deploy a new container ...</span></span><br><span class="line">docker run -d -p 8088:8088 -v /superset/conf:/etc/superset -v /superset/data:/var/lib/superset --name superset amancevice/superset:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># Upgrade the DB</span></span><br><span class="line">docker <span class="built_in">exec</span> superset-new superset db upgrade</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://itindex.net/detail/58117-数据-可视化-开源" target="_blank" rel="noopener">http://itindex.net/detail/58117-数据-可视化-开源</a></li>
<li>官方文档</li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>superset</tag>
        <tag>BI</tag>
      </tags>
  </entry>
  <entry>
    <title>IB 工具安装</title>
    <url>/tools/IB-tool-install.html</url>
    <content><![CDATA[<p>IB 网卡在安装在机器上以后，需要有对应的驱动才可以正常使用。</p>
<p>一般情况下，内核就可以驱动 IB 网卡，如果为了性能或者其他考虑可以安装原厂的驱动。</p>
<p>现在简单记录一下，内核驱动 IB 以后如何快速上手使用。</p>
<a id="more"></a>

<p>安装 IB 工具包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y infiniband-diags</span><br></pre></td></tr></table></figure>

<p>安装子网管理器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y opensm</span><br><span class="line">systemctl start opensm</span><br><span class="line">systemctl <span class="built_in">enable</span> opensm</span><br></pre></td></tr></table></figure>

<p> 接下来就可以使用了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@test01 ~]<span class="comment"># ibstatus</span></span><br><span class="line">Infiniband device <span class="string">'mthca0'</span> port 1 status:</span><br><span class="line">	default gid:	 fe80:0000:0000:0000:0002:c902:0021:56d9</span><br><span class="line">	base lid:	 0x0</span><br><span class="line">	sm lid:		 0x0</span><br><span class="line">	state:		 1: DOWN</span><br><span class="line">	phys state:	 2: Polling</span><br><span class="line">	rate:		 10 Gb/sec (4X)</span><br><span class="line">	link_layer:	 InfiniBand</span><br><span class="line"></span><br><span class="line">Infiniband device <span class="string">'mthca0'</span> port 2 status:</span><br><span class="line">	default gid:	 fe80:0000:0000:0000:0002:c902:0021:56da</span><br><span class="line">	base lid:	 0x1</span><br><span class="line">	sm lid:		 0x1</span><br><span class="line">	state:		 4: ACTIVE</span><br><span class="line">	phys state:	 5: LinkUp</span><br><span class="line">	rate:		 20 Gb/sec (4X DDR)</span><br><span class="line">	link_layer:	 InfiniBand</span><br></pre></td></tr></table></figure>

<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ib</tag>
      </tags>
  </entry>
  <entry>
    <title>limit 详解</title>
    <url>/linux/system/limit-detailed-introduction.html</url>
    <content><![CDATA[<p>今天在使用 Prometheus 时遇到了问题，报错  err=”list block dirs /prometheus/data/: open /prometheus/data/: too many open files”, 经查询发现，系统默认的普通用户系统最大打开文件数为 1024，Prometheus 数据太多导致该问题，将普通用户的这个限制适当的上调即可。</p>
<p>经过这个事情发现，对 limit 的掌握并不熟悉，特意搜索了 limit 的相关信息整理在这里，学习以及备忘。</p>
<p>环境说明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CentOS Linux release 7.4.1708 (Core)</span><br><span class="line">Linux hulk 3.10.0-693.el7.x86_64 <span class="comment">#1 SMP Tue Aug 22 21:09:27 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>

<a id="more"></a> 


<h1 id="ulimit-命令详解"><a href="#ulimit-命令详解" class="headerlink" title="ulimit 命令详解"></a>ulimit 命令详解</h1><p>  Linux是有文件句柄限制的，而且Linux默认普通用户都是1024，root 用户没有限制，作为生产系统使用很容易就达到这个数量</p>
<p>  操作系统各方面的资源都是非常紧缺的, ulimit 可以起到很大的作用，它是一种简单并且有效的实现资源限制的方式。</p>
<p>  ulimit 用于限制 shell 启动进程所占用的资源，支持以下各种类型的限制：所创建的内核文件的大小、进程数据块的大小、Shell 进程创建文件的大小、内存锁住的大小、常驻内存集的大小、打开文件描述符的数量、分配堆栈的最大大小、CPU 时间、单个用户的最大线程数、Shell 进程所能使用的最大虚拟内存。同时，它支持硬资源和软资源的限制。</p>
<p>  作为临时限制，ulimit 可以作用于通过使用其命令登录的 shell 会话，在会话终止时便结束限制，并不影响于其他 shell 会话。而对于长期的固定限制，ulimit 命令语句又可以被添加到由登录 shell 读取的文件中，作用于特定的 shell 用户。</p>
<p>参数说明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a：显示目前资源限制的设定；</span><br><span class="line">-c &lt;core文件上限&gt;：设定core文件的最大值，单位为区块；</span><br><span class="line">-d &lt;数据节区大小&gt;：程序数据节区的最大值，单位为KB；</span><br><span class="line">-f &lt;文件大小&gt;：shell所能建立的最大文件，单位为区块；</span><br><span class="line">-H：设定资源的硬性限制，也就是管理员所设下的限制；</span><br><span class="line">-m &lt;内存大小&gt;：指定可使用内存的上限，单位为KB；</span><br><span class="line">-n &lt;文件数目&gt;：指定同一时间最多可开启的文件数；</span><br><span class="line">-p &lt;缓冲区大小&gt;：指定管道缓冲区的大小，单位512字节；</span><br><span class="line">-s &lt;堆叠大小&gt;：指定堆叠的上限，单位为KB；</span><br><span class="line">-S：设定资源的弹性限制；</span><br><span class="line">-t &lt;CPU时间&gt;：指定CPU使用时间的上限，单位为秒；</span><br><span class="line">-u &lt;程序数目&gt;：用户最多可开启的程序数目；</span><br><span class="line">-v &lt;虚拟内存大小&gt;：指定可使用的虚拟内存上限，单位为KB。</span><br></pre></td></tr></table></figure>

<h1 id="limit-conf-文件说明"><a href="#limit-conf-文件说明" class="headerlink" title="limit.conf 文件说明"></a>limit.conf 文件说明</h1><p>  limits.conf 文件是 Linux PAM（插入式认证模块，Pluggable Authentication Modules）中 pam_limits.so 的配置文件，pam_limits 模块对用户的会话进行资源限制。对系统访问资源有一定保护作用。</p>
<p>一个 shell 的初始limits就是由 pam_limits 设定的，用户登录后，pam_limits 会给用户的shell设定在 limits.conf 定义的值。</p>
<p>pam_limits模块对用户的会话进行资源限制，然后 /etc/pam.d/ 下的应用程序调用 pam_***.so 模块。<br>pam_limits 的设定值也是 per-process 的。<br>pam_limits 的设置是永久生效的。</p>
<p>limit.conf 文件的格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;domain&gt;        &lt;<span class="built_in">type</span>&gt;  &lt;item&gt;  &lt;value&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;domain&gt; 可以是如下:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- user   可以是一个用户名</span><br><span class="line">- @group 可以是一个组名，但是要加@ ，例如：@group</span><br><span class="line">- *      通配符*来做所有用户的限制</span><br><span class="line">- the wildcard %, can be also used with %group syntax, <span class="keyword">for</span> maxlogin <span class="built_in">limit</span></span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;type&gt; 只能是下列三个值之一:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    - soft  当前系统生效的设置值</span><br><span class="line">    - hard  系统中所能设定的最大值</span><br><span class="line">    - -     用 - 就表明同时设置了 soft 和 hard 的值。</span><br><span class="line"></span><br><span class="line">soft 的限制不能比hard 限制高</span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;item&gt; 可以是下列的选项之一:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- core           限制内核文件的大小(KB)               - limits the core file size (KB)</span><br><span class="line">- data           最大数据大小(KB)                     - max data size (KB)</span><br><span class="line">- fsize          最大文件大小(KB)                     - maximum filesize (KB)</span><br><span class="line">- memlock        最大锁定内存地址空间(KB)             - max locked-in-memory address space (KB)</span><br><span class="line">- nofile         打开文件的最大数目                   - max number of open file descriptors</span><br><span class="line">- rss            最大持久设置大小(KB)                 - max resident <span class="built_in">set</span> size (KB)</span><br><span class="line">- stack          最大栈大小(KB)                       - max stack size (KB)</span><br><span class="line">- cpu            以分钟为单位的最多 CPU 时间          - max CPU time (MIN)</span><br><span class="line">- nproc          进程的最大数目                       - max number of processes</span><br><span class="line">- as             地址空间限制(KB)                     - address space <span class="built_in">limit</span> (KB)</span><br><span class="line">- maxlogins      此用户允许登录的最大数目             - max number of logins <span class="keyword">for</span> this user</span><br><span class="line">- maxsyslogins   在系统上可以登录的最大数量           - max number of logins on the system</span><br><span class="line">- priority       优先运行该用户的进程                 - the priority to run user process with</span><br><span class="line">- locks          用户可以持有的文件锁的最大数量       - max number of file locks the user can hold</span><br><span class="line">- sigpending     最大等待信号数                       - max number of pending signals</span><br><span class="line">- msgqueue       POSIX消息队列使用的最大内存          - max memory used by POSIX message queues (bytes)</span><br><span class="line">- nice           最大的优先级允许提高到值:[-20, 19]   - max nice priority allowed to raise to values: [-20, 19]</span><br><span class="line">- rtprio         最大的实时优先级                     - max realtime priority</span><br></pre></td></tr></table></figure>

<ul>
<li>&lt;value&gt; 可以选择如下之一：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    - 0          最小值</span><br><span class="line">    - x          范围内的整数</span><br><span class="line">    - unlimited  不做限制</span><br><span class="line"></span><br><span class="line">最大值不要超过系统限制的最大值。</span><br></pre></td></tr></table></figure>

<h1 id="查看当前-limit-限制"><a href="#查看当前-limit-限制" class="headerlink" title="查看当前 limit 限制"></a>查看当前 limit 限制</h1><p>使用 ulimit -a 即可查看当前的 limit ，open files 对应的就是当前登陆用户的最大文件打开数量。（也可以用 ulimit -n 快速查看）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hulk ~]<span class="comment"># ulimit -a</span></span><br><span class="line">core file size          (blocks, -c) 0</span><br><span class="line">data seg size           (kbytes, -d) unlimited</span><br><span class="line">scheduling priority             (-e) 0</span><br><span class="line">file size               (blocks, -f) unlimited</span><br><span class="line">pending signals                 (-i) 31847</span><br><span class="line">max locked memory       (kbytes, -l) 64</span><br><span class="line">max memory size         (kbytes, -m) unlimited</span><br><span class="line">open files                      (-n) 1024</span><br><span class="line">pipe size            (512 bytes, -p) 8</span><br><span class="line">POSIX message queues     (bytes, -q) 819200</span><br><span class="line">real-time priority              (-r) 0</span><br><span class="line">stack size              (kbytes, -s) 8192</span><br><span class="line">cpu time               (seconds, -t) unlimited</span><br><span class="line">max user processes              (-u) 31847</span><br><span class="line">virtual memory          (kbytes, -v) unlimited</span><br><span class="line">file locks                      (-x) unlimited</span><br><span class="line">[root@hulk ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<h1 id="临时修改-limit-限制"><a href="#临时修改-limit-限制" class="headerlink" title="临时修改 limit 限制"></a>临时修改 limit 限制</h1><p>很多时候为了检查问题，需要临时修改设置以确认问题的原因，或者不希望永久生效，那么可以使用如下命令进行快速设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n 4096</span><br></pre></td></tr></table></figure>

<p>很多文章称 ulimit -n 只允许设置得越来越小，比如先执行了ulimit -n 1000，在执行ulimit -n 1001，就会报 “cannot modify limit: Operation not permitted” 错误。<br>这个其实也是不准确的说法。首先要搞清楚，任何用户都可以执行ulimit，但root用户和非root用户是非常不一样的。</p>
<p>非root用户只能越设置越小，不能越设置越大。<br>root 用户没有限制，可以随意增加或者缩小。</p>
<h1 id="永久修改-limit-限制"><a href="#永久修改-limit-限制" class="headerlink" title="永久修改 limit 限制"></a>永久修改 limit 限制</h1><p>上述的设置只能临时生效，如果想要永久生效，那么要换其他方法。<br>想要永久生效，有2种方法。</p>
<h2 id="将上述命令写到登陆后默认加载的文件"><a href="#将上述命令写到登陆后默认加载的文件" class="headerlink" title="将上述命令写到登陆后默认加载的文件"></a>将上述命令写到登陆后默认加载的文件</h2><p>该方法对应的操作是，如果需要<br>所有用户有效，将 ulimit -n 4096 添加到 /etc/profile 。 所有用户登录后都会检查该文件，并加载其中的配置。<br>特定用户有效，将 ulimit -n 4096 添加到对应用户的 ~/.bash_profile 。 用户登录后都会检查自己家目录下的 .bash* 文件，并加载其中的配置。</p>
<p><strong>个人并不建议使用这种方式进行修改，原因是修改不好或者在某些未考虑周全的情况下，会导致用户无法登录系统，人为增加故障率</strong></p>
<h2 id="修改-limit-conf-配置文件"><a href="#修改-limit-conf-配置文件" class="headerlink" title="修改 limit.conf 配置文件"></a>修改 limit.conf 配置文件</h2><p>在 /etc/security/limits.conf 文件中按照文件的规则添加配置例如</p>
<p>设置 test 的最大打开数为8196</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test - nofile 8196</span><br></pre></td></tr></table></figure>

<p>如果对某一用户或者某中特定的场景有很多的 limit 设置，那么不建议直接修改 /etc/security/limits.conf 文件，这样管理起来成本太大。<br>这种情况下，可以在 /etc/security/limits.d/ 目录下新建 .conf 结尾的配置文件进行单独管理，pam_limits.so 在执行时也会一并加载。</p>
<p>在系统里，/etc/security/limits.d/ 目录下的文件会覆盖 /etc/security/limits.conf 的内容，所以如果在 limits.conf 文件里配置的内容不要和 limits.d 目录下的内容冲突，如果担心冲突，可以将配置都放在 limits.d 下进行管理。</p>
<p>覆盖的顺序是，</p>
<ol>
<li><p>limits.d 目录下的会覆盖 limits.conf 文件。</p>
</li>
<li><p>limits.d 目录下按照英文字母顺序进行加载，后加载的覆盖前边加载的 。</p>
</li>
<li><p>数字应该按照 01 、02、……09、10 这样的顺序进行排序。</p>
</li>
</ol>
<h1 id="修改系统总限制。"><a href="#修改系统总限制。" class="headerlink" title="修改系统总限制。"></a>修改系统总限制。</h1><p>上边讲了很多种查看和修改的方法，一般情况下是够用了，那么现在来说说特殊情况。上边提过，最大文件打开数量最大不要超过系统的限制。</p>
<p>那么怎么查看呢？系统将这个数字存储在了 /proc/sys/fs/file-max 文件，直接查看就好。/proc/sys/fs/file-nr 文件里存储了整个系统目前使用的文件句柄数量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@hulk ~]$ cat /proc/sys/fs/file-max</span><br><span class="line">807968</span><br><span class="line">[<span class="built_in">test</span>@hulk ~]$ cat /proc/sys/fs/file-nr</span><br><span class="line">1408	0	807968</span><br><span class="line">[<span class="built_in">test</span>@hulk ~]$</span><br></pre></td></tr></table></figure>

<p>那么怎么修改这个值呢？有2个方法，一个是临时的，一个是永久的。</p>
<h2 id="临时修改系统限制"><a href="#临时修改系统限制" class="headerlink" title="临时修改系统限制"></a>临时修改系统限制</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span>  6553560 &gt; /proc/sys/fs/file-max</span><br></pre></td></tr></table></figure>

<h2 id="永久修改系统限制"><a href="#永久修改系统限制" class="headerlink" title="永久修改系统限制"></a>永久修改系统限制</h2><p>修改 /etc/sysctl.conf, 加入下列配置，由于修改了系统的内核参数，所以需要使用 sysctl -p 来使新的参数生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fs.file-max = 6553560</span><br></pre></td></tr></table></figure>

<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li>数值设置根据实际情况进行设置，不要一味的增大，否则会导致系统故障无法运行；</li>
<li>网上说修改了 limit.conf 以后如果要生效，必须要确保 pam_limits.so 文件被加入到启动文件中。查看 /etc/pam.d/login 文件中有：session required /lib/security/pam_limits.so 。我在 CentOS 7 的系统里找了/etc/pam.d/login 文件，发现没有 pam_limits.so ， 也可以正常生效;</li>
<li>修改系统最大值时或许可以参考本地磁盘或者存储的相关指标，不要“超标”； </li>
<li>limits.conf 和sysctl.conf区别在于limits.conf是针对用户，而sysctl.conf是针对整个系统参数配置。</li>
</ul>
<p>参考链接</p>
<ul>
<li><a href="http://man.linuxde.net/ulimit" target="_blank" rel="noopener">http://man.linuxde.net/ulimit</a></li>
<li>linux 系统文件 /etc/security/limits.conf </li>
<li><a href="http://smilejay.com/2016/06/centos-7-systemd-conf-limits/" target="_blank" rel="noopener">http://smilejay.com/2016/06/centos-7-systemd-conf-limits/</a></li>
</ul>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>system</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>limit</tag>
      </tags>
  </entry>
  <entry>
    <title>网易博客要关闭了</title>
    <url>/life/gossip/blog-163-closed.html</url>
    <content><![CDATA[<p>今天在查找资料时，有一条跳转到了网易的博客，接着就弹出了网易的博客要关闭的提示框，提示公告如下：</p>
<p><a href="http://blog.163.com/bearer.do" target="_blank" rel="noopener">http://blog.163.com/bearer.do</a></p>
<p>没想到曾经很大的博客网站就这样要宣布结束了，很是感慨，不知道要说什么。<br> <a id="more"></a> </p>
<p>======================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>life</category>
        <category>gossip</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 初始化</title>
    <url>/linux/system/centos7-initialization.html</url>
    <content><![CDATA[<p>使用 Linux 首要的一点就是安装操作系统，初始化环境，这个过程根据不同的需求会有不同的方式结果。<br>下面我来介绍一个实验环境的搭建过程。</p>
<p>需求：</p>
<ul>
<li><p>系统要求 CentOS 7，内核无要求，不需要变化。</p>
</li>
<li><p>可以方便的安装各种软件。</p>
</li>
<li><p>关闭防火墙，降低实验的复杂程度（生产环境不建议关闭防火墙）。</p>
</li>
<li><p>支持 docker 的使用。</p>
<a id="more"></a> 

</li>
</ul>
<h1 id="1-最小化安装-CentOS-7"><a href="#1-最小化安装-CentOS-7" class="headerlink" title="1. 最小化安装 CentOS 7"></a>1. 最小化安装 CentOS 7</h1><p>为了提高安装速度，默认最小化安装，这样只有200+个包，系统安装会很快完成。如果时间充足，可以按照完整版、开发版等。</p>
<p>我经常使用的是 CentOS-7-x86_64-Minimal-1708.iso  这个版本。</p>
<h1 id="2-更新软件包"><a href="#2-更新软件包" class="headerlink" title="2. 更新软件包"></a>2. 更新软件包</h1><p>有时候安装的时候不一定是最新的发行版。可以通过如下命令去进行相应的升级。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>

<h1 id="3-安装-epel-仓库"><a href="#3-安装-epel-仓库" class="headerlink" title="3. 安装 epel 仓库"></a>3. 安装 epel 仓库</h1><p>CentOS 默认的 yum 仓库包含的软件数量有些少，而且一些最新的版本不在里头。为了更方便的使用各种软件以及使用软件的更新版本，所有建议安装 epel 源，当然也可以安装其他的第三方源。安装方法有2种，</p>
<ul>
<li>自行下载 rpm 安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm</span><br><span class="line">rpm -ivh epel-release-7-11.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>当前的 epel 源的 rpm 包连接是有效的，如果版本更新了以后，请到对应的连接下寻找新的版本下载。</p>
<ul>
<li>通过 yum 安装</li>
</ul>
<p>通过如下命令可以安装最新的 epel 源。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure>


<h1 id="4-关闭-SELinux"><a href="#4-关闭-SELinux" class="headerlink" title="4. 关闭 SELinux"></a>4. 关闭 SELinux</h1><p>修改/etc/selinux/config文件中设置SELINU =disabled，然后重启服务器。</p>
<p>临时方法–设置系统参数<br>使用命令 setenforce 0<br>附：<br>setenforce 1 设置SELinux成为enforcing模式<br>setenforce 0 设置SELinux成为permissive模式</p>
<h1 id="5-安装必要的工具包"><a href="#5-安装必要的工具包" class="headerlink" title="5. 安装必要的工具包"></a>5. 安装必要的工具包</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install vim git curl wget htop iotop iftop net-tools nethogs iptables-services</span><br></pre></td></tr></table></figure>

<p>这些都是一些基础的工具</p>
<ul>
<li>vim 编辑工具</li>
<li>git  代码管理客户端</li>
<li>curl 一个利用URL规则在命令行下工作的文件传输工具，很强大的http命令行工具。</li>
<li>wget 下载工具</li>
<li>htop iotop iftop net-tools nethogs 一些性能查看工具</li>
<li>iptables-services 防火墙，必要的时候使用。</li>
</ul>
<h1 id="6-暂时停止并禁用防火墙"><a href="#6-暂时停止并禁用防火墙" class="headerlink" title="6. 暂时停止并禁用防火墙"></a>6. 暂时停止并禁用防火墙</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>

<p>CentOS 7 默认开启了一个一个简单的防火墙，叫做 firewalld ，是 iptables 的简化版，</p>
<h1 id="7-安装-docker"><a href="#7-安装-docker" class="headerlink" title="7. 安装 docker"></a>7. 安装 docker</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加阿里云的源</span></span><br><span class="line">cat &gt;&gt;/etc/yum.repos.d/docker.repo&lt;&lt;EOF</span><br><span class="line">[docker-ce-edge]</span><br><span class="line">name=Docker CE Edge - \<span class="variable">$basearch</span></span><br><span class="line">baseurl=https://mirrors.aliyun.com/docker-ce/linux/centos/7/\<span class="variable">$basearch</span>/edge</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/docker-ce/linux/centos/gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 docker</span></span><br><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure>

<p>至此，一个基于 CentOS 7 的可以使用 docker 的基础实验环境已经搭建完成，我后续的很多实验都是基于这个环境进行的。</p>
<p>=========================<br>Erdong, A Linux user !</p>
]]></content>
      <categories>
        <category>linux</category>
        <category>system</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/uncategorized/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://erdong2018.github.io/" target="_blank" rel="noopener">Erdong’s blog</a>! This is my first blog. </p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>  最近花时间搭建了这个博客，基于 hexo 和 github pages，想把日常遇到的问题和一些学习的知识点记录下来，梳理自己的知识体系，不断提高自己的能力。</p>
<p>  个人比较喜欢阮一峰的博客，他的文字描述总是简单易懂，容易学习，希望以后也能达到这一目的。</p>
<p>  人生总是存在各种各样的巧合，好像总和数字2会有关系，像这次发布第一篇博客刚好赶上22号，年份和月份全部是2的整数倍。</p>
<p>  发现阮一峰有一个关于中文文档编写的规范，会尽量的按照这个来写。<a href="https://github.com/ruanyf/document-style-guide" target="_blank" rel="noopener">document-style-guide</a></p>
<p>惯例: hello world 输出。一切的开始。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#version: 1.0</span></span><br><span class="line"><span class="comment">#Author: Erdong</span></span><br><span class="line"><span class="built_in">echo</span> Hello World</span><br><span class="line"><span class="built_in">echo</span> 2018-08-22</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
